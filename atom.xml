<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zacks&#39;s blog</title>
  <subtitle>the blog of zacks</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zacksleo.github.io/"/>
  <updated>2017-01-16T09:57:59.000Z</updated>
  <id>https://zacksleo.github.io/</id>
  
  <author>
    <name>zacksleo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于OAuth2的通用授权认证规则</title>
    <link href="https://zacksleo.github.io/2016/12/26/%E5%9F%BA%E4%BA%8EOAuth2%E7%9A%84%E9%80%9A%E7%94%A8%E6%8E%88%E6%9D%83%E8%AE%A4%E8%AF%81%E8%A7%84%E5%88%99/"/>
    <id>https://zacksleo.github.io/2016/12/26/基于OAuth2的通用授权认证规则/</id>
    <published>2016-12-26T05:55:57.000Z</published>
    <updated>2017-01-16T09:57:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普遍适用的接口授权及认证规则"><a href="#普遍适用的接口授权及认证规则" class="headerlink" title="普遍适用的接口授权及认证规则"></a>普遍适用的接口授权及认证规则</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>接口授权和认证有许多处理方案, 其中最简单的一种使用appkey和appsecret的方式进行验证</p>
<p>另外还有一种是通过对接口中的参数排序并按照一定加密算法求得哈希值, 作为授权验证的令牌</p>
<p>本文介绍基于OAuth2的通用授权认证规则</p>
<p>简言之, 客户端首先通过一定方式获取访问令牌, 然后在每次调用接口时, 携带该令牌, 服务端验证该令牌</p>
<h3 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h3><ul>
<li>部分接口目前没有使用接口认证授权, 接口一旦泄露, 将存在很大安全隐患</li>
<li>不同项目的接口认证机制不统一, 加重了开发人员的工作负担</li>
<li>一旦接口泄露, 服务器亦不能及时对相关接口进行封锁</li>
</ul>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul>
<li>在<strong>用户中心</strong>获取访问令牌, 访问令牌会同步到公用Redis缓存中, 以便其他项目访问</li>
<li>客户端调用相关查询接口</li>
<li>服务器通过查询Redis中的令牌, 验证该令牌是否合法, 如果不合法, 提醒客户端重新登录</li>
<li>令牌验证通过, 服务器执行后续操作, 返回结果</li>
</ul>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>访问令牌存储于公用Redis缓存中, 所有客户端共用一套授权认证机制</li>
<li>用户在修改/重置密码后, 令牌自动失效, 所有客户端会强制下线, 保证安全性</li>
<li>与<strong>用户中心</strong>深度结合, 统一注册和登录, 统一授权认证</li>
<li>Redis可以使用集群进行扩展, 加速授权和访问</li>
<li>用户信息也将缓存在Redis中, 方便各个项目统一, 快速读取用户信息</li>
<li>基于OAuth2实现, 服务端可以方便的控制接口的访问权限, 例如一旦client_id和client_secret泄露, 可立即封杀</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;普遍适用的接口授权及认证规则&quot;&gt;&lt;a href=&quot;#普遍适用的接口授权及认证规则&quot; class=&quot;headerlink&quot; title=&quot;普遍适用的接口授权及认证规则&quot;&gt;&lt;/a&gt;普遍适用的接口授权及认证规则&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot;
    
    </summary>
    
    
      <category term="OAuth2, API认证" scheme="https://zacksleo.github.io/tags/OAuth2-API%E8%AE%A4%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>如何自动部署GitLab项目</title>
    <link href="https://zacksleo.github.io/2016/11/04/%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2GitLab%E9%A1%B9%E7%9B%AE/"/>
    <id>https://zacksleo.github.io/2016/11/04/如何自动部署GitLab项目/</id>
    <published>2016-11-04T06:01:48.000Z</published>
    <updated>2017-01-16T09:59:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何自动部署"><a href="#如何自动部署" class="headerlink" title="如何自动部署"></a>如何自动部署</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>GitLab有预制的钩子, 在代码提交/合并等事件中,会自动调用WebHoos, 即向该URL发送POST请求</li>
<li>在布署服务器上监听该POST, 验证通过后执行相关的布置Shell脚本, 即可完成自动布署</li>
</ul>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><ul>
<li><ol>
<li>安装Python和Pip</li>
</ol>
</li>
<li><p>2.如果需要, 安装python的requests模块和argparse模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install requests</div><div class="line">easy_install argparse</div></pre></td></tr></table></figure>
</li>
<li><ol>
<li>下载监听脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl https://raw.githubusercontent.com/zacksleo/docker-hook/master/docker-hook &gt; /usr/local/bin/docker-hook; chmod +x /usr/local/bin/docker-hook</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>4.脚本安装完成后即可使用docker-hook 命令, 默认监听8555端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup docker-hook  -t  &lt;auth-token&gt;  -c  &lt;command&gt; &amp;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中, auth-token 替换为授权token, command替换为要执行的命令, 例如<br>auth-token为<code>auto-deploy-pushserver</code>,command为<code>sh /mnt/pushserver/deploy.sh</code><br>则执行命令: <code>docker-hook -t auto-deploy-pushserver -c sh /mnt/pushserver/deploy.sh</code></p>
<p>deploy.sh的内容为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin dev</div></pre></td></tr></table></figure></p>
<p>nohup+&amp;命令为该进程设置为守护进程, 防止进程退出</p>
<ul>
<li><p>5.在GitLab的项目设置里面,设置Webhooks, 本例子中则为<code>139.198.9.141:8555/audo-deploy-pushserver</code></p>
</li>
<li><ol>
<li>注意, 如果需要部署多个hooks, 则需要通过–port配置不同的端口, 例如</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup docker-hook  -t  &lt;auth-token2&gt;  -c  &lt;command2&gt;  --port 8556 &amp;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/zacksleo/docker-hook" target="_blank" rel="external">docker-hook</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何自动部署&quot;&gt;&lt;a href=&quot;#如何自动部署&quot; class=&quot;headerlink&quot; title=&quot;如何自动部署&quot;&gt;&lt;/a&gt;如何自动部署&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CodeIgniter项目自动向GitLab上报Bug</title>
    <link href="https://zacksleo.github.io/2016/10/12/CodeIgniter%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%90%91GitLab%E4%B8%8A%E6%8A%A5Bug/"/>
    <id>https://zacksleo.github.io/2016/10/12/CodeIgniter项目自动向GitLab上报Bug/</id>
    <published>2016-10-12T09:48:25.000Z</published>
    <updated>2017-01-17T02:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CI项目自动上报Bug"><a href="#CI项目自动上报Bug" class="headerlink" title="CI项目自动上报Bug"></a>CI项目自动上报Bug</h2><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过重写CI_Exceptions, 当程序出错时, 通过调用GitLab中提交issue的API, 将相关信息自动提交</p>
<p>如果是Yii2项目,见 <a href="https://zacksleo.github.io/2016/10/12/Yii2%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%90%91GitLab%E4%B8%8A%E6%8A%A5Bug/">Yii自动上报Bug</a></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>获取项目id和自己的id<br>可以通过GitLab的project接口, 从中拿到project_id和assignee_id</li>
</ul>
<p>在此提供一个方法, 给自己提交一个issue, 提交时审查HTML, 可以找到 issue_assignee_id和 data-project-id </p>
<p><img src="http://ww3.sinaimg.cn/large/675eb504gw1fbtdv1gcjcj20oq0d543f.jpg" alt=""></p>
<ul>
<li>创建配置文件 config/gitlab.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// to enable, set this to true</div><div class="line">$config[&apos;gitlab&apos;] = true;</div><div class="line">$config[&apos;gitlab_project_id&apos;] =xx; //找到项目的id</div><div class="line">$config[&apos;gitlab_assignee_id&apos;] = xx; //找到自己的id</div><div class="line">$config[&apos;gitlab_api&apos;] = &apos;http://demo.com/api/v3/projects/&apos;.$config[&apos;gitlab_project_id&apos;].&apos;/issues&apos;;</div><div class="line">$config[&apos;gitlab_private_token&apos;] = &apos;xxx&apos;;</div></pre></td></tr></table></figure>
<ul>
<li>在项目中添加core/MY_Exceptions</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">&lt;?php if (!defined(&apos;BASEPATH&apos;)) &#123;</div><div class="line">    exit(&apos;No direct script access allowed&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Extend exceptions to email me on exception</div><div class="line"> *</div><div class="line"> * @author Mike Funk</div><div class="line"> * @email mfunk@christianpublishing.com</div><div class="line"> *</div><div class="line"> * @file MY_Exceptions.php</div><div class="line"> */</div><div class="line"></div><div class="line">/**</div><div class="line"> * MY_Exceptions class.</div><div class="line"> *</div><div class="line"> * @extends CI_Exceptions</div><div class="line"> */</div><div class="line">class MY_Exceptions extends CI_Exceptions</div><div class="line">&#123;</div><div class="line"></div><div class="line">    // --------------------------------------------------------------------------</div><div class="line"></div><div class="line">    /**</div><div class="line">     * extend log_exception to add emailing of php errors.</div><div class="line">     *</div><div class="line">     * @access public</div><div class="line">     * @param string $severity</div><div class="line">     * @param string $message</div><div class="line">     * @param string $filepath</div><div class="line">     * @param int $line</div><div class="line">     * @return void</div><div class="line">     */</div><div class="line">    function log_exception($severity, $message, $filepath, $line)</div><div class="line">    &#123;</div><div class="line">        $ci =&amp; get_instance();</div><div class="line">        $ci-&gt;config-&gt;load(&apos;gitlab&apos;);</div><div class="line">        if (config_item(&apos;gitlab&apos;)) &#123;</div><div class="line">            $ch = curl_init();</div><div class="line">            curl_setopt($ch, CURLOPT_URL, config_item(&apos;gitlab_api&apos;));</div><div class="line">            curl_setopt($ch, CURLOPT_HTTPHEADER, array(</div><div class="line">                &apos;PRIVATE-TOKEN: &apos; . config_item(&apos;gitlab_private_token&apos;),</div><div class="line">            ));</div><div class="line">            curl_setopt($ch, CURLOPT_POSTFIELDS, [</div><div class="line">                &apos;title&apos; =&gt; $message,</div><div class="line">                &apos;description&apos; =&gt; &apos;&lt;pre&gt;&apos; . $message . &apos;&lt;/pre&gt;&apos;,</div><div class="line">                &apos;assignee_id&apos; =&gt; config_item(&apos;gitlab_assignee_id&apos;),</div><div class="line">                &apos;labels&apos; =&gt; &apos;捕虫器,错误&apos;,</div><div class="line">            ]);</div><div class="line">            curl_setopt($ch, CURLOPT_HEADER, false);</div><div class="line">            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);</div><div class="line">            curl_setopt($ch, CURLOPT_VERBOSE, false);</div><div class="line">            $response = curl_exec($ch);</div><div class="line">            curl_close($ch);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // do the rest of the codeigniter stuff</div><div class="line">        parent::log_exception($severity, $message, $filepath, $line);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // --------------------------------------------------------------------------</div><div class="line"></div><div class="line">    /**</div><div class="line">     * replace short tags with values.</div><div class="line">     *</div><div class="line">     * @access private</div><div class="line">     * @param string $content</div><div class="line">     * @param string $severity</div><div class="line">     * @param string $message</div><div class="line">     * @param string $filepath</div><div class="line">     * @param int $line</div><div class="line">     * @return string</div><div class="line">     */</div><div class="line">    private function _replace_short_tags($content, $severity, $message, $filepath, $line)</div><div class="line">    &#123;</div><div class="line">        $content = str_replace(&apos;&#123;&#123;severity&#125;&#125;&apos;, $severity, $content);</div><div class="line">        $content = str_replace(&apos;&#123;&#123;message&#125;&#125;&apos;, $message, $content);</div><div class="line">        $content = str_replace(&apos;&#123;&#123;filepath&#125;&#125;&apos;, $filepath, $content);</div><div class="line">        $content = str_replace(&apos;&#123;&#123;line&#125;&#125;&apos;, $line, $content);</div><div class="line"></div><div class="line">        return $content;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // --------------------------------------------------------------------------</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CI项目自动上报Bug&quot;&gt;&lt;a href=&quot;#CI项目自动上报Bug&quot; class=&quot;headerlink&quot; title=&quot;CI项目自动上报Bug&quot;&gt;&lt;/a&gt;CI项目自动上报Bug&lt;/h2&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;head
    
    </summary>
    
    
      <category term="CodeIgniter, GitLab, Bug, 自动化" scheme="https://zacksleo.github.io/tags/CodeIgniter-GitLab-Bug-%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Yii2项目自动向GitLab上报Bug</title>
    <link href="https://zacksleo.github.io/2016/10/12/Yii2%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%90%91GitLab%E4%B8%8A%E6%8A%A5Bug/"/>
    <id>https://zacksleo.github.io/2016/10/12/Yii2项目自动向GitLab上报Bug/</id>
    <published>2016-10-12T09:47:20.000Z</published>
    <updated>2017-01-17T02:04:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Yii2-项目自动上报Bug"><a href="#Yii2-项目自动上报Bug" class="headerlink" title="Yii2 项目自动上报Bug"></a>Yii2 项目自动上报Bug</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>  yii2在程序报错时, 会执行指定action, 通过重写ErrorAction, 实现Bug自动提交至GitLab的issue</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li>配置SiteController中的actions方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public function actions()</div><div class="line">&#123;</div><div class="line">    return [</div><div class="line">        &apos;error&apos; =&gt; [</div><div class="line">            &apos;class&apos; =&gt; &apos;app\helpers\web\ErrorAction&apos;,</div><div class="line">        ],</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>重写ErrorAction, 位于app\helpers\web\ErrorAction, 并修改常量URL,PRIVATE_TOKEN和ASSIGNEE_ID</li>
</ul>
<p>如何获取project_id和assignee_id见 <a href="https://zacksleo.github.io/2017/10/12/CI%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%90%91GitLab%E4%B8%8A%E6%8A%A5Bug/">WIKI</a> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">namespace app\helpers\web;</div><div class="line"></div><div class="line">use yii;</div><div class="line">use yii\base\Action;</div><div class="line">use yii\base\Exception;</div><div class="line">use yii\base\UserException;</div><div class="line">use yii\web\HttpException;</div><div class="line"></div><div class="line">class ErrorAction extends \yii\web\ErrorAction</div><div class="line">&#123;</div><div class="line">    const URL = &apos;&#123;host&#125;/api/v3/projects/&#123;project_id&#125;/issues&apos;; // host替换为主机地址, project_id为项目id</div><div class="line">    const PRIVATE_TOKEN = &apos;tD3Te-ctECeGwEHH7-ec&apos;;</div><div class="line">    const ASSIGNEE_ID = 21;</div><div class="line"></div><div class="line">    public function run()</div><div class="line">    &#123;</div><div class="line">        if (($exception = Yii::$app-&gt;getErrorHandler()-&gt;exception) === null) &#123;</div><div class="line">            $exception = new HttpException(404, Yii::t(&apos;yii&apos;, &apos;Page not found.&apos;));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if ($exception instanceof HttpException) &#123;</div><div class="line">            $code = $exception-&gt;statusCode;</div><div class="line">        &#125; else &#123;</div><div class="line">            $code = $exception-&gt;getCode();</div><div class="line">        &#125;</div><div class="line">        if ($exception instanceof Exception) &#123;</div><div class="line">            $name = $exception-&gt;getName();</div><div class="line">        &#125; else &#123;</div><div class="line">            $name = $this-&gt;defaultName ?: Yii::t(&apos;yii&apos;, &apos;Error&apos;);</div><div class="line">        &#125;</div><div class="line">        $preCode = $code;</div><div class="line">        if ($code) &#123;</div><div class="line">            $name .= &quot; (#$code)&quot;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if ($exception instanceof UserException) &#123;</div><div class="line">            $message = $exception-&gt;getMessage();</div><div class="line">        &#125; else &#123;</div><div class="line">            $message = $this-&gt;defaultMessage ?: Yii::t(&apos;yii&apos;, &apos;An internal server error occurred.&apos;);</div><div class="line">        &#125;</div><div class="line">        if ($code != &apos;404&apos;) &#123;</div><div class="line">            //自动向GitLab提交Bug</div><div class="line">            $url = self::URL;</div><div class="line">            $ch = curl_init();</div><div class="line">            curl_setopt($ch, CURLOPT_URL, $url);</div><div class="line">            curl_setopt($ch, CURLOPT_HTTPHEADER, array(</div><div class="line">                &apos;PRIVATE-TOKEN: &apos;.self::PRIVATE_TOKEN,</div><div class="line">            ));</div><div class="line"></div><div class="line">            curl_setopt($ch, CURLOPT_POSTFIELDS, [</div><div class="line">                &apos;title&apos; =&gt; $message,</div><div class="line">                &apos;description&apos; =&gt; &apos;&lt;blockquote&gt;&apos;.Yii::$app-&gt;request-&gt;getReferrer().&apos;&lt;/blockquote&gt;&apos;. &apos;&lt;blockquote&gt;&apos; . Yii::$app-&gt;request-&gt;absoluteUrl . &apos;&lt;/blockquote&gt;&lt;br/&gt;&lt;pre&gt;&apos; . $exception . &apos;&lt;/pre&gt;&apos;,</div><div class="line">                &apos;assignee_id&apos; =&gt; self::ASSIGNEE_ID,</div><div class="line">                &apos;labels&apos; =&gt; &apos;捕虫器,&apos; . $name,</div><div class="line">            ]);</div><div class="line">            curl_setopt($ch, CURLOPT_HEADER, false);</div><div class="line">            // Pass TRUE or 1 if you want to wait for and catch the response against the request made</div><div class="line">            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);</div><div class="line">            // For Debug mode; shows up any error encountered during the operation</div><div class="line">            curl_setopt($ch, CURLOPT_VERBOSE, false);</div><div class="line">            $response = curl_exec($ch);</div><div class="line">            curl_close($ch);</div><div class="line">        &#125;</div><div class="line">        if (Yii::$app-&gt;getRequest()-&gt;getIsAjax() || strpos($_SERVER[&apos;REQUEST_URI&apos;], &apos;/api/&apos;) &gt; -1) &#123;</div><div class="line">            \Yii::$app-&gt;response-&gt;format = \yii\web\Response::FORMAT_JSON;</div><div class="line">            return [</div><div class="line">                &apos;message&apos; =&gt; $message</div><div class="line">            ];</div><div class="line">        &#125; else &#123;</div><div class="line">            return $this-&gt;controller-&gt;render($this-&gt;view ?: $this-&gt;id, [</div><div class="line">                &apos;name&apos; =&gt; $name,</div><div class="line">                &apos;message&apos; =&gt; $message,</div><div class="line">                &apos;exception&apos; =&gt; $exception,</div><div class="line">            ]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Yii2-项目自动上报Bug&quot;&gt;&lt;a href=&quot;#Yii2-项目自动上报Bug&quot; class=&quot;headerlink&quot; title=&quot;Yii2 项目自动上报Bug&quot;&gt;&lt;/a&gt;Yii2 项目自动上报Bug&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP解析提取Markdown中的标题来生成TOC</title>
    <link href="https://zacksleo.github.io/2016/10/12/PHP%E8%A7%A3%E6%9E%90%E6%8F%90%E5%8F%96Markdown%E4%B8%AD%E7%9A%84%E6%A0%87%E9%A2%98%E6%9D%A5%E7%94%9F%E6%88%90TOC/"/>
    <id>https://zacksleo.github.io/2016/10/12/PHP解析提取Markdown中的标题来生成TOC/</id>
    <published>2016-10-12T08:46:48.000Z</published>
    <updated>2017-01-16T09:59:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>先解析markdown为HTML, 然后解析出h1-h10标签, 根据h标签的前后大小, 决定ul的层级, 以此生成ul序列的嵌套</p>
<ul>
<li>如果当前H标签和前面H标签相同, 则生成<code>&lt;li&gt;&lt;/li&gt;</code>,</li>
<li>如果比前面的大, 则生成<code>&lt;ul&gt;</code><ul>
<li>如果比前面的小, 生成<code>&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;/li&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h2><ul>
<li>选择一个markdown Parser库, 将markdown解析</li>
</ul>
<p>$file为文件路径, $docs为解析后的html字串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$content = file_get_contents($file);</div><div class="line"> require_once(&apos;/var/www/html/vendor/erusev/parsedown/Parsedown.php&apos;);</div><div class="line"> $parsedown = new \Parsedown();</div><div class="line"> $docs = $parsedown-&gt;text($content);</div></pre></td></tr></table></figure>
<ul>
<li>解析DOM, 根据H标签的前后顺序, 生成TOC</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">$dom = new \DOMDocument();</div><div class="line"> $docs = mb_convert_encoding($docs, &apos;HTML-ENTITIES&apos;, &quot;UTF-8&quot;);</div><div class="line"> $dom-&gt;loadHTML($docs);</div><div class="line"></div><div class="line"> // The toc being generated.</div><div class="line"> $toc = &apos;&apos;;</div><div class="line"> $curr = $last = 0;</div><div class="line"> $type = &quot;ul&quot;;</div><div class="line"> $xpath = new \DomXPath($dom);</div><div class="line"> $t = $xpath-&gt;query(&apos;//h1|//h2|//h3|//h4|//h5|//h6&apos;);</div><div class="line"> foreach ($t as $key =&gt; $item) &#123;</div><div class="line">     $level = ltrim($item-&gt;nodeName, &apos;h&apos;);</div><div class="line">     sscanf($item-&gt;nodeName, &apos;h%u&apos;, $curr);</div><div class="line">     // If the current level is greater than the last level indent one level</div><div class="line">     if ($curr &gt; $last) &#123;</div><div class="line">         if ($last == 0) &#123;</div><div class="line">             $toc .= &apos;&lt;&apos; . $type . &quot; class=&apos;nav doc-menu affix-top&apos; id=&apos;doc-menu&apos; data-spy=&apos;affix&apos;&gt;\n&quot;;</div><div class="line">         &#125; else &#123;</div><div class="line">             $toc .= &apos;&lt;&apos; . $type . &quot; class=&apos;nav doc-sub-menu&apos;&gt;\n&quot;;</div><div class="line">         &#125;</div><div class="line">     &#125; // If the current level is less than the last level go up appropriate amount.</div><div class="line">     elseif ($curr &lt; $last) &#123;</div><div class="line">         $toc .= str_repeat(&apos;&lt;/li&gt;&lt;/&apos; . $type . &quot;&gt;\n&quot;, $last - $curr) . &quot;&lt;/li&gt;\n&quot;;</div><div class="line">     &#125; // If the current level is equal to the last.</div><div class="line">     else &#123;</div><div class="line">         $toc .= &quot;&lt;/li&gt;\n&quot;;</div><div class="line">     &#125;</div><div class="line">     // Get and/or set an id</div><div class="line">     if ($item-&gt;hasAttribute(&apos;id&apos;)) &#123;</div><div class="line">         $id = $item-&gt;getAttribute(&apos;id&apos;);</div><div class="line">     &#125; else &#123;</div><div class="line">        //auto generate id for the tag</div><div class="line">         $id = uniqid();</div><div class="line">         $t[$key]-&gt;setAttribute(&apos;id&apos;, $id);</div><div class="line">     &#125;</div><div class="line">     if ($last == 0) &#123;</div><div class="line">         $toc .= &apos;&lt;li class=&quot;active&quot;&gt;&lt;a class=&quot;scrollto&quot; href=&quot;#&apos; . $id . &apos;&quot;&gt;&apos; . $item-&gt;nodeValue . &quot;&lt;/a&gt;\n&quot;;</div><div class="line">     &#125; else &#123;</div><div class="line">         $toc .= &apos;&lt;li&gt;&lt;a class=&quot;scrollto&quot; href=&quot;#&apos; . $id . &apos;&quot;&gt;&apos; . $item-&gt;nodeValue . &quot;&lt;/a&gt;\n&quot;;</div><div class="line">     &#125;</div><div class="line">     $last = $curr;</div><div class="line"> &#125;</div><div class="line">// 将修改后的DOM 赋值为docs</div><div class="line"> $docs = $dom-&gt;saveHTML();</div></pre></td></tr></table></figure>
<ul>
<li>渲染页面<br>$docs为html主体内容<br>$toc为生成的目录, 形如<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li&gt;&lt;/li&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li&gt;&lt;/li&gt;</div><div class="line">      &lt;li&gt;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;li&gt;&lt;/li&gt;</div><div class="line">  &lt;li&gt;&lt;/li&gt;</div><div class="line"> &lt;/ul&gt;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;先解析markdown为HTML, 然后解析出h1-h10标签, 根据h标签的前后大小, 决定ul的层级, 以此生成ul序列的嵌套&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Docker安装Redmine</title>
    <link href="https://zacksleo.github.io/2016/08/23/%E4%BD%BF%E7%94%A8Docker%E5%AE%89%E8%A3%85Redmine/"/>
    <id>https://zacksleo.github.io/2016/08/23/使用Docker安装Redmine/</id>
    <published>2016-08-23T10:43:38.000Z</published>
    <updated>2017-01-16T10:00:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul>
<li><ol>
<li>安装部署Docker<br>&gt;<br>因为docker对内核版本有要求，所有要先升级系统（linux内核3.0+），这里用的CentOS 7</li>
</ol>
</li>
<li><p>2.拉取镜像  <code>docker pull sameersbn/redmine:latest</code></p>
</li>
</ul>
<p><a href="https://www.daocloud.io/mirror.html#accelerator-doc" target="_blank" rel="external">docker镜像加速</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://0835afe2.m.daocloud.io</div></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>安装docker-compose, <strong>“由于网络原因，该步骤可能会下载失败，请尝试多下载几次，或者外挂代理”</strong></li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</div></pre></td></tr></table></figure>
<p>修改权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /usr/local/bin/docker-compose</div></pre></td></tr></table></figure></p>
<ul>
<li><ol>
<li>使用compose快速启动 <strong>可以需要外挂</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://raw.githubusercontent.com/sameersbn/docker-redmine/master/docker-compose.yml</div><div class="line">docker-compose up</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><ol>
<li>映射数据目录</li>
</ol>
</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>linux内核要最新 3.0+</li>
<li>redmine默认使用的端口是10083，如果启动成功后，无法打开，使用telnet 远程检测端口访问性，如果不能访问，检查两个方面：1.本机防火墙是否禁用端口（用telnet 检测）；2.运营商/云端是否禁用</li>
<li>注意使用volumn命令映射数据存储命令</li>
</ul>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="external">Docker Compose安装</a></li>
<li><a href="https://github.com/sameersbn/docker-redmine" target="_blank" rel="external">Docker安装redmine</a></li>
<li><a href="http://dockone.io/article/133" target="_blank" rel="external">Docker终极指南</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;安装部署Docker&lt;br&gt;&amp;gt;&lt;br&gt;因为docker对内核版本有要求，所有要先升级系统
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP常见面试材料</title>
    <link href="https://zacksleo.github.io/2016/05/29/PHP%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E6%9D%90%E6%96%99/"/>
    <id>https://zacksleo.github.io/2016/05/29/PHP常见面试材料/</id>
    <published>2016-05-29T09:34:37.000Z</published>
    <updated>2017-01-16T10:02:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见面试内容"><a href="#常见面试内容" class="headerlink" title="常见面试内容"></a>常见面试内容</h2><h3 id="技术线（偏深度）："><a href="#技术线（偏深度）：" class="headerlink" title="技术线（偏深度）："></a>技术线（偏深度）：</h3><ul>
<li><ol>
<li>基础知识，比如数据结构，多线程，I/O，Http协议等</li>
</ol>
</li>
<li><ol>
<li>语言深度，比如PHP的运行机制，性能优化，APC（以及其原理等）</li>
</ol>
</li>
<li><ol>
<li>源码阅读，比如看过哪些框</li>
</ol>
</li>
</ul>
<hr>
<h3 id="写出一下各段代码的输出结果："><a href="#写出一下各段代码的输出结果：" class="headerlink" title="写出一下各段代码的输出结果："></a>写出一下各段代码的输出结果：</h3><ul>
<li><p>1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$a = (1 &lt; &lt; 0);</div><div class="line">$b = (1 &lt; &lt; $a);</div><div class="line">$c = (1 &lt; &lt; $b);</div><div class="line">echo ($c</div><div class="line"></div><div class="line">$b) &lt; &lt; 2 * $a</div><div class="line">$a;</div></pre></td></tr></table></figure>
</li>
<li><ol>
<li><code>echo &#39;1&#39;.print(2)+3;</code></li>
</ol>
</li>
<li><p>3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$a = 0x01;</div><div class="line">$b = 0x02;</div><div class="line">echo $a===$b &gt; &gt; $a;</div><div class="line"></div><div class="line">$foo = 5 + &apos;10 things&apos;;</div></pre></td></tr></table></figure>
</li>
<li><ol>
<li><code>print (196*100) !== (double)1960;</code></li>
</ol>
</li>
<li><ol>
<li><code>echo 0500</code></li>
</ol>
</li>
<li><ol>
<li><code>$a = 0; echo ~$a;</code></li>
</ol>
</li>
</ul>
<hr>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li><ol>
<li>解释一下SQL注入的原理及危害，假设这里有一个不严谨的登陆程序，如何利用SQL注入进入。</li>
</ol>
</li>
<li><ol>
<li>解释一下跨站脚本的原理及危害，假设这里有一个不严谨的留言板，请构造跨站脚本范例。</li>
</ol>
</li>
<li><ol>
<li>解释一下数据索引为什么能提高效率。<br>场景 <code>SQL select * from user where area=&#39;广州‘ and sex=&#39;女‘ order by lastlogin desc limit 30;</code></li>
</ol>
</li>
<li>4.如何设计索引？</li>
<li>5.现在有10万条 IP地址对应区间表，格式为 <code>startip, endip, area</code><br>要求每个用户访问时都能快速分析出对方地区，请设计实现。数据库或不用数据库，要求每秒钟实现超过千次的查询。<br>基本上到这些对我而言就已经足够了，如果上面题目特别满意的，再附加</li>
<li><ol>
<li>现在有一个屏蔽词列表，大约几千个词；假设有一个繁忙的论坛社区，发帖量巨大，要求用户每发一篇文章就要快速分析是否包含屏蔽词，请给出程序设计。</li>
</ol>
</li>
<li><ol>
<li>一个游戏网站，有数千个小游戏，每个游戏要做积分排行，数据结构如下<br><code>gameid,userid,gamescore</code></li>
</ol>
</li>
<li>8.每天数百万积分提交，数据量巨大，目前要求分库处理。<br>要求，可以基于每个游戏id可以查询积分排行榜。 可以基于用户id查询，比如自己或好友的历史游戏积分记录。请问如何处理分库。</li>
</ul>
<hr>
<p>专业程度体现在对PHP的基本功的掌握和一些进阶知识的了解，比如对常见性能点、不同版本特性等，session的实现机制、include/require的差异，进一步的主流框架掌握程度、常见的性能优化策略、其作为脚本语言所具备的一些特性、如何规避PHP的性能劣势打造高并发的系统、如何保证高并发下的可用性和数据完整性等等。</p>
<p>周边知识主要会包括MySQL性能优化、Memcache使用、Nginx/Apache的配合、对于PV/Click等数据收集和观察的方法等。 同样的，利用curl/socket操作http/tcp/udp，进一步的RPC调用（Web Service/JSONP/Thrift等）的前后端实现，进一步的包括更多的Cache策略（远近、一致性哈希、数据一致性）、对Sharding即分库分表之类操作的了解、更多NoSQL产品知识、各类常见协议细节、安全性（注入和旁注、跨站和CC）等。</p>
<hr>
<ul>
<li>0.简单做一下自我介绍,? 然后谈一下近三年来你的得意之作?</li>
<li>1.看看简历，会问一些过去做的项目的用户量、pv、吞吐量、相关难点和解决方法等</li>
<li>2.数据库设计经验,为什么进行分表? 分库?<br>一般多少数据量开始分表? 分库? 分库分表的目的? 什么是数据库垂直拆分? 水平拆分? 分区等等？可以举例说明</li>
<li>3.数据库优化有哪些? 分别需要注意什么?</li>
<li>4.web开发方面会遇到哪些缓存? 分别如何优化?</li>
<li>5.给你256M的内存,对10G的文件进行排序(文件每行1个数字),如何实现？<br>对10G的文件进行查找如何实现？<br>统计10G文件每个关键字出现的次数如何实现？</li>
<li>6.假如你现在是12306火车订票的设计师,你该如何设计满足全国人民订票?</li>
<li>7.假如有1亿用户的访问量,你的服务器架构是怎样的? 用户信息的存储方案如何设计?</li>
<li>8.如果你是技术组长,所带团队任务进度无法完成你该如何解决?<br>如果在进度排满的前提下插入任务,你该如何保证总进度不延期?<br>如果有的工程师今天预定任务没有完成,你该如何解决?</li>
<li>9.从你的经验方面谈一下如何构建高性能web站点? 需要哪些环节? 步骤? 每个步骤需要注意什么如何优化等?</li>
<li>10.为什么要对数据库进行主从分离?</li>
<li>11.如何处理多服务器共享session?</li>
<li>12.一个10G的表,你用php程序统计某个字段出现的次数,思路是?</li>
<li>13.会告诉你一个nginx日志例子,用你认为最佳的编程语言统计一下http响应时间超过1秒的前10个url?</li>
<li>14.给你一个mysql配置文件,用你认为最佳的编程语言解析该文件?</li>
<li>15.给你两个路径a和b,写一个算法或思路计算a和b差距几层并显示a和b的交集?</li>
<li>16.给你一个url,在nginx配置一下rewrite指定到某个具体路径?</li>
<li>17.一个php文件的解释过程是? 一般加速php有哪些? 提高php整体性能会用到哪些技术?</li>
<li>18.session和cookie生存周期区别? 存储位置区别?</li>
<li>19.require、include、require_once、include_once区别? 加载区别? 如果程序按需加载某个php文件你如何实现?</li>
<li>20.chrome号称为多线程的,所以多线程和多进程的区别为?</li>
<li>21.php在2011年底出现hash碰撞,hash碰撞原理为? 如何进行修复?</li>
<li>22.web不安全因素有哪些? 分别如何防范?</li>
<li>23.假如两个单链表相交,写一个最优算法计算交点位置,说思路也可以?</li>
<li>24.假如你是技术组长? 如何提高团队效率?</li>
<li>25.nginx负载均衡有哪些? 如果其中一台服务器挂掉,报警机制如何实现?</li>
<li>26.不优化前提下,apache一般最大连接数为? nginx一般最大连接数为? mysql 每秒insert ? select ? update ? delete?</li>
<li>27.mysql 数据类型有哪些 ? 分别占用多少存储空间 ?</li>
<li>28.nginx设置缓存js、css、图片等信息,缓存的实现原理是?</li>
<li>29.如何提高缓存命中率? 如何对缓存进行颗粒化?</li>
<li>30.php的内存回收机制是?</li>
<li><p>31.我的所有问题都问完了,你有什么问题问我没有？</p>
</li>
<li><p>32.请使用shell命令获取a文件的前10行与后10行的数据，将其放进b文件中。</p>
</li>
<li>33.如何设计安全的php程序，可以防止SQL攻击。</li>
<li>34.这里有一个sql语句，select id from table where a=? order by b，请你就句子判断，建立索引，使其能够在innodb和myisam引擎下，查询效果都可以加快。</li>
<li>35.有一天，突然有一个用户投诉，说网页打不开，你该如何进行排查？</li>
<li>36.何对一个亿级数据的表按照一个没有索引的字段进行统计</li>
</ul>
<hr>
<p>php实现扩展的机制</p>
<p>全站消息系统</p>
<p>消息队列</p>
<p>PHP的数组为什么不按照索引遍历</p>
<p><a href="http://blog.sina.com.cn/s/blog_60d07c3101010m2h.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_60d07c3101010m2h.html</a></p>
<p><a href="http://www.php-note.com/article/detail/546" target="_blank" rel="external">http://www.php-note.com/article/detail/546</a></p>
<p><a href="http://my.oschina.net/u/574366/blog/64814" target="_blank" rel="external">http://my.oschina.net/u/574366/blog/64814</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常见面试内容&quot;&gt;&lt;a href=&quot;#常见面试内容&quot; class=&quot;headerlink&quot; title=&quot;常见面试内容&quot;&gt;&lt;/a&gt;常见面试内容&lt;/h2&gt;&lt;h3 id=&quot;技术线（偏深度）：&quot;&gt;&lt;a href=&quot;#技术线（偏深度）：&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="php 面试材料" scheme="https://zacksleo.github.io/tags/php-%E9%9D%A2%E8%AF%95%E6%9D%90%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP结合使用PHP Console向Chrome 控制台输出SQL</title>
    <link href="https://zacksleo.github.io/2013/12/16/ThinkPHP%E7%BB%93%E5%90%88%E4%BD%BF%E7%94%A8PHPConsole%E5%90%91Chrome%20%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BASQL/"/>
    <id>https://zacksleo.github.io/2013/12/16/ThinkPHP结合使用PHPConsole向Chrome 控制台输出SQL/</id>
    <published>2013-12-16T07:16:39.000Z</published>
    <updated>2017-01-17T02:18:28.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>在Chrome中安装PHP Console 插件</li>
<li><p>下载PHP Console 服务器端程序包到ThinkPHP的Vendor目录下<br>例如 <code>/ThinkPHP/Extend/Vendor/PhpConsole</code></p>
</li>
<li><p>编写Behaviour行为类PhpConsoleBehavior.class</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?php</div><div class="line">/*</div><div class="line"> * 程序初始化时，在DEBUG模式下自动导入PHP Console类并进行实例化</div><div class="line"> * PHP console for chrome degug tools</div><div class="line"> * @author zacksleo</div><div class="line"> */</div><div class="line">class PhpConsoleBehavior extends Behavior&#123;</div><div class="line"></div><div class="line">  protected $options = array(</div><div class="line">      &apos;PHP_CONSOLE&apos; =&gt; false,</div><div class="line">  );</div><div class="line"></div><div class="line">  public function run(&amp;$params)&#123;</div><div class="line">    if(C(&apos;PHP_CONSOLE&apos;))&#123;</div><div class="line">      if(APP_DEBUG)&#123;</div><div class="line">        vendor(&apos;PhpConsole.__autoload&apos;);  //导入文件</div><div class="line">        PhpConsole\Helper::register();  //注册，自动实例化</div><div class="line">        $connector = PhpConsole\Connector::getInstance();</div><div class="line">        $connector-&gt;setPassword(&apos;password&apos;);</div><div class="line">        $handler = PhpConsole\Handler::getInstance();</div><div class="line">        // 输出PHP错误和异常            </div><div class="line">        $handler-&gt;start(); </div><div class="line">        // 配置 eval provider（在Chrome中远程执行PHP），如果不使用，则不配置</div><div class="line">        $evalProvider = $connector-&gt;getEvalDispatcher()-&gt;getEvalProvider();</div><div class="line">        $evalProvider-&gt;setOpenBaseDirs(array(__DIR__)); </div><div class="line">        // 必须最后调用</div><div class="line">        $connector-&gt;startEvalRequestsListener(); </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<ul>
<li>在/App/Conf/tags.php 中配置标签位:’app_init’ =&gt; array(‘PhpConsole’),</li>
<li>在config.php文件中定义标签’PHP_CONSOLE’ =&gt; true,</li>
<li>修改ThinkPHP的Log.class文件（位于/ThinkPHP/Lib/Core/Log.class.php）中的recode方法如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">static function record($message, $level = self::ERR, $record = false)&#123;</div><div class="line">  //zacksleo   </div><div class="line">  if($level == self::SQL)&#123;</div><div class="line">    PC::debug($message, &apos;SQL&apos;);</div><div class="line">  &#125;</div><div class="line">  //zacksleo</div><div class="line">  if($record || false !== strpos(C(&apos;LOG_LEVEL&apos;), $level))&#123;</div><div class="line">    self::$log[] = &quot;&#123;$level&#125;: &#123;$message&#125;\r\n&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在Chrome中安装PHP Console 插件&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载PHP Console 服务器端程序包到ThinkPHP的Vendor目录下&lt;br&gt;例如 &lt;code&gt;/ThinkPHP/Extend/Vendor/PhpConsole&lt;/code&gt;
    
    </summary>
    
    
      <category term="ThinkPHP, Chrome, Console, SQL" scheme="https://zacksleo.github.io/tags/ThinkPHP-Chrome-Console-SQL/"/>
    
  </entry>
  
</feed>
