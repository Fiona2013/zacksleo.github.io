<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zacks&#39;s blog</title>
  
  <subtitle>the blog of zacks</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zacksleo.github.io/"/>
  <updated>2018-03-24T03:10:24.126Z</updated>
  <id>https://zacksleo.github.io/</id>
  
  <author>
    <name>zacksleo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP7连接访问SqlServer及开发环境搭建</title>
    <link href="https://zacksleo.github.io/2018/03/24/PHP7%E8%BF%9E%E6%8E%A5%E8%AE%BF%E9%97%AESqlServer%E5%8F%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://zacksleo.github.io/2018/03/24/PHP7连接访问SqlServer及开发环境搭建/</id>
    <published>2018-03-24T03:06:00.000Z</published>
    <updated>2018-03-24T03:10:24.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP运行环境镜像构建"><a href="#PHP运行环境镜像构建" class="headerlink" title="PHP运行环境镜像构建"></a>PHP运行环境镜像构建</h2><p>PHP7中访问SqlServer需要安装sqlsrv 和 pdo_sqlsrv，在此之前需要安装一此必备依赖，如msodbcsql 和 unixodbc-dev，由于SqlServer暂时不支持alpine,所以选择jessie，尽量使镜像保持最小，构建脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM php:7.1-fpm-jessie</span><br><span class="line"></span><br><span class="line">ENV ACCEPT_EULA=Y</span><br><span class="line"></span><br><span class="line"># Microsoft SQL Server Prerequisites</span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \</span><br><span class="line">    &amp;&amp; curl https://packages.microsoft.com/config/debian/8/prod.list \</span><br><span class="line">        &gt; /etc/apt/sources.list.d/mssql-release.list \</span><br><span class="line">    &amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">        locales \</span><br><span class="line">        apt-transport-https \</span><br><span class="line">    &amp;&amp; echo &quot;en_US.UTF-8 UTF-8&quot; &gt; /etc/locale.gen \</span><br><span class="line">    &amp;&amp; locale-gen \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get -y --no-install-recommends install msodbcsql  unixodbc-dev</span><br><span class="line"></span><br><span class="line">RUN docker-php-ext-install mbstring \</span><br><span class="line">    &amp;&amp; pecl install sqlsrv pdo_sqlsrv \</span><br><span class="line">    &amp;&amp; docker-php-ext-enable sqlsrv pdo_sqlsrv</span><br></pre></td></tr></table></figure><h2 id="启动本地开发需要的SqlServer服务"><a href="#启动本地开发需要的SqlServer服务" class="headerlink" title="启动本地开发需要的SqlServer服务"></a>启动本地开发需要的SqlServer服务</h2><p>由于微软官方提供的SqlServer镜像，无法通过环境变量配置的方便创建数据库，故选择<a href="https://github.com/mcmoe/mssqldocker" target="_blank" rel="noopener">mcmoe/mssqldocker</a>镜像，</p><p>使用docker-compose配置方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.2&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    build: .</span><br><span class="line">    image: mcmoe/mssqldocker</span><br><span class="line">    environment:</span><br><span class="line">      ACCEPT_EULA: Y</span><br><span class="line">      SA_PASSWORD: 2astazeY</span><br><span class="line">      MSSQL_DB: dev</span><br><span class="line">      MSSQL_USER: Kobeissi</span><br><span class="line">      MSSQL_PASSWORD: 7ellowEl7akey</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;1433:1433&quot;</span><br><span class="line">    container_name: mssqldev</span><br></pre></td></tr></table></figure><p>需要注意的是，MSSQL密码(即上面的SA_PASSWORD和MSSQL_PASSWORD)必须至少8个字符长，包含大写，小写和数字，否则数据库会创建失败</p><h2 id="连接访问数据库"><a href="#连接访问数据库" class="headerlink" title="连接访问数据库"></a>连接访问数据库</h2><p>在程序中配置数据库的地方，配置DSN如下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlsrv:Server=mssql;Database=dev</span><br></pre></td></tr></table></figure><p>sqlsrv 为驱动名称</p><p>注：如果是使用Yii2框架，可以使用我构建好的镜像：<a href="https://hub.docker.com/r/zacksleo/php/tags/" target="_blank" rel="noopener">zacksleo/php:7.1-fpm-mssql</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP运行环境镜像构建&quot;&gt;&lt;a href=&quot;#PHP运行环境镜像构建&quot; class=&quot;headerlink&quot; title=&quot;PHP运行环境镜像构建&quot;&gt;&lt;/a&gt;PHP运行环境镜像构建&lt;/h2&gt;&lt;p&gt;PHP7中访问SqlServer需要安装sqlsrv 和 pdo_s
      
    
    </summary>
    
    
      <category term="docker" scheme="https://zacksleo.github.io/tags/docker/"/>
    
      <category term="PHP" scheme="https://zacksleo.github.io/tags/PHP/"/>
    
      <category term="PHP7" scheme="https://zacksleo.github.io/tags/PHP7/"/>
    
      <category term="SqlServer" scheme="https://zacksleo.github.io/tags/SqlServer/"/>
    
      <category term="Yii" scheme="https://zacksleo.github.io/tags/Yii/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI对JavaScript项目持续集成或部署</title>
    <link href="https://zacksleo.github.io/2018/03/13/GitLab-CI%E5%AF%B9JavaScript%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%88%96%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2018/03/13/GitLab-CI对JavaScript项目持续集成或部署/</id>
    <published>2018-03-13T03:34:00.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>团队使用React开发了一套前端页面, 为了方便协作和部署, 使用 EsLint 进行代码格式审查, 同时进行持续集成和部署, 提高开发效率</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">image: zacksleo/node</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">    - eval $(ssh-agent -s)</span><br><span class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</span><br><span class="line">    - chmod 0600 ~/deploy.key</span><br><span class="line">    - ssh-add ~/deploy.key</span><br><span class="line">    - mkdir -p ~/.ssh</span><br><span class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line">    - export APP_ENV=testing</span><br><span class="line">    - yarn config set registry &apos;https://registry.npm.taobao.org&apos;</span><br><span class="line">stages:</span><br><span class="line">    - prepare</span><br><span class="line">    - test</span><br><span class="line">    - build</span><br><span class="line">    - deploy</span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">    COMPOSER_CACHE_DIR: &quot;/cache/composer&quot;</span><br><span class="line">    DOCKER_DRIVER: overlay2</span><br><span class="line">build-cache:</span><br><span class="line">    stage: prepare</span><br><span class="line">    script:</span><br><span class="line">        - yarn install --cache-folder /cache/yarn</span><br><span class="line">    cache:</span><br><span class="line">      key: &quot;$CI_COMMIT_REF_NAME&quot;</span><br><span class="line">      paths:</span><br><span class="line">        - node_modules</span><br><span class="line">    except:</span><br><span class="line">        - docs</span><br><span class="line">        - tags</span><br><span class="line">    when: manual</span><br><span class="line">eslint:</span><br><span class="line">    stage: test</span><br><span class="line">    dependencies: []</span><br><span class="line">    cache:</span><br><span class="line">      key: &quot;$CI_COMMIT_REF_NAME&quot;</span><br><span class="line">      policy: pull</span><br><span class="line">      paths:</span><br><span class="line">        - node_modules</span><br><span class="line">    script:</span><br><span class="line">        - if [ ! -d &quot;node_modules&quot; ]; then</span><br><span class="line">        - yarn install --cache-folder /cache/yarn</span><br><span class="line">        - fi</span><br><span class="line">        - yarn eslint ./</span><br><span class="line">    except:</span><br><span class="line">        - docs</span><br><span class="line">        - develop</span><br><span class="line">        - master</span><br><span class="line">        - tags</span><br><span class="line">build-check:</span><br><span class="line">    stage: test</span><br><span class="line">    dependencies: []</span><br><span class="line">    cache:</span><br><span class="line">      key: &quot;$CI_COMMIT_REF_NAME&quot;</span><br><span class="line">      policy: pull</span><br><span class="line">      paths:</span><br><span class="line">        - node_modules</span><br><span class="line">    script:</span><br><span class="line">        - if [ ! -d &quot;node_modules&quot; ]; then</span><br><span class="line">        - yarn install --cache-folder /cache/yarn</span><br><span class="line">        - fi</span><br><span class="line">        - yarn build</span><br><span class="line">    except:</span><br><span class="line">        - docs</span><br><span class="line">        - develop</span><br><span class="line">        - master</span><br><span class="line">        - tags</span><br><span class="line">build-package:</span><br><span class="line">    stage: test</span><br><span class="line">    script:</span><br><span class="line">        - if [ ! -d &quot;node_modules&quot; ]; then</span><br><span class="line">        - yarn install --cache-folder /cache/yarn</span><br><span class="line">        - fi</span><br><span class="line">        - if [ $CI_COMMIT_TAG ];then</span><br><span class="line">        - cp deploy/production/.env .env</span><br><span class="line">        - fi</span><br><span class="line">        - yarn build</span><br><span class="line">    dependencies: []</span><br><span class="line">    cache:</span><br><span class="line">      key: &quot;$CI_COMMIT_REF_NAME&quot;</span><br><span class="line">      policy: pull</span><br><span class="line">      paths:</span><br><span class="line">        - node_modules</span><br><span class="line">    artifacts:</span><br><span class="line">        name: &quot;build&quot;</span><br><span class="line">        untracked: false</span><br><span class="line">        expire_in: 60 mins</span><br><span class="line">        paths:</span><br><span class="line">            - build</span><br><span class="line">    except:</span><br><span class="line">        - docs</span><br><span class="line">    only:</span><br><span class="line">        - develop</span><br><span class="line">        - master</span><br><span class="line">        - tags</span><br><span class="line">production-image:</span><br><span class="line">    stage: build</span><br><span class="line">    image: docker:latest</span><br><span class="line">    dependencies:</span><br><span class="line">        - build-package</span><br><span class="line">    before_script: []</span><br><span class="line">    script:</span><br><span class="line">        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY</span><br><span class="line">        - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .</span><br><span class="line">        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG</span><br><span class="line">        - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG</span><br><span class="line">    only:</span><br><span class="line">        - tags</span><br><span class="line">production-server:</span><br><span class="line">    stage: deploy</span><br><span class="line">    dependencies: []</span><br><span class="line">    cache: &#123;&#125;</span><br><span class="line">    script:</span><br><span class="line">        - cd deploy/production</span><br><span class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;export COMPOSE_HTTP_TIMEOUT=120 &amp;&amp; export DOCKER_CLIENT_TIMEOUT=120 &amp;&amp; echo -e &apos;\nTAG=$CI_COMMIT_TAG&apos; &gt;&gt; .env &amp;&amp; cd /data/$CI_PROJECT_NAME &amp;&amp; docker-compose pull web &amp;&amp; docker-compose stop &amp;&amp; docker-compose rm -f &amp;&amp; docker-compose up -d --build&quot;</span><br><span class="line">    only:</span><br><span class="line">        - tags</span><br><span class="line">    environment:</span><br><span class="line">        name: staging</span><br><span class="line">        url: https://xxx.com</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>首先使用EsLint进行代码格式检查, 每次合并到主干分支, 进行构建检查, 每次添加Tags, 构建Docker镜像,并进行部署</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;团队使用React开发了一套前端页面, 为了方便协作和部署, 使用 EsLint 进行代码格式审查, 同时进行持续集成和部署, 提高开发效率
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
      <category term="CD" scheme="https://zacksleo.github.io/tags/CD/"/>
    
      <category term="CI" scheme="https://zacksleo.github.io/tags/CI/"/>
    
      <category term="SSH" scheme="https://zacksleo.github.io/tags/SSH/"/>
    
      <category term="Yarn" scheme="https://zacksleo.github.io/tags/Yarn/"/>
    
      <category term="npm" scheme="https://zacksleo.github.io/tags/npm/"/>
    
      <category term="React" scheme="https://zacksleo.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>GitHub使用Style-CI进行格式检查</title>
    <link href="https://zacksleo.github.io/2018/01/30/GitHub%E4%BD%BF%E7%94%A8Style-CI%E8%BF%9B%E8%A1%8C%E6%A0%BC%E5%BC%8F%E6%A3%80%E6%9F%A5/"/>
    <id>https://zacksleo.github.io/2018/01/30/GitHub使用Style-CI进行格式检查/</id>
    <published>2018-01-30T02:55:06.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<!-- GitHub使用Style-CI进行格式检查 --><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在项目根目录，新建<code>.styleci.yml</code> 配置文件，并编写配置内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preset: psr2</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>打开<a href="https://styleci.io/，使用Gitlab账号登录，找到对应的项目，点击右侧的" target="_blank" rel="noopener">https://styleci.io/，使用Gitlab账号登录，找到对应的项目，点击右侧的</a> <code>ENABLE STYLECI</code> 启用按钮，即可使用，</p><p>每次提交代码，都会看到检测结果</p><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>如果没有找到自己的项目，打开 <code>https://styleci.io/account#repos</code> 点击 <code>Sync With GitHub</code> 同步，就会看到</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- GitHub使用Style-CI进行格式检查 --&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;在项目根目录，新建&lt;code&gt;.styleci.yml&lt;/code&gt; 配置文
      
    
    </summary>
    
    
      <category term="GitHub" scheme="https://zacksleo.github.io/tags/GitHub/"/>
    
      <category term="Style-CI" scheme="https://zacksleo.github.io/tags/Style-CI/"/>
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI将项目Wiki自动部署到文档中心</title>
    <link href="https://zacksleo.github.io/2018/01/27/GitLab-CI%E5%B0%86%E9%A1%B9%E7%9B%AEWiki%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E6%96%87%E6%A1%A3%E4%B8%AD%E5%BF%83/"/>
    <id>https://zacksleo.github.io/2018/01/27/GitLab-CI将项目Wiki自动部署到文档中心/</id>
    <published>2018-01-27T03:48:09.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>公司的GitLab中，有一个存放所有技术文档的Wiki仓库，按照目录分门别类，包括API文档，编码规范，技术专题文档等，通过与<a href="使用Git和Gollum搭建Wiki系统.md">Gollum进行持续部署</a>.</p><p>然而在GitLab中，每个项目都有自己的Wiki库, 所以在将项目文档合并更新到总Wiki仓库时，同步更新比较麻烦，通过充分使用GitLab的持续集成功能, 将项目Wiki与Wiki仓库集成, 从而实现了Wiki的自动部署，</p><p>同步时，自动同步的提交信息和提交人信息</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><ul><li><p>GitLab中在使用SSH的时候, 会生成公钥和私钥对</p></li><li><p>将公钥添加到gitlab上, 以便于该用于可以拉取代码</p></li><li><p>在 <code>CI/CD Piplines</code>中设置 <code>Secret Variables</code>, 这里名为 <code>SSH_PRIVATE_KEY</code></p><p><code>SSH_PRIVATE_KEY</code> 值为私钥.</p></li></ul><h3 id="编写-gitlab-ci-yml-文件-注入私钥-通过ssh执行远程命令"><a href="#编写-gitlab-ci-yml-文件-注入私钥-通过ssh执行远程命令" class="headerlink" title="编写 .gitlab-ci.yml 文件, 注入私钥, 通过ssh执行远程命令"></a>编写 <code>.gitlab-ci.yml</code> 文件, 注入私钥, 通过<code>ssh</code>执行远程命令</h3><p> 创建一个分支, 如<code>docs</code>, 在该分支中添加 <code>gitlab-ci.yml</code>文件, 实现wiki自动提交, 内容形如以下内容:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">image: zacksleo/docker-composer:develop</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">    - eval $(ssh-agent -s)</span><br><span class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; deploy.key</span><br><span class="line">    - chmod 0600 deploy.key</span><br><span class="line">    - ssh-add deploy.key</span><br><span class="line">    - rm -f deploy.key</span><br><span class="line">    - mkdir -p ~/.ssh</span><br><span class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line"></span><br><span class="line">build-docs:</span><br><span class="line">    stage: deploy</span><br><span class="line">   variables:</span><br><span class="line">       GIT_STRATEGY: none</span><br><span class="line">   dependencies: []</span><br><span class="line">    script:</span><br><span class="line">       # 定义变量: 项目Wiki的Git地址,项目(目录)别名</span><br><span class="line">       - export WIKI_REPO=git@domain.com:project.wiki.git &amp;&amp; export PROJECT_NAME=$CI_PROJECT_NAME</span><br><span class="line">       # 创建临时目录, 用于存放和合并git文档</span><br><span class="line">       - mkdir ~/tmp &amp;&amp; cd ~/tmp</span><br><span class="line">       # 克隆项目wiki</span><br><span class="line">       - git --git-dir=~/tmp/$PROJECT_NAME.wiki.git clone --depth=1 $WIKI_REPO $PROJECT_NAME</span><br><span class="line">       # 删除.git 只保留纯文档, 获取最近的提交日志,用户邮箱和名称  </span><br><span class="line">       - cd $PROJECT_NAME &amp;&amp; export GIT_LOG=`git log -1 --pretty=%B` &amp;&amp; export GIT_EMAIL=`git log -1 --pretty=%ae` &amp;&amp; export GIT_USERNAME=`git log -1 --pretty=%an` &amp;&amp; rm -rf .git &amp;&amp; cd ..</span><br><span class="line">       # 注册Git账号</span><br><span class="line">       - git config --global user.email $GIT_EMAIL &amp;&amp; git config --global user.name $GIT_USERNAME       </span><br><span class="line">       # 克隆联络Wiki</span><br><span class="line">       - git clone git@domain.com:orgs/wiki.git</span><br><span class="line">       # 删除旧wiki, 增加新wiki</span><br><span class="line">       - rm -rf wiki/api/$PROJECT_NAME &amp;&amp; mv -f $PROJECT_NAME wiki/api</span><br><span class="line">       # 增加提交日志并提交</span><br><span class="line">       - cd wiki &amp;&amp; git add . &amp;&amp; git commit -m &quot;$PROJECT_NAME:$GIT_LOG&quot; &amp;&amp; git push origin master</span><br><span class="line">       # 删除临时目录</span><br><span class="line">       - rm -rf ~/tmp</span><br><span class="line">    only:</span><br><span class="line">        - docs</span><br></pre></td></tr></table></figure><p> 其中, 将<code>WIKI_REPO</code>后面的<code>git@domain.com:project.wiki.git</code>替换为项目wiki的git地址,<br> <code>$CI_PROJECT_NAME</code>替换为项目英文别名(如不改则使用当前GitLab的项目名), 用于在文档中心的api下面创建相关目录。<br> 其他地方不需要修改。</p><blockquote><p>注意: 项目wiki的git地址与项目的git地址不相同, 请在Wiki右侧中的Clone repository 找到       </p></blockquote><h3 id="创建-Triggers-Token"><a href="#创建-Triggers-Token" class="headerlink" title="创建 Triggers Token"></a>创建 Triggers Token</h3><p>打开项目的 CI/CD Pipelines 选项,  找到 <code>Triggers</code>, 点击添加一个Token, 并从下方的 <code>Use webhook</code> 段落找到触发URL, 如</p><p> <code>https://domain.com/api/v4/projects/74/ref/REF_NAME/trigger/pipeline?token=TOKEN</code></p><p> 将TOKEN替换为上述<code>Triggers</code>中获取的Token, 将 <code>REF_NAME</code> 替换分分支名称 <code>docs</code>, 得到最终URL</p><h3 id="配置-Webhooks"><a href="#配置-Webhooks" class="headerlink" title="配置 Webhooks"></a>配置 Webhooks</h3><p>打开项目的 integrations 选项, 在URL中, 填写上一步中拿到的URL</p><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li>[[GitLab-CI使用Docker进行持续部署]]</li><li>[[使用Git和Gollum搭建Wiki系统]]</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;公司的GitLab中，有一个存放所有技术文档的Wiki仓库，按照目录分门别类，包括API文档，编码规范，技术专题文档等，通过与&lt;a href
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
      <category term="Wiki" scheme="https://zacksleo.github.io/tags/Wiki/"/>
    
      <category term="Gollum" scheme="https://zacksleo.github.io/tags/Gollum/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI使用cache加速构建过程</title>
    <link href="https://zacksleo.github.io/2018/01/26/GitLab-CI%E4%BD%BF%E7%94%A8cache%E5%8A%A0%E9%80%9F%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>https://zacksleo.github.io/2018/01/26/GitLab-CI使用cache加速构建过程/</id>
    <published>2018-01-26T08:13:06.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<!-- --- title: GitLab-CI使用cache加速构建过程 --><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在GitLab-CI中，使用<code>artifacts</code>可以确保所需要传递的文件可靠性，但由于生成的<code>artifacts</code>存在的GitLab上，每次需要远程下载，因此速度相对较慢。<br>所以，在一些对依赖的准确性要求不高的地方，可以考虑使用<code>cache</code>。</p><h2 id="cache-简介"><a href="#cache-简介" class="headerlink" title="cache 简介"></a>cache 简介</h2><p>cache 顾名思义为缓存，不同的任务之前，缓存可以进行共享。根据配置中的声明，在需要缓存时，GitLab-CI会自动下载缓存，以供当前任务使用。</p><p>cache一旦命中，意味着这部分文件不需要重新生成（编译，下载或构建），这样一来，便省去了不少功夫，从而加速了构建过程。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="生成cache"><a href="#生成cache" class="headerlink" title="生成cache"></a>生成cache</h3>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="attr">build-package:</span></span><br><span class="line"><span class="attr">    stage:</span> <span class="string">prepare</span></span><br><span class="line"><span class="attr">    script:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">composer</span> <span class="string">install</span> <span class="bullet">--prefer-dist</span> <span class="bullet">--optimize-autoloader</span> <span class="bullet">-n</span> <span class="bullet">--no-interaction</span> <span class="bullet">-v</span> <span class="bullet">--no-suggest</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">composer</span> <span class="string">dump-autoload</span> <span class="bullet">--optimize</span></span><br><span class="line"><span class="attr">    cache:</span></span><br><span class="line"><span class="attr">      key:</span> <span class="string">"$CI_COMMIT_REF_NAME"</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">vendor</span></span><br></pre></td></tr></table></figure><p> 如上，在build-package任务中，声明了cache，其目录为vendor, 当script执行完之后，vendor目录会生成，该任务最后，cache会自动生成（push）</p><h3 id="使用cache"><a href="#使用cache" class="headerlink" title="使用cache"></a>使用cache</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">phpcs:</span></span><br><span class="line"><span class="attr">    stage:</span> <span class="string">testing</span>    </span><br><span class="line"><span class="attr">    cache:</span></span><br><span class="line"><span class="attr">      key:</span> <span class="string">"$CI_COMMIT_REF_NAME"</span></span><br><span class="line"><span class="attr">      policy:</span> <span class="string">pull</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">vendor</span>    </span><br><span class="line"><span class="attr">    script:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">if</span> <span class="string">[</span> <span class="string">!</span> <span class="bullet">-d</span> <span class="string">"vendor"</span> <span class="string">];</span> <span class="string">then</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">composer</span> <span class="string">install</span> <span class="bullet">--prefer-dist</span> <span class="bullet">--optimize-autoloader</span> <span class="bullet">-n</span> <span class="bullet">--no-interaction</span> <span class="bullet">-v</span> <span class="bullet">--no-suggest</span> <span class="string">&amp;&amp;</span> <span class="string">composer</span> <span class="string">dump-autoload</span> <span class="bullet">--optimize</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">fi</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">php</span> <span class="string">vendor/bin/phpcs</span> <span class="bullet">--config-set</span> <span class="string">ignore_warnings_on_exit</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">php</span> <span class="string">vendor/bin/phpcs</span> <span class="bullet">--standard=PSR2</span> <span class="bullet">-w</span> <span class="bullet">--colors</span> <span class="string">./</span></span><br><span class="line"><span class="attr">    except:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">docs</span></span><br></pre></td></tr></table></figure><p>如上，该过程定义了所要使用的cache, 由于cache并不保证每次都命中（即拿到的cache可能为空），周时在script处进行判断，如果cache为空时，重新生成所需文件</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>以doctor-online为例子，在未使用cache之前 ，使用的是artifacts， 每次构建时间在7分钟左右，</p><p><img src="https://ws1.sinaimg.cn/large/675eb504gy1fkfvidgbx5j21940f0aes.jpg" alt=""></p><p>使用cache后，构建时间缩短到了1分钟</p><p><img src="https://ws1.sinaimg.cn/large/675eb504gy1fkfvk9qofkj21900fkq7z.jpg" alt=""></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.gitlab.com/ee/ci/yaml/" target="_blank" rel="noopener">Configuration</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- --- title: GitLab-CI使用cache加速构建过程 --&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在GitLab-CI中，使用&lt;code&gt;artifac
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
      <category term="CD" scheme="https://zacksleo.github.io/tags/CD/"/>
    
      <category term="GitLab" scheme="https://zacksleo.github.io/tags/GitLab/"/>
    
      <category term="CI" scheme="https://zacksleo.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>高并发优化初试</title>
    <link href="https://zacksleo.github.io/2017/11/21/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%BC%98%E5%8C%96%E5%88%9D%E8%AF%95/"/>
    <id>https://zacksleo.github.io/2017/11/21/高并发优化初试/</id>
    <published>2017-11-21T12:53:06.000Z</published>
    <updated>2018-03-24T03:10:24.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>最近接触了一个抽奖的项目，由于用户量比较大，而且第三方提供的认证接口并发量有限，为了保证服务的高可用性，所以对高并限制发有一定的要求。经过一系列研究和讨论，做出了以下一些优化方案。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li><p>根据用户量和日活情况，估算出并发值在100左右，所以该项目的并发量就当在100上以，初期目标定为600-800</p></li><li><p>特定页面的并发量不超过300，为了保证不对第三方服务造成访问压力，特将并发控制在150以内</p></li><li><p>由于奖品数量有限，故得奖时，需要进行并发写入控制，防止奖品超发</p></li></ul><h2 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h2><h3 id="前端方面"><a href="#前端方面" class="headerlink" title="前端方面"></a>前端方面</h3><h4 id="减少客户端访问次数。"><a href="#减少客户端访问次数。" class="headerlink" title="减少客户端访问次数。"></a>减少客户端访问次数。</h4><ul><li><p>使用CDN对网站的静态资源进行优化，可以答复静态请求次数。</p></li><li><p>抽奖结果一次性生成。</p></li></ul><p>每个用户有有一次抽奖机会，但只能有一次中奖，其他两次随机弹出推荐产品。所以有一次抽奖中，只需要访问一次服务器的抽奖接口。</p><ul><li>使用本地缓存。</li></ul><p>将抽奖次数，是否中奖等信息记录在本地，避免超次抽奖和多余的服务器请求。例如，一旦该用户中过将，就不需要再访问服务器抽奖接口。</p><h3 id="服务端优化"><a href="#服务端优化" class="headerlink" title="服务端优化"></a>服务端优化</h3><h4 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h4><ul><li>使用服务端缓存。</li></ul><p>将页面和相关数据查询进行缓存，减少数据库访问次数。</p><h4 id="部分业务逻辑异步处理"><a href="#部分业务逻辑异步处理" class="headerlink" title="部分业务逻辑异步处理"></a>部分业务逻辑异步处理</h4><p>对于不需要实时处理的业务逻辑，压入队列，实现异步处理。例如优惠券的发放。</p><h4 id="Nginx-优化"><a href="#Nginx-优化" class="headerlink" title="Nginx 优化"></a>Nginx 优化</h4><ul><li>提高 Nginx 处理性能</li></ul><p>使用 <code>worker_processes</code>，<code>worker_cpu_affinity</code>，<code>worker_rlimit_nofile</code>， <code>worker_connections</code>，<code>open_file_cache</code>等命令，提高nginx的处理性能。</p><ul><li>Nginx 并发控制。</li></ul><p>先看实例，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">limit_req_zone $binary_remote_addr zone=req_ip:10m rate=40r/s; // #每个IP平均处理的请求频率为每秒40次</span><br><span class="line">limit_conn_zone $binary_remote_addr zone=conn_ip:10m;</span><br><span class="line">limit_conn_zone $server_name zone=conn_server:10m;</span><br><span class="line">limit_conn conn_ip 5; // #限制某个IP来源的连接并发数，此处为5个</span><br><span class="line">limit_conn conn_server 600; //#限制某个虚拟服务器的总连接数，此处为600个</span><br><span class="line">limit_req zone=req_ip burst=5; //小为5的缓冲区, 当有大量请求过来时，超过了访问频次限制的请求可以先放到这个缓冲区内</span><br></pre></td></tr></table></figure><p>在这里，限制了每个IP的请求频率，限制了同一IP的并发连接数，限制了服务器的总连接数</p><ul><li>使用 Docker 实现负载均衡</li></ul><p>配置 nginx, 使用负载均衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream icontact_pool &#123;</span><br><span class="line">    server  web:9000    weight=5    max_fails=3 fail_timeout=10s;</span><br><span class="line">    server  web2:9000   weight=5    max_fails=3 fail_timeout=10s;</span><br><span class="line">    server  web3:9000   weight=5    max_fails=3 fail_timeout=10s;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，通过 Docker 启动多个处理请求的服务容器，在 nginx 中配置每个服务的地址，权重等信息，扩大请求的处理能力</p><ul><li>其他服务器环境优化</li></ul><p>例如，增加服务器配置（CPU，内存，带宽），如果是PHP, 开启 opcache, 并使用较新版本（php7+）, 各种依赖尽量使用最新版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zend_extension=opcache.so</span><br><span class="line">opcache.enable=1</span><br><span class="line">opcache.enable_cli=1</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.jiagoumi.com/work/718.html" target="_blank" rel="noopener">Nginx限制IP并发连接数和请求数的研究</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;p&gt;最近接触了一个抽奖的项目，由于用户量比较大，而且第三方提供的认证接口并发量有限，为了保证服务的高可用性，所以对高并限制发有一定的要求。经过一
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://zacksleo.github.io/tags/Docker/"/>
    
      <category term="高并发" scheme="https://zacksleo.github.io/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="Nginx" scheme="https://zacksleo.github.io/tags/Nginx/"/>
    
      <category term="CDN" scheme="https://zacksleo.github.io/tags/CDN/"/>
    
      <category term="缓存" scheme="https://zacksleo.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="Redis" scheme="https://zacksleo.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis-CI 将github上的博客内容与静态网站分离并持续部署</title>
    <link href="https://zacksleo.github.io/2017/11/18/%E4%BD%BF%E7%94%A8Travis-CI%20%E5%B0%86github%E4%B8%8A%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9%E4%B8%8E%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E5%88%86%E7%A6%BB%E5%B9%B6%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/11/18/使用Travis-CI 将github上的博客内容与静态网站分离并持续部署/</id>
    <published>2017-11-18T15:14:25.000Z</published>
    <updated>2018-03-24T03:10:24.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>按照以往的做法，你会使用hexo来生成博客的静态文件，并通过git提交到github上，以此来写作和发布文章。</p><p>然而，经过一段时间，你会发现，这种写作方式存在几个问题：</p><ul><li>文章源和相关编译、部署程序都存储在本地，如果在其他设备上写作，没有同步措施。这样书写多有不便。</li><li>文章源没有备份，也没有充分使用Git来管理。</li><li>每次书写完文章，需要手动编译和部署。</li></ul><p>鉴于以上几个问题，结合Travis-CI的使用经验，我决定对往常的写作方式进行改进：</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><p>除了原来博客中的master分支, 再新建两个分支：docs分支用于存放文章源：hexo分支用于存放一些配置文件，我们将在该分支上进行持续部署。</p><h3 id="docs-分支"><a href="#docs-分支" class="headerlink" title="docs 分支"></a>docs 分支</h3><p>该分支下存放文章源，各篇均以markdow格式书写。除此之外，有 <code>.travis.yml</code> 配置文件和一个触发部署的脚本 <code>deploy.sh</code>。</p><p>每当有文章提交上来，就会自动触发一次构建，其内容是通过调用Travis-CI的API，自动执行一次 hexo 分支上的自动构建。</p><h3 id="hexo-分支"><a href="#hexo-分支" class="headerlink" title="hexo 分支"></a>hexo 分支</h3><p>该分支存放一些hexo的配置文件，当构建被触发时，会自动拉取docs中的文章内容，安装一个material皮肤，并进行hexo的自动网站编译。<br>最后编译完的静态Html，强制推送到master分支，从而博客自动更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;按照以往的做法，你会使用hexo来生成博客的静态文件，并通过git提交到github上，以此来写作和发布文章。&lt;/p&gt;
&lt;p&gt;然而，经过一段
      
    
    </summary>
    
    
      <category term="Travis-CI, GitHub, 持续部署" scheme="https://zacksleo.github.io/tags/Travis-CI-GitHub-%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI使用CodeClimate评估代码质量</title>
    <link href="https://zacksleo.github.io/2017/10/25/GitLab-CI%E4%BD%BF%E7%94%A8CodeClimate%E8%AF%84%E4%BC%B0%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    <id>https://zacksleo.github.io/2017/10/25/GitLab-CI使用CodeClimate评估代码质量/</id>
    <published>2017-10-25T01:33:41.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Code Climate 是一个代码测试工具, 它可以帮助你进行代码冗余检测、质量评估，同时支持多种语言，如PHP, Ruby, JavaScript, CSS, Golang, Python 等。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="配置GitLab-Runner"><a href="#配置GitLab-Runner" class="headerlink" title="配置GitLab Runner"></a>配置GitLab Runner</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[[runners]]</span><br><span class="line">  ....</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.docker]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;docker:latest&quot;</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_cache = false</span><br><span class="line">    cache_dir = &quot;cache&quot;</span><br><span class="line">    volumes = [&quot;/cache&quot;, &quot;/var/run/docker.sock:/var/run/docker.sock&quot;, &quot;/tmp/builds:/builds&quot;]</span><br><span class="line">    shm_size = 0</span><br></pre></td></tr></table></figure><p>注意, 需要增加一个 <code>/tmp/builds:/builds</code> , 这里用于映射放代码。否则根据官方文档中的描述，无法正常实现</p><p>为了能使用宿主机的docker 缓存, 加快构建速度, 这里使用 sock 绑定的方式使用docker, 不使用 docker in docker </p><h3 id="配置-gitlab-ci-yml-文件"><a href="#配置-gitlab-ci-yml-文件" class="headerlink" title="配置 .gitlab-ci.yml 文件"></a>配置 .gitlab-ci.yml 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeclimate:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">docker:latest</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">pull</span> <span class="string">codeclimate/codeclimate</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">VOLUME_PATH=/tmp/builds"$(echo</span> <span class="string">$PWD</span> <span class="string">| sed 's|^/[^/]*||')"</span></span><br><span class="line"><span class="string">    - docker run -v /tmp/cc:/tmp/cc -v $VOLUME_PATH:/code -v /var/run/docker.sock:/var/run/docker.sock codeclimate/codeclimate validate-config</span></span><br><span class="line"><span class="string">    - docker run --env CODECLIMATE_CODE="$VOLUME_PATH" -v /tmp/cc:/tmp/cc -v $VOLUME_PATH:/code -v /var/run/docker.sock:/var/run/docker.sock codeclimate/codeclimate analyze -f text</span></span><br></pre></td></tr></table></figure><h3 id="配置-codeclimate-yml"><a href="#配置-codeclimate-yml" class="headerlink" title="配置 .codeclimate.yml"></a>配置 .codeclimate.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">engines:</span></span><br><span class="line"><span class="attr">  duplication:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      languages:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">javascript</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">php</span></span><br><span class="line"><span class="attr">  csslint:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  eslint:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  fixme:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  phpmd:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ratings:</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"**.js"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"**.css"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"**.php"</span></span><br><span class="line"><span class="attr">exclude_paths:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tests/</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">vendor/</span></span><br></pre></td></tr></table></figure><p>相关配置请参考<a href="https://docs.codeclimate.com/docs" target="_blank" rel="noopener">官方文档</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.codeclimate.com/docs/list-of-engines" target="_blank" rel="noopener">CodeClimate支持的语言和引擎</a></li><li><a href="https://docs.codeclimate.com/docs/list-of-engines" target="_blank" rel="noopener">GitLab-CI配置CodeClimate</a></li><li><a href="https://blog.buzzell.io/codeclimate-in-gitlab-ci/" target="_blank" rel="noopener">CodeClimate in Gitlab CI</a></li><li><a href="https://docs.codeclimate.com/docs" target="_blank" rel="noopener">CodeClimate官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Code Climate 是一个代码测试工具, 它可以帮助你进行代码冗余检测、质量评估，同时支持多种语言，如PHP, Ruby, JavaS
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
      <category term="CodeClimate" scheme="https://zacksleo.github.io/tags/CodeClimate/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI使用Rsync进行持续部署</title>
    <link href="https://zacksleo.github.io/2017/09/08/GitLab-CI%E4%BD%BF%E7%94%A8Rsync%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/09/08/GitLab-CI使用Rsync进行持续部署/</id>
    <published>2017-09-08T04:52:37.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>rsync命令是一个远程数据同步工具</p><h2 id="主要参数"><a href="#主要参数" class="headerlink" title="主要参数"></a>主要参数</h2><ul><li><p>-r 递归目录</p></li><li><p>-t 保留修改时间</p></li><li><p>-v 详细日志</p></li><li><p>-h 输出数字以人类可读的格式</p></li><li><p>-z 在传输过程中压缩文件数据</p></li><li><p>-e 指定要使用的远程shell, 注意该过程需要注入SSH</p></li></ul><h2 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</span><br><span class="line">    - apk add rsync</span><br><span class="line">    - eval $(ssh-agent -s)</span><br><span class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</span><br><span class="line">    - chmod 0600 ~/deploy.key</span><br><span class="line">    - ssh-add ~/deploy.key</span><br><span class="line">    - mkdir -p ~/.ssh</span><br><span class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line">    - export APP_ENV=testing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testing-server:</span><br><span class="line">    stage: deploy</span><br><span class="line">    image: alpine</span><br><span class="line">    variables:</span><br><span class="line">        DEPLOY_SERVER: &quot;server-host&quot;</span><br><span class="line">    script:</span><br><span class="line">        - cd deploy</span><br><span class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>远程服务器需要安装rsync, 否则会出现 <code>bash: rsync: command not found</code> 错误</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://download.samba.org/pub/rsync/rsync.html" target="_blank" rel="noopener">官方文档</a></li><li>[[GitLabCI通过ssh进行自动部署]]</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;rsync命令是一个远程数据同步工具&lt;/p&gt;
&lt;h2 id=&quot;主要参数&quot;&gt;&lt;a href=&quot;#主要参数&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
      <category term="CD" scheme="https://zacksleo.github.io/tags/CD/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI使用LFTP进行持续部署</title>
    <link href="https://zacksleo.github.io/2017/09/08/GitLab-CI%E4%BD%BF%E7%94%A8LFTP%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/09/08/GitLab-CI使用LFTP进行持续部署/</id>
    <published>2017-09-08T04:52:22.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>LFTP是一款FTP客户端软件, 支持 FTP 、 FTPS 、 HTTP 、 HTTPS 、 SFTP 、 FXP 等多种文件传输协议。</p><p>本文介绍如何使用 LFTP 将文件同步到远程FTP服务器上, 从而实现自动部署</p><h2 id="mirror-命令及主要参数"><a href="#mirror-命令及主要参数" class="headerlink" title="mirror 命令及主要参数"></a>mirror 命令及主要参数</h2><ul><li><p>-R  反向传输, 因为是上传(put)到远程服务器, 所以使用该参数 (默认是从远程服务器下载)</p></li><li><p>-L  下载符号链接作为文件, 主要处理文件软链接的问题</p></li><li><p>-v  详细输出日志</p></li><li><p>-n  只传输新文件 (相同的旧文件不会传输, 大大提升了传输效率)</p></li><li><p>–transfer-all  传输所有文件, 不论新旧</p></li><li><p>–parallel  同时传输的文件数</p></li><li><p>–file  本地文件</p></li><li><p>–target-directory 目标目录</p></li></ul><h2 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    stage: deploy</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:</span><br><span class="line">        - apk add lftp</span><br><span class="line">        # 只上传新文件</span><br><span class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST; cd /wwwroot; mirror -RLnv ./ /wwwroot --ignore-time --parallel=50 --exclude-glob .git* --exclude .git/&quot;</span><br><span class="line">        # 指定目录覆盖上传 (强制更新)</span><br><span class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;mirror -RLv ./vendor/composer /wwwroot/vendor/composer --ignore-time --transfer-all --parallel=50 --exclude-glob .git* --exclude .git/&quot;</span><br><span class="line">        # 单独上传autoload文件(强制更新)</span><br><span class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;mirror -Rv --file=vendor/autoload.php --target-directory=/wwwroot/vendor/ --transfer-all&quot;</span><br><span class="line">    only:</span><br><span class="line">        - master</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://lftp.yar.ru/" target="_blank" rel="noopener">LFTP官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;LFTP是一款FTP客户端软件, 支持 FTP 、 FTPS 、 HTTP 、 HTTPS 、 SFTP 、 FXP 等多种文件传输协议。&lt;
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
      <category term="CD" scheme="https://zacksleo.github.io/tags/CD/"/>
    
  </entry>
  
  <entry>
    <title>使用phpmd对PHP项目进行静态代码分析</title>
    <link href="https://zacksleo.github.io/2017/08/23/%E4%BD%BF%E7%94%A8phpmd%E5%AF%B9PHP%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://zacksleo.github.io/2017/08/23/使用phpmd对PHP项目进行静态代码分析/</id>
    <published>2017-08-23T01:48:23.000Z</published>
    <updated>2018-03-24T03:10:24.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PHPMD是与PMD类似的静态代码分析工具, 通过分析可以找出潜在的Bug或设计问题, 从而进一步提高代码质量</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>首先通过composer安装phpmd库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require phpmd/phpmd --dev --prefer-dist</span><br></pre></td></tr></table></figure><ul><li>运行phpmd命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vendor/bin/phpmd ./ text phpmd.xml --suffixes php</span><br></pre></td></tr></table></figure><p>phpmd.xml配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;ruleset name=&quot;PHPMD rule set for Yii 2&quot; xmlns=&quot;http://pmd.sf.net/ruleset/1.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd&quot;</span><br><span class="line">         xsi:noNamespaceSchemaLocation=&quot;http://pmd.sf.net/ruleset_xml_schema.xsd&quot;&gt;</span><br><span class="line">    &lt;description&gt;Custom PHPMD settings for naming, cleancode and controversial rulesets&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;rule ref=&quot;rulesets/naming.xml/ConstructorWithNameAsEnclosingClass&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/naming.xml/ConstantNamingConventions&quot; /&gt;</span><br><span class="line">    &lt;!-- Long variable names can help with better understanding so we increase the limit a bit --&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/naming.xml/LongVariable&quot;&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;property name=&quot;maximum&quot; value=&quot;25&quot; /&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line">    &lt;!-- method names like up(), gc(), ... are okay. --&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/naming.xml/ShortMethodName&quot;&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;property name=&quot;minimum&quot; value=&quot;2&quot; /&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line"></span><br><span class="line">    &lt;rule ref=&quot;rulesets/cleancode.xml&quot;&gt;</span><br><span class="line">        &lt;!-- else is not always bad. Disabling this as there is no way to differentiate between early return and normal else cases. --&gt;</span><br><span class="line">        &lt;exclude name=&quot;ElseExpression&quot; /&gt;</span><br><span class="line">        &lt;!-- Static access on Yii::$app is normal in Yii --&gt;</span><br><span class="line">        &lt;exclude name=&quot;StaticAccess&quot; /&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line"></span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/Superglobals&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCaseClassName&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCaseMethodName&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCaseParameterName&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCaseVariableName&quot; /&gt;</span><br><span class="line">    &lt;!-- allow private properties to start with $_ --&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCasePropertyName&quot;&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;property name=&quot;allow-underscore&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line">&lt;/ruleset&gt;</span><br></pre></td></tr></table></figure><h2 id="GitLab-CI-集成"><a href="#GitLab-CI-集成" class="headerlink" title="GitLab-CI 集成"></a>GitLab-CI 集成</h2><p>在.gitlab-ci.yml中添加一个任务, 用于执行静态分析, 一个典型的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">phpmd:</span><br><span class="line">    stage: testing</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:</span><br><span class="line">        - vendor/bin/phpmd api,backend,common,frontend,console text phpmd.xml --exclude console/migrations/ --suffixes php</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/phpmd/phpmd" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;PHPMD是与PMD类似的静态代码分析工具, 通过分析可以找出潜在的Bug或设计问题, 从而进一步提高代码质量&lt;/p&gt;
&lt;h2 id=&quot;使用
      
    
    </summary>
    
    
      <category term="php" scheme="https://zacksleo.github.io/tags/php/"/>
    
      <category term="phpmd" scheme="https://zacksleo.github.io/tags/phpmd/"/>
    
  </entry>
  
  <entry>
    <title>Codeception中如何使用Fixtures优化测试</title>
    <link href="https://zacksleo.github.io/2017/08/22/Codeception%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Fixtures%E4%BC%98%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://zacksleo.github.io/2017/08/22/Codeception中如何使用Fixtures优化测试/</id>
    <published>2017-08-22T01:25:26.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Fixtures 是测试中非常重要的一部分。主要目的是建立一个固定/已知的环境状态以确保 测试可重复并且按照预期方式运行。</p><p>简答说就是Fixtures提供一种预填充数据的方式，即在测试前需要准备好哪些数据，以便测试可以正常展开，不受其他测试的影响。</p><p>一个 Fixture 可能依赖于其他的 Fixtures ，所定义的依赖会自动加载。</p><p>该方法相比于<code>dump.sql</code>的填充方法更加灵活, 且不会出去填充的冲突问题.</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="定义一个Fixtures"><a href="#定义一个Fixtures" class="headerlink" title="定义一个Fixtures"></a>定义一个Fixtures</h3><p>通过继成<code>yii\test\ActiveFixture</code>, 并声明 <code>modelClass</code> 来定义一个Fixtures , <code>depends</code>为要依赖的Fixtures, 可选。</p><p>Fixtures通常放置于<code>tests</code>目录中的<code>fixtures</code>目录下.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace tests\fixtures;</span><br><span class="line"></span><br><span class="line">use yii\test\ActiveFixture;</span><br><span class="line"></span><br><span class="line">class UserFixture extends ActiveFixture</span><br><span class="line">&#123;</span><br><span class="line">    public $modelClass = &apos;app\models\User&apos;;</span><br><span class="line">    public $depends = [&apos;app\tests\fixtures\UserFixture&apos;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置填充数据"><a href="#设置填充数据" class="headerlink" title="设置填充数据"></a>设置填充数据</h3><p>在 <code>@tests/fixtures/data</code>目录中,每个Fixtures添加一个数据文档</p><p>在位置 <code>@tests/fixtures/data/user.php</code> 中, 设置以下数据, 为要被插入用户表中的数据文件, <code>user1</code>和<code>user2</code>为别名, 方便调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">return [</span><br><span class="line">    &apos;user1&apos; =&gt; [</span><br><span class="line">        &apos;username&apos; =&gt; &apos;lmayert&apos;,</span><br><span class="line">        &apos;email&apos; =&gt; &apos;strosin.vernice@jerde.com&apos;,</span><br><span class="line">        &apos;auth_key&apos; =&gt; &apos;K3nF70it7tzNsHddEiq0BZ0i-OU8S3xV&apos;,</span><br><span class="line">        &apos;password&apos; =&gt; &apos;$2y$13$WSyE5hHsG1rWN2jV8LRHzubilrCLI5Ev/iK0r3jRuwQEs2ldRu.a2&apos;,</span><br><span class="line">    ],</span><br><span class="line">    &apos;user2&apos; =&gt; [</span><br><span class="line">        &apos;username&apos; =&gt; &apos;napoleon69&apos;,</span><br><span class="line">        &apos;email&apos; =&gt; &apos;aileen.barton@heaneyschumm.com&apos;,</span><br><span class="line">        &apos;auth_key&apos; =&gt; &apos;dZlXsVnIDgIzFgX4EduAqkEPuphhOh9q&apos;,</span><br><span class="line">        &apos;password&apos; =&gt; &apos;$2y$13$kkgpvJ8lnjKo8RuoR30ay.RjDf15bMcHIF7Vz1zz/6viYG5xJExU6&apos;,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在测试用例中, 通过定义<code>_fixtures方法</code>, 声明需要使用的Fixtures及填充数据文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @var \UnitTester</span><br><span class="line"> */</span><br><span class="line">protected $tester;</span><br><span class="line"></span><br><span class="line">public function _fixtures()</span><br><span class="line">&#123;</span><br><span class="line">    return [</span><br><span class="line">        &apos;users&apos; =&gt; [</span><br><span class="line">            &apos;class&apos; =&gt; UserFixture::className(),</span><br><span class="line">            &apos;dataFile&apos; =&gt; &apos;@tests/fixtures/data/user.php&apos;</span><br><span class="line">        ],</span><br><span class="line">        &apos;profiles&apos; =&gt; [</span><br><span class="line">            &apos;class&apos; =&gt; UserProfileFixture::className(),</span><br><span class="line">            &apos;dataFile&apos; =&gt; &apos;@tests/fixtures/data/user_profile.php&apos;</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过如下方法, 可以获取插入的记录, 返回值为该Fixture类中对应的<code>modelClass</code>的一个实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user = $this-&gt;tester-&gt;grabFixture(&apos;users&apos;, &apos;default&apos;);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.yiichina.com/doc/guide/2.0/test-fixtures" target="_blank" rel="noopener">Fixtures</a><br><a href="http://www.yiiframework.com/doc-2.0/guide-test-fixtures.html" target="_blank" rel="noopener">Fixtures</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Fixtures 是测试中非常重要的一部分。主要目的是建立一个固定/已知的环境状态以确保 测试可重复并且按照预期方式运行。&lt;/p&gt;
&lt;p&gt;简
      
    
    </summary>
    
    
      <category term="codeception" scheme="https://zacksleo.github.io/tags/codeception/"/>
    
  </entry>
  
  <entry>
    <title>使用Composer创建公共类库</title>
    <link href="https://zacksleo.github.io/2017/07/20/%E4%BD%BF%E7%94%A8Composer%E5%88%9B%E5%BB%BA%E5%85%AC%E5%85%B1%E7%B1%BB%E5%BA%93/"/>
    <id>https://zacksleo.github.io/2017/07/20/使用Composer创建公共类库/</id>
    <published>2017-07-20T01:33:12.000Z</published>
    <updated>2018-03-24T03:10:24.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>如果多个项目中存在使用相同类库、模块的情况，此时可以考虑将类库或者模块单独抽取出来，形成独立类库，通过composer<br>来进行依赖管理，这样可以更方便维护，大大提升开发效率。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>可以对特定模块进行统一维护和升级</li><li>特定的类库可由专人进行维护，保证稳定性和可靠性</li><li>避免了重复开发的情况</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h3><p>为了方便调试，可先在本地现有项目中开发类库，等到开发完成后，再将相关代码单独抽取出来。</p><ul><li>首先在项目中创建一个存放类库的目录，如<code>packages/zacksleo/my-libs</code>,</li></ul><p>其中<code>packages</code>是类库总目录， <code>zacksleo</code>是用户名，相当于命名空间的第一级，<code>my-libs</code>是类库存放目录。</p><ul><li>在目录中创建<code>composer.json</code> 文件，并添加形如以下的内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;zacksleo/my-libs&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;my libs&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;library&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;authors&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;zacksleo&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;zacksleo@gmail.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;minimum-stability&quot;: &quot;stable&quot;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;zacksleo\\my\\libs\\&quot;: &quot;src&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>name</code>是类库名称，<code>descrption</code>是详细说明，<code>type</code>是类别，<code>license</code>是使用的协议，<code>authers</code>是作者信息，</p><p><code>minimum-stability</code> 用来声明最小依赖，通常有<code>dev</code>和 <code>stable</code>可选，<code>autoload</code>中的<code>psr-4</code>声明了</p><p>命名空间和对应的目录，注意命名空间就当使用双反斜杠，目录使用相对路径，此外声明了目录为`src``目录</p><ul><li><p>在<code>src</code>目录中添加相关代码，其中的类使用命名空间<code>zacksleo\\my\\libs</code></p></li><li><p>在项目的<code>composer.json</code>中，通过<code>path</code>方式引入本地类库，如可在<code>repositories</code>中添加如下信息：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;repositories&quot;: &#123;</span><br><span class="line">  &quot;my-libs&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;path&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;packages/zacksleo/my-libs&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>my-libs</code>是别名，可任意填写，<code>type</code>设置成<code>path</code>, <code>url</code>为类库所在的相对路径（与composer.json文件相对）</p><ul><li>通过<code>composer require</code>命令或者在<code>composer.json</code>中的<code>require</code>部分添加声音，来实现依赖加载，如</li></ul><p><code>composer require zacksleo/my-libs</code></p><h3 id="在Github上创建库并上传代码"><a href="#在Github上创建库并上传代码" class="headerlink" title="在Github上创建库并上传代码"></a>在Github上创建库并上传代码</h3><p>当在本地开发完成后，可将类库独立抽取出来（此处的<code>my-libs</code>目录下的内容），并提交到Github上新建的仓库中</p><h3 id="配置packagist并发布"><a href="#配置packagist并发布" class="headerlink" title="配置packagist并发布"></a>配置packagist并发布</h3><ol><li>先在packagist.org中注册好账号，以便发布包。</li><li>在Github的仓库中，点击<code>settings</code>，找到 <code>Intergrations &amp; services</code>, 点击<code>Add servies</code>, 选择<code>Packagist</code>,</li></ol><p>填写在packagist.org注册的用户名和Token(在<a href="https://packagist.org/profile/" target="_blank" rel="noopener">Profile</a>中找到Your API Token)</p><p>点击确定添加，这样，每次Github的变动，都会自动更新到packagist上，免去了手动更新的麻烦</p><h3 id="本地依赖改成线上版本-并清除开发代码"><a href="#本地依赖改成线上版本-并清除开发代码" class="headerlink" title="本地依赖改成线上版本, 并清除开发代码"></a>本地依赖改成线上版本, 并清除开发代码</h3><p>类库一经发布到packagist上后，就可将本地项目<code>composer.json</code>添加的<code>repositories</code>移除，重新运行<code>composer install</code>，</p><p>来安装packagist上的版本，同时<code>packages</code> 目录亦可删除。</p><h2 id="版本问题说明"><a href="#版本问题说明" class="headerlink" title="版本问题说明"></a>版本问题说明</h2><p>composer使用语义化的版本进行依赖管理，因此类库在更新和发布时，所标记的版本号，也就当遵循<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化的版本规范</a>。</p><p>基主要有以下几个内容：</p><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ol><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li><li>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://docs.phpcomposer.com/" target="_blank" rel="noopener">Composer中文文档</a></li><li><a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化的版本规范</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;如果多个项目中存在使用相同类库、模块的情况，此时可以考虑将类库或者模块单独抽取出来，形成独立类库，通过composer&lt;br&gt;来进行依赖管理
      
    
    </summary>
    
    
      <category term="php" scheme="https://zacksleo.github.io/tags/php/"/>
    
      <category term="composer" scheme="https://zacksleo.github.io/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>欢迎访问我的博客</title>
    <link href="https://zacksleo.github.io/2017/07/20/README/"/>
    <id>https://zacksleo.github.io/2017/07/20/README/</id>
    <published>2017-07-20T01:33:12.000Z</published>
    <updated>2018-03-24T03:10:24.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zacks’-Blog"><a href="#zacks’-Blog" class="headerlink" title="zacks’ Blog"></a>zacks’ Blog</h1><p>首页: <a href="https://zacksleo.github.io/">https://zacksleo.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zacks’-Blog&quot;&gt;&lt;a href=&quot;#zacks’-Blog&quot; class=&quot;headerlink&quot; title=&quot;zacks’ Blog&quot;&gt;&lt;/a&gt;zacks’ Blog&lt;/h1&gt;&lt;p&gt;首页: &lt;a href=&quot;https://zacksleo.gith
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI实现自动化测试</title>
    <link href="https://zacksleo.github.io/2017/05/30/GitLab-CI%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://zacksleo.github.io/2017/05/30/GitLab-CI实现自动化测试/</id>
    <published>2017-05-30T02:37:33.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitLab-Ci实现自动化测试"><a href="#GitLab-Ci实现自动化测试" class="headerlink" title="GitLab-Ci实现自动化测试"></a>GitLab-Ci实现自动化测试</h1><blockquote><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p></blockquote><p>使用自动化测试, 可以提高软件的质量和可靠性, 今早发现其中的缺陷和问题, 以便即时改正.</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>首先需要一个满足运行自动化测试的Docker镜像, 以便后面运行测试代码, 例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: zacksleo/docker-composer:develop</span><br></pre></td></tr></table></figure><h2 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h2><p>某些测试需要使用额外的服务, 如数据库、缓存服务器等等, 并通过<code>variables</code>配置服务中的一些变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">    - mysql:5.6</span><br><span class="line">    - redis:latest</span><br><span class="line">variables:</span><br><span class="line">    MYSQL_ROOT_PASSWORD: root</span><br><span class="line">    MYSQL_DATABASE: web</span><br><span class="line">    MYSQL_USER: web</span><br><span class="line">    MYSQL_PASSWORD: web</span><br></pre></td></tr></table></figure><h2 id="声明依赖工件"><a href="#声明依赖工件" class="headerlink" title="声明依赖工件"></a>声明依赖工件</h2><p>一般在测试前要进行准备过程, 如安装依赖库或者编译等, 可将上述过程生成的的文件, 通过依赖声明, 传递过来, 这样可以比避免重复执行相关过程.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">installing-dependencies:</span><br><span class="line">    stage: prepare</span><br><span class="line">    script:</span><br><span class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</span><br><span class="line">        - composer dump-autoload --optimize</span><br><span class="line">    artifacts:</span><br><span class="line">        name: &quot;vendor&quot;</span><br><span class="line">        untracked: true</span><br><span class="line">        expire_in: 60 mins</span><br><span class="line">        paths:</span><br><span class="line">            - $CI_PROJECT_DIR/vendor</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">    - installing-dependencies</span><br></pre></td></tr></table></figure><h2 id="配置测试脚本"><a href="#配置测试脚本" class="headerlink" title="配置测试脚本"></a>配置测试脚本</h2><p>  假定你已经在本地编写好了测试代码, 并且可以本地运行, 那么就可以通过调整和适配, 让测试可以在GitLab-CI中自动化执行, 在下面的例子中,</p><p>  测试代码位于<code>tests</code>目录,并且<code>.env</code>中配置了一些环境变量, 该文件的作用是为了让不同环境使用不同的一组变量, 如数据库、接口地址、账号等等，<br>  这样做的目录可以尽量少的变更代码，保持核心代码的稳定性和适应能力， 通过<code>php -S</code> 启动了一个本地接口服务, 最后调用api测试, 对所有接口<br>  进行测试</p><p>  在下面的例子中, 还声明了<code>coverage</code>, 这个用来说明代码测试覆盖率的取得方法, 因为在测试中会将覆盖率输出(<code>--coverage --no-colors</code>),<br>  GitLab-CI 通过正则匹配输出内容, 读取到覆盖率, 从而显示在项目徽标处  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">    - installing-dependencies</span><br><span class="line">script:</span><br><span class="line">    - cp tests/.env .env</span><br><span class="line">    - ./yii migrate/up --interactive=0</span><br><span class="line">    - php -S localhost:80 --docroot api/tests &amp;&gt;/dev/null&amp;</span><br><span class="line">    - ./vendor/bin/codecept run api -c tests --coverage --no-colors</span><br><span class="line"></span><br><span class="line">    coverage: &apos;/^\s*Lines:\s*\d+.\d+\%/&apos;</span><br></pre></td></tr></table></figure><h2 id="测试失败如何处理"><a href="#测试失败如何处理" class="headerlink" title="测试失败如何处理"></a>测试失败如何处理</h2><p>  当测试失败后, 除了查看<code>Pipline</code>中的任务输出, 我们还应当详细查看测试中的相关日志, 下面这里, 将需要查看的文件生成工件, 在GitLab中下载,<br>  然后可以在本地详细查看, <code>when</code>说明了仅在测试失败时, 才生成工件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">artifacts:</span><br><span class="line">    name: &quot;debug&quot;</span><br><span class="line">    when: on_failure</span><br><span class="line">    untracked: true</span><br><span class="line">    expire_in: 60 mins</span><br><span class="line">    paths:</span><br><span class="line">        - $CI_PROJECT_DIR/api/runtime</span><br><span class="line">        - $CI_PROJECT_DIR/tests/_output</span><br></pre></td></tr></table></figure><h2 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h2><p>下面是一个完整的API自动化测试的盒子</p><pre><code>api-test:    stage: testing    services:        - mysql:5.6        - redis:latest    variables:        MYSQL_ROOT_PASSWORD: root        MYSQL_DATABASE: web        MYSQL_USER: web        MYSQL_PASSWORD: web    dependencies:        - installing-dependencies    script:        - cp tests/.env .env        - ./yii migrate/up --interactive=0        - php -S localhost:80 --docroot api/tests &amp;&gt;/dev/null&amp;        - ./vendor/bin/codecept run api -c tests    artifacts:        name: &quot;debug&quot;        when: on_failure        untracked: true        expire_in: 60 mins        paths:            - $CI_PROJECT_DIR/api/runtime            - $CI_PROJECT_DIR/tests/_output    only:        - develop        - master</code></pre><p>关于持续集成完整的项目, 请查看 <a href="https://github.com/zacksleo/yii2-app-advanced" target="_blank" rel="noopener">zacksleo/yii2-app-advanced</a> 项目</p><p>  <a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html" target="_blank" rel="noopener">使用Docker镜像</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitLab-Ci实现自动化测试&quot;&gt;&lt;a href=&quot;#GitLab-Ci实现自动化测试&quot; class=&quot;headerlink&quot; title=&quot;GitLab-Ci实现自动化测试&quot;&gt;&lt;/a&gt;GitLab-Ci实现自动化测试&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;持
      
    
    </summary>
    
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
      <category term="自动化测试" scheme="https://zacksleo.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>从PHP到Python-两种编程语言的异同</title>
    <link href="https://zacksleo.github.io/2017/05/21/%E4%BB%8EPHP%E5%88%B0Python-%E4%B8%A4%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BC%82%E5%90%8C/"/>
    <id>https://zacksleo.github.io/2017/05/21/从PHP到Python-两种编程语言的异同/</id>
    <published>2017-05-21T14:08:21.000Z</published>
    <updated>2018-03-24T03:10:24.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><ol><li>两者都是胶水语言, 不需要编译, 逐行运行, 因此报错时可以追中到行</li><li>主流都是用C实现的, 因此底层仍然是C</li></ol><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ol><li>PHP与Python在代码格式上有非常大的不同, 首先最明显的一个区别就是, 没有大括号包裹函数和类库.</li><li>Python使用缩进来替代大括号的功能, 开始的时候可能会让你不太习惯, 不过时间长了, 也就慢慢接受了</li></ol><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ol><li>PHP使用composer进行依赖管理，既可以全局安装，也可以安装到当前项目</li><li>Python使用Pip进行依赖管理，只能全局安装</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;语言&quot;&gt;&lt;a href=&quot;#语言&quot; class=&quot;headerlink&quot; title=&quot;语言&quot;&gt;&lt;/a&gt;语言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;两者都是胶水语言, 不需要编译, 逐行运行, 因此报错时可以追中到行&lt;/li&gt;
&lt;li&gt;主流都是用C实现的, 因此底层仍然是C&lt;
      
    
    </summary>
    
    
      <category term="php" scheme="https://zacksleo.github.io/tags/php/"/>
    
      <category term="python" scheme="https://zacksleo.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>如何编写GitLab-CI配置文件</title>
    <link href="https://zacksleo.github.io/2017/04/27/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99GitLab-CI%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://zacksleo.github.io/2017/04/27/如何编写GitLab-CI配置文件/</id>
    <published>2017-04-27T07:45:00.000Z</published>
    <updated>2018-03-24T03:10:24.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在根目录新建<code>.gitlab-ci.yml</code>文件.</p><p>该文件与项目其他文件一样, 同样受到版本控制, 所以可以在不同的分支下, 配置不同的持续集成脚本</p><h2 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h2><p>配置文件遵循YAML语法, 关于该语法的内容, 自行搜索</p><p>参考 <a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言教程</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><h3 id="根主要关键词一览"><a href="#根主要关键词一览" class="headerlink" title="根主要关键词一览"></a>根主要关键词一览</h3><table><thead><tr><th>关键词</th><th>含义</th><th>可选</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>声明使用的Docker镜像</td><td>为空时使用默认镜像</td><td>该镜像应当满足脚本执行的环境依赖</td></tr><tr><td>services</td><td>Docker镜像使用的服务, 通过链接的方式来调用所需服务</td><td>可空</td><td>常用于链接数据库</td></tr><tr><td>stages</td><td>定义构建阶段</td><td>为空时, 单纯定义jobs</td><td>项目的构建分为多个阶段, 例如: 安装依赖/准备, 编译, 测试, 发布等, 同时每个阶段包含若干任务</td></tr><tr><td>before_script</td><td>定义每个job之前执行的脚本</td><td>可空</td><td>每个job启动时会先执行该脚本</td></tr><tr><td>after_script</td><td>定义每个job之后执行的脚本</td><td>可空</td><td>同上</td></tr><tr><td>variables</td><td>定义变量</td><td>可空</td><td>同上</td></tr><tr><td>cache</td><td>定义与后续job之间应缓存的文件</td><td>可空</td><td>同上</td></tr></tbody></table><p>Demo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">image: aipline</span><br><span class="line">services:</span><br><span class="line">    - mysql</span><br><span class="line">    - redis</span><br><span class="line">stages:</span><br><span class="line">    - build</span><br><span class="line">    - test</span><br><span class="line">    - deploy</span><br><span class="line">before_script:</span><br><span class="line">    - bundle install  </span><br><span class="line">after_script:</span><br><span class="line">    - rm secrets</span><br><span class="line">cache:</span><br><span class="line">    paths:</span><br><span class="line">    - binaries/</span><br><span class="line">    - .config</span><br></pre></td></tr></table></figure><h3 id="Jobs中的关键词"><a href="#Jobs中的关键词" class="headerlink" title="Jobs中的关键词"></a>Jobs中的关键词</h3><p>jobs中存在一些与根中相同的关键词, 这些一旦定义, 则会向前覆盖, 即根中定义的则不会在该job执行</p><p>job 这里译为<strong>任务</strong></p><table><thead><tr><th>关键词</th><th>含义</th><th>可选</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>声明任务使用的Docker镜像</td><td>为空时使用根中的定义</td><td>该镜像应当满足脚本执行的环境依赖</td></tr><tr><td>services</td><td>任务中Docker镜像使用的服务, 通过链接的方式来调用所需服务</td><td>可空</td><td>常用于链接数据库</td></tr><tr><td>stage</td><td>所属构建阶段</td><td>为空时则不使用stages</td><td>一个任务属于一个构建阶段</td></tr><tr><td>before_script</td><td>定义每个job之前执行的脚本</td><td>可选</td><td>如果在job中定义则会覆盖根中的内容</td></tr><tr><td>script</td><td>定义每个job执行的脚本</td><td>必须</td><td></td></tr><tr><td>after_script</td><td>定义每个job之后执行的脚本</td><td>可选</td><td>同上</td></tr><tr><td>variables</td><td>定义任务中使用的变量</td><td>可选</td><td>同上</td></tr><tr><td>cache</td><td>定义与后续job之间应缓存的文件</td><td>可选</td><td>同上</td></tr><tr><td>only</td><td>指定应用的Git分支</td><td>可选</td><td>可以是分支名称, 可用正则匹配分支, 也可是tags来指定打过标签的分支</td></tr><tr><td>except</td><td>排除应用的Git分支</td><td>可选</td><td>同上</td></tr><tr><td>tags</td><td>指定执行的GitLab-Runners</td><td>可选</td><td>通过匹配Runners的标签选定</td></tr><tr><td>allow_failure</td><td>允许失败</td><td>默认为false</td><td>如果允许失败, 本次任务不会影响整个构建的结果</td></tr><tr><td>when</td><td>定义合适执行任务</td><td>默认为always</td><td>有<code>on_success</code>, <code>on_failure</code>, <code>always</code> or <code>manual</code>可选</td></tr><tr><td>dependencies</td><td>定义合任务所需要的工件</td><td>可空</td><td>需要首先定义工件</td></tr><tr><td>artifacts</td><td>定义工件</td><td>可空</td><td>工件中指定的目录会在任务执行成功后压缩传到GitLab, 后面需要该工件的任务执行时, 再自行下载解压</td></tr><tr><td>environment</td><td>定义环境</td><td>可空</td><td>在部署任务中, 定义该任务所属的环境</td></tr></tbody></table><p>Demo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">installing-dependencies:</span><br><span class="line">    script:</span><br><span class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</span><br><span class="line">        - composer dump-autoload --optimize</span><br><span class="line">    artifacts:</span><br><span class="line">        name: &quot;vendor&quot;</span><br><span class="line">        untracked: true</span><br><span class="line">        expire_in: 60 mins</span><br><span class="line">        paths:</span><br><span class="line">            - vendor/    </span><br><span class="line">docker-build-image:    </span><br><span class="line">    stage: test</span><br><span class="line">    only:</span><br><span class="line">        - master</span><br><span class="line">    except:</span><br><span class="line">        - develop</span><br><span class="line">    tags:</span><br><span class="line">        - ruby</span><br><span class="line">        - postgres</span><br><span class="line">    allow_failure: true</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:        </span><br><span class="line">        - docker build -t registry.com/mops/image:latest .</span><br><span class="line">        - docker push registry.com/mops/image:latest</span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>jobs的名称不能重名</li><li>同一阶段中的任务, 是并行执行的</li><li>上一阶段所有任务执行完后, 才会进入下一阶段</li><li>定义工件时, 务必定义工件的过期时间, 否则工件会一直寸在GitLab上, 占用空间</li><li>如果需要在任务中传递文件, 优先选择使用 <code>dependencies</code> (结合<code>artifacts</code>)</li></ol><h2 id="验证配置文件合法性"><a href="#验证配置文件合法性" class="headerlink" title="验证配置文件合法性"></a>验证配置文件合法性</h2><p>在GitLab中, 打开 <code>/ci/lint</code>网址, 将配置文件粘贴在些, 进行验证</p><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul><li><a href="https://docs.gitlab.com.cn/ce/ci/yaml/README.html" target="_blank" rel="noopener">配置构建任务</a></li><li><a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">Configuration of your jobs with .gitlab-ci.yml</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建文件&quot;&gt;&lt;a href=&quot;#创建文件&quot; class=&quot;headerlink&quot; title=&quot;创建文件&quot;&gt;&lt;/a&gt;创建文件&lt;/h2&gt;&lt;p&gt;在根目录新建&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;文件.&lt;/p&gt;
&lt;p&gt;该文件与项目其他文件一样, 同样受到
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI快速开始</title>
    <link href="https://zacksleo.github.io/2017/04/26/GitLab-CI%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>https://zacksleo.github.io/2017/04/26/GitLab-CI快速开始/</id>
    <published>2017-04-26T01:58:09.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>假定已经安装好了<code>GitLab-Runners</code></p></blockquote><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World !"></a>Hello World !</h2><h3 id="在仓库根目录创建-gitlab-ci-yml-文件-内容如下"><a href="#在仓库根目录创建-gitlab-ci-yml-文件-内容如下" class="headerlink" title="在仓库根目录创建 .gitlab-ci.yml 文件, 内容如下"></a>在仓库根目录创建 <code>.gitlab-ci.yml</code> 文件, 内容如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">job-1:</span><br><span class="line">  script:</span><br><span class="line">    - echo &quot;Hello World&quot;</span><br></pre></td></tr></table></figure><h3 id="这样-在每次提交代码后-都会自动执行以上脚本-其中job-1是任务名称-可以定义多个任务"><a href="#这样-在每次提交代码后-都会自动执行以上脚本-其中job-1是任务名称-可以定义多个任务" class="headerlink" title="这样, 在每次提交代码后, 都会自动执行以上脚本. 其中job-1是任务名称, 可以定义多个任务,"></a>这样, 在每次提交代码后, 都会自动执行以上脚本. 其中<code>job-1</code>是任务名称, 可以定义多个任务,</h3><p><code>script</code>下面是 shell 命令, 只要命令执行成功, 就代表本次构建通过(出现passed标记)</p><p>如图</p><p><img src="http://ww1.sinaimg.cn/large/675eb504gy1fezux5o1v6j21200dejur.jpg" alt=""></p><h3 id="这样-一次简单的持续集成已经搞定了"><a href="#这样-一次简单的持续集成已经搞定了" class="headerlink" title="这样, 一次简单的持续集成已经搞定了."></a>这样, 一次简单的持续集成已经搞定了.</h3><h2 id="远程拉取代码"><a href="#远程拉取代码" class="headerlink" title="远程拉取代码"></a>远程拉取代码</h2><h3 id="使用ssh远程登录服务器-然后执行git-pull-拉取代码-实现代码热更新"><a href="#使用ssh远程登录服务器-然后执行git-pull-拉取代码-实现代码热更新" class="headerlink" title="使用ssh远程登录服务器, 然后执行git pull 拉取代码, 实现代码热更新"></a>使用ssh远程登录服务器, 然后执行<code>git pull</code> 拉取代码, 实现代码热更新</h3><p>由于ssh无密码登录需要用到密钥, 所以首先需要注入私钥</p><p>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">release-doc:</span><br><span class="line">    stage: deploy</span><br><span class="line">    script:</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /mnt/data/docker-gollum/wiki &amp;&amp; git pull origin master&quot;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>一个更详细的例子 [[通过gitlab-ci实现文件的自动部署]]</p><h2 id="通过Docker镜像实现自动部署"><a href="#通过Docker镜像实现自动部署" class="headerlink" title="通过Docker镜像实现自动部署"></a>通过Docker镜像实现自动部署</h2><p>见文章 [[GitLab-CI使用Docker进行持续部署]]</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.gitlab.com.cn/ce/ci/quick_start/README.html" target="_blank" rel="noopener">GitLab-CI快速开始-中文</a></li><li><a href="https://docs.gitlab.com/ce/ci/quick_start/README.html" target="_blank" rel="noopener">GitLab-CI快速开始-官方</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;假定已经安装好了&lt;code&gt;GitLab-Runners&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI简介</title>
    <link href="https://zacksleo.github.io/2017/04/26/GitLab-CI%E7%AE%80%E4%BB%8B/"/>
    <id>https://zacksleo.github.io/2017/04/26/GitLab-CI简介/</id>
    <published>2017-04-26T01:27:52.000Z</published>
    <updated>2018-03-24T03:10:24.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。</p><p>持续集成实现了DevOps, 使开发人员和运维人员从繁琐的工作中解放出来。另外，这种形式极大地提高了开发者的开发效率和开发质量。<br>持续集成有多种工具，如Jenkins. GitLab内置了GitLab-CI，通过配置一段<code>YAML</code>脚本来实现持续集成.</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>持续集成可以实现的功能:</p><ul><li>代码审核: 自动化代码规范审查, 甚至代码质量检查</li><li>自动化测试: 单元测试, 功能测试和验收测试</li><li>编译发布: 将源代码编译成可执行程序, 并将程序上传到托管发布平台实现自动发布</li><li>构建部署: 通过构建Docker镜像, 或登录远程服务器执行相关部署命令和脚本, 实现自动化部署</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>GitLab-CI 检测每次代码变动, 通过<code>.gitlab-ci.yml</code>脚本执行构建命令, 将命令发布到<code>GitLab-Runners(运行机)</code>上, 进而执行命令.</p><p><code>GitLab-Runners</code> 基于Docker执行持续集成的每项任务, 这样就解决了环境依赖问题.</p><p><code>GitLab-Runners</code>把实时将执行结果输出到GitLab网页上, 任务执行完后, 通过徽章标记和邮箱告知执行结果.</p><p>下一章: [[GitLab 快速开始]]</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener">持续集成是什么</a></li><li><a href="https://about.gitlab.com/2015/12/14/getting-started-with-gitlab-and-gitlab-ci/" target="_blank" rel="noopener">Getting started with GitLab and GitLab CI</a></li><li><a href="https://about.gitlab.com/2016/08/05/continuous-integration-delivery-and-deployment-with-gitlab/" target="_blank" rel="noopener">Continuous Integration, Delivery, and Deployment with GitLab</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。&lt;
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI使用Docker进行持续部署</title>
    <link href="https://zacksleo.github.io/2017/04/22/GitLab-CI%E4%BD%BF%E7%94%A8Docker%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/04/22/GitLab-CI使用Docker进行持续部署/</id>
    <published>2017-04-22T14:33:31.000Z</published>
    <updated>2018-03-24T03:10:24.122Z</updated>
    
    <content type="html"><![CDATA[<p>Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login -u username -p password registry.demo.com</span><br><span class="line">docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</span><br><span class="line">docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</span><br></pre></td></tr></table></figure><p>其中 <code>username</code>是用户名, <code>password</code>是密码, <code>registry.demo.com</code>是私有镜像库地址,</p><p><code>$CI_PROJECT_NAME</code> 是GitLab-CI内置变量, 会自动替换为项目的名称, 这里也可以直接写死, 如</p><p><code>docker build -t registry.demo.com/repos/image-name:latest .</code></p><p><code>image-name</code>, 就是要构建的镜像名称, <code>latest</code>是TAG标签, <code>repos</code>是仓库的空间名称</p><p>在下面的例子中, 首先通过composer安装依赖库, 然后通过artifacts传递给构建任务, 构建完镜像将镜像发布到私有库,<br>部署时通过拉取最新的镜像库, 进行部署</p><blockquote><p>项目的deploy目录中, 放置一些配置文件, 如<code>Dockerfile</code>, <code>docker-compose.yml</code>等, 通过<code>rsync</code>同步到部署服务器上, 用于部署所需</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">image: zacksleo/docker-composer:1.1</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</span><br><span class="line">    - apk add rsync</span><br><span class="line">    - eval $(ssh-agent -s)</span><br><span class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</span><br><span class="line">    - chmod 0600 ~/deploy.key</span><br><span class="line">    - ssh-add ~/deploy.key</span><br><span class="line">    - mkdir -p ~/.ssh</span><br><span class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line">    - export APP_ENV=testing</span><br><span class="line"></span><br><span class="line">stages:</span><br><span class="line">    - prepare    </span><br><span class="line">    - build</span><br><span class="line">    - deploy</span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">    COMPOSER_CACHE_DIR: &quot;/cache/composer&quot;</span><br><span class="line">    DOCKER_DRIVER: overlay</span><br><span class="line"></span><br><span class="line">installing-dependencies:</span><br><span class="line">    stage: prepare</span><br><span class="line">    script:</span><br><span class="line">        - composer install --prefer-dist -n --no-interaction -v --no-suggest</span><br><span class="line">    artifacts:</span><br><span class="line">        name: &quot;vendor&quot;</span><br><span class="line">        untracked: true</span><br><span class="line">        expire_in: 60 mins</span><br><span class="line">        paths:</span><br><span class="line">            - $CI_PROJECT_DIR/vendor    </span><br><span class="line">test-image:</span><br><span class="line">    stage: build</span><br><span class="line">    image: docker:latest</span><br><span class="line">    services:</span><br><span class="line">        - docker:dind</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:</span><br><span class="line">        - docker login -u username -p password registry.demo.com</span><br><span class="line">        - docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</span><br><span class="line">        - docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</span><br><span class="line">testing-server:</span><br><span class="line">    stage: deploy</span><br><span class="line">    image: alpine</span><br><span class="line">    variables:</span><br><span class="line">        DEPLOY_SERVER: &quot;server-host&quot;</span><br><span class="line">    script:</span><br><span class="line">        - cd deploy</span><br><span class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats        </span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker login -u username -p password registry.demo.com&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /data/$CI_PROJECT_NAME &amp;&amp; docker-compose stop &amp;&amp; docker-compose rm -f &amp;&amp; docker-compose pull &amp;&amp; docker-compose up -d&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME chown www-data:www-data web/assets&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME ./yii migrate/up --interactive=0&quot;</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/675eb504ly1fezvjdberyj20w30axdh2.jpg" alt=""></p><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://docs.gitlab.com/ce/ci/docker/using_docker_build.html" target="_blank" rel="noopener">Using Docker Build</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s
      
    
    </summary>
    
    
      <category term="DevOps" scheme="https://zacksleo.github.io/tags/DevOps/"/>
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
      <category term="Docker" scheme="https://zacksleo.github.io/tags/Docker/"/>
    
      <category term="CD" scheme="https://zacksleo.github.io/tags/CD/"/>
    
  </entry>
  
</feed>
