<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zacks&#39;s blog</title>
  <subtitle>the blog of zacks</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zacksleo.github.io/"/>
  <updated>2017-08-22T01:26:04.000Z</updated>
  <id>https://zacksleo.github.io/</id>
  
  <author>
    <name>zacksleo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codeception中如何使用Fixtures优化测试</title>
    <link href="https://zacksleo.github.io/2017/08/22/Codeception%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Fixtures%E4%BC%98%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://zacksleo.github.io/2017/08/22/Codeception中如何使用Fixtures优化测试/</id>
    <published>2017-08-22T01:25:26.000Z</published>
    <updated>2017-08-22T01:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Fixtures 是测试中非常重要的一部分。主要目的是建立一个固定/已知的环境状态以确保 测试可重复并且按照预期方式运行。</p>
<p>简答说就是Fixtures提供一种预填充数据的方式，即在测试前需要准备好哪些数据，以便测试可以正常展开，不受其他测试的影响。</p>
<p>一个 Fixture 可能依赖于其他的 Fixtures ，所定义的依赖会自动加载。</p>
<p>该方法相比于<code>dump.sql</code>的填充方法更加灵活, 且不会出去填充的冲突问题.</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="定义一个Fixtures"><a href="#定义一个Fixtures" class="headerlink" title="定义一个Fixtures"></a>定义一个Fixtures</h3><p>通过继成<code>yii\test\ActiveFixture</code>, 并声明 <code>modelClass</code> 来定义一个Fixtures , <code>depends</code>为要依赖的Fixtures, 可选。</p>
<p>Fixtures通常放置于<code>tests</code>目录中的<code>fixtures</code>目录下.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">namespace tests\fixtures;</div><div class="line"></div><div class="line">use yii\test\ActiveFixture;</div><div class="line"></div><div class="line">class UserFixture extends ActiveFixture</div><div class="line">&#123;</div><div class="line">    public $modelClass = &apos;app\models\User&apos;;</div><div class="line">    public $depends = [&apos;app\tests\fixtures\UserFixture&apos;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设置填充数据"><a href="#设置填充数据" class="headerlink" title="设置填充数据"></a>设置填充数据</h3><p>在 <code>@tests/fixtures/data</code>目录中,每个Fixtures添加一个数据文档</p>
<p>在位置 <code>@tests/fixtures/data/user.php</code> 中, 设置以下数据, 为要被插入用户表中的数据文件, <code>user1</code>和<code>user2</code>为别名, 方便调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">return [</div><div class="line">    &apos;user1&apos; =&gt; [</div><div class="line">        &apos;username&apos; =&gt; &apos;lmayert&apos;,</div><div class="line">        &apos;email&apos; =&gt; &apos;strosin.vernice@jerde.com&apos;,</div><div class="line">        &apos;auth_key&apos; =&gt; &apos;K3nF70it7tzNsHddEiq0BZ0i-OU8S3xV&apos;,</div><div class="line">        &apos;password&apos; =&gt; &apos;$2y$13$WSyE5hHsG1rWN2jV8LRHzubilrCLI5Ev/iK0r3jRuwQEs2ldRu.a2&apos;,</div><div class="line">    ],</div><div class="line">    &apos;user2&apos; =&gt; [</div><div class="line">        &apos;username&apos; =&gt; &apos;napoleon69&apos;,</div><div class="line">        &apos;email&apos; =&gt; &apos;aileen.barton@heaneyschumm.com&apos;,</div><div class="line">        &apos;auth_key&apos; =&gt; &apos;dZlXsVnIDgIzFgX4EduAqkEPuphhOh9q&apos;,</div><div class="line">        &apos;password&apos; =&gt; &apos;$2y$13$kkgpvJ8lnjKo8RuoR30ay.RjDf15bMcHIF7Vz1zz/6viYG5xJExU6&apos;,</div><div class="line">    ],</div><div class="line">];</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在测试用例中, 通过定义<code>_fixtures方法</code>, 声明需要使用的Fixtures及填充数据文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/**</div><div class="line"> * @var \UnitTester</div><div class="line"> */</div><div class="line">protected $tester;</div><div class="line"></div><div class="line">public function _fixtures()</div><div class="line">&#123;</div><div class="line">    return [</div><div class="line">        &apos;users&apos; =&gt; [</div><div class="line">            &apos;class&apos; =&gt; UserFixture::className(),</div><div class="line">            &apos;dataFile&apos; =&gt; &apos;@tests/fixtures/data/user.php&apos;</div><div class="line">        ],</div><div class="line">        &apos;profiles&apos; =&gt; [</div><div class="line">            &apos;class&apos; =&gt; UserProfileFixture::className(),</div><div class="line">            &apos;dataFile&apos; =&gt; &apos;@tests/fixtures/data/user_profile.php&apos;</div><div class="line">        ],</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过如下方法, 可以获取插入的记录, 返回值为该Fixture类中对应的<code>modelClass</code>的一个实例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$user = $this-&gt;tester-&gt;grabFixture(&apos;users&apos;, &apos;default&apos;);</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.yiichina.com/doc/guide/2.0/test-fixtures" target="_blank" rel="external">Fixtures</a><br><a href="http://www.yiiframework.com/doc-2.0/guide-test-fixtures.html" target="_blank" rel="external">Fixtures</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Fixtures 是测试中非常重要的一部分。主要目的是建立一个固定/已知的环境状态以确保 测试可重复并且按照预期方式运行。&lt;/p&gt;
&lt;p&gt;简
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Composer创建公共类库</title>
    <link href="https://zacksleo.github.io/2017/07/20/%E4%BD%BF%E7%94%A8Composer%E5%88%9B%E5%BB%BA%E5%85%AC%E5%85%B1%E7%B1%BB%E5%BA%93/"/>
    <id>https://zacksleo.github.io/2017/07/20/使用Composer创建公共类库/</id>
    <published>2017-07-20T01:33:12.000Z</published>
    <updated>2017-07-20T01:34:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>如果多个项目中存在使用相同类库、模块的情况，此时可以考虑将类库或者模块单独抽取出来，形成独立类库，通过composer<br>来进行依赖管理，这样可以更方便维护，大大提升开发效率。</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>可以对特定模块进行统一维护和升级</li>
<li>特定的类库可由专人进行维护，保证稳定性和可靠性</li>
<li>避免了重复开发的情况</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h3><p>为了方便调试，可先在本地现有项目中开发类库，等到开发完成后，再将相关代码单独抽取出来。</p>
<ul>
<li>首先在项目中创建一个存放类库的目录，如<code>packages/zacksleo/my-libs</code>,</li>
</ul>
<p>其中<code>packages</code>是类库总目录， <code>zacksleo</code>是用户名，相当于命名空间的第一级，<code>my-libs</code>是类库存放目录。</p>
<ul>
<li>在目录中创建<code>composer.json</code> 文件，并添加形如以下的内容：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;zacksleo/my-libs&quot;,</div><div class="line">  &quot;description&quot;: &quot;my libs&quot;,</div><div class="line">  &quot;type&quot;: &quot;library&quot;,</div><div class="line">  &quot;license&quot;: &quot;MIT&quot;,</div><div class="line">  &quot;authors&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;name&quot;: &quot;zacksleo&quot;,</div><div class="line">      &quot;email&quot;: &quot;zacksleo@gmail.com&quot;</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  &quot;minimum-stability&quot;: &quot;stable&quot;,</div><div class="line">  &quot;autoload&quot;: &#123;</div><div class="line">    &quot;psr-4&quot;: &#123;</div><div class="line">      &quot;zacksleo\\my\\libs\\&quot;: &quot;src&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，<code>name</code>是类库名称，<code>descrption</code>是详细说明，<code>type</code>是类别，<code>license</code>是使用的协议，<code>authers</code>是作者信息，</p>
<p><code>minimum-stability</code> 用来声明最小依赖，通常有<code>dev</code>和 <code>stable</code>可选，<code>autoload</code>中的<code>psr-4</code>声明了</p>
<p>命名空间和对应的目录，注意命名空间就当使用双反斜杠，目录使用相对路径，此外声明了目录为`src``目录</p>
<ul>
<li><p>在<code>src</code>目录中添加相关代码，其中的类使用命名空间<code>zacksleo\\my\\libs</code></p>
</li>
<li><p>在项目的<code>composer.json</code>中，通过<code>path</code>方式引入本地类库，如可在<code>repositories</code>中添加如下信息：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;repositories&quot;: &#123;</div><div class="line">  &quot;my-libs&quot;: &#123;</div><div class="line">    &quot;type&quot;: &quot;path&quot;,</div><div class="line">    &quot;url&quot;: &quot;packages/zacksleo/my-libs&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>my-libs</code>是别名，可任意填写，<code>type</code>设置成<code>path</code>, <code>url</code>为类库所在的相对路径（与composer.json文件相对）</p>
<ul>
<li>通过<code>composer require</code>命令或者在<code>composer.json</code>中的<code>require</code>部分添加声音，来实现依赖加载，如</li>
</ul>
<p><code>composer require zacksleo/my-libs</code></p>
<h3 id="在Github上创建库并上传代码"><a href="#在Github上创建库并上传代码" class="headerlink" title="在Github上创建库并上传代码"></a>在Github上创建库并上传代码</h3><p>当在本地开发完成后，可将类库独立抽取出来（此处的<code>my-libs</code>目录下的内容），并提交到Github上新建的仓库中</p>
<h3 id="配置packagist并发布"><a href="#配置packagist并发布" class="headerlink" title="配置packagist并发布"></a>配置packagist并发布</h3><ol>
<li>先在packagist.org中注册好账号，以便发布包。</li>
<li>在Github的仓库中，点击<code>settings</code>，找到 <code>Intergrations &amp; services</code>, 点击<code>Add servies</code>, 选择<code>Packagist</code>,</li>
</ol>
<p>填写在packagist.org注册的用户名和Token(在<a href="https://packagist.org/profile/" target="_blank" rel="external">Profile</a>中找到Your API Token)</p>
<p>点击确定添加，这样，每次Github的变动，都会自动更新到packagist上，免去了手动更新的麻烦</p>
<h3 id="本地依赖改成线上版本-并清除开发代码"><a href="#本地依赖改成线上版本-并清除开发代码" class="headerlink" title="本地依赖改成线上版本, 并清除开发代码"></a>本地依赖改成线上版本, 并清除开发代码</h3><p>类库一经发布到packagist上后，就可将本地项目<code>composer.json</code>添加的<code>repositories</code>移除，重新运行<code>composer install</code>，</p>
<p>来安装packagist上的版本，同时<code>packages</code> 目录亦可删除。</p>
<h2 id="版本问题说明"><a href="#版本问题说明" class="headerlink" title="版本问题说明"></a>版本问题说明</h2><p>composer使用语义化的版本进行依赖管理，因此类库在更新和发布时，所标记的版本号，也就当遵循<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">语义化的版本规范</a>。</p>
<p>基主要有以下几个内容：</p>
<p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p>
<ol>
<li>主版本号：当你做了不兼容的 API 修改，</li>
<li>次版本号：当你做了向下兼容的功能性新增，</li>
<li>修订号：当你做了向下兼容的问题修正。</li>
<li>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://docs.phpcomposer.com/" target="_blank" rel="external">Composer中文文档</a></li>
<li><a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">语义化的版本规范</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;如果多个项目中存在使用相同类库、模块的情况，此时可以考虑将类库或者模块单独抽取出来，形成独立类库，通过composer&lt;br&gt;来进行依赖管理
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI实现自动化测试</title>
    <link href="https://zacksleo.github.io/2017/05/30/GitLab-CI%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://zacksleo.github.io/2017/05/30/GitLab-CI实现自动化测试/</id>
    <published>2017-05-30T02:37:33.000Z</published>
    <updated>2017-05-30T02:54:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitLab-Ci实现自动化测试"><a href="#GitLab-Ci实现自动化测试" class="headerlink" title="GitLab-Ci实现自动化测试"></a>GitLab-Ci实现自动化测试</h1><blockquote>
<p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p>
</blockquote>
<p>使用自动化测试, 可以提高软件的质量和可靠性, 今早发现其中的缺陷和问题, 以便即时改正.</p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>首先需要一个满足运行自动化测试的Docker镜像, 以便后面运行测试代码, 例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">image: zacksleo/docker-composer:develop</div></pre></td></tr></table></figure>
<h2 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h2><p>某些测试需要使用额外的服务, 如数据库、缓存服务器等等, 并通过<code>variables</code>配置服务中的一些变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">services:</div><div class="line">    - mysql:5.6</div><div class="line">    - redis:latest</div><div class="line">variables:</div><div class="line">    MYSQL_ROOT_PASSWORD: root</div><div class="line">    MYSQL_DATABASE: web</div><div class="line">    MYSQL_USER: web</div><div class="line">    MYSQL_PASSWORD: web</div></pre></td></tr></table></figure>
<h2 id="声明依赖工件"><a href="#声明依赖工件" class="headerlink" title="声明依赖工件"></a>声明依赖工件</h2><p>一般在测试前要进行准备过程, 如安装依赖库或者编译等, 可将上述过程生成的的文件, 通过依赖声明, 传递过来, 这样可以比避免重复执行相关过程.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">installing-dependencies:</div><div class="line">    stage: prepare</div><div class="line">    script:</div><div class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</div><div class="line">        - composer dump-autoload --optimize</div><div class="line">    artifacts:</div><div class="line">        name: &quot;vendor&quot;</div><div class="line">        untracked: true</div><div class="line">        expire_in: 60 mins</div><div class="line">        paths:</div><div class="line">            - $CI_PROJECT_DIR/vendor</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dependencies:</div><div class="line">    - installing-dependencies</div></pre></td></tr></table></figure>
<h2 id="配置测试脚本"><a href="#配置测试脚本" class="headerlink" title="配置测试脚本"></a>配置测试脚本</h2><p>  假定你已经在本地编写好了测试代码, 并且可以本地运行, 那么就可以通过调整和适配, 让测试可以在GitLab-CI中自动化执行, 在下面的例子中,</p>
<p>  测试代码位于<code>tests</code>目录,并且<code>.env</code>中配置了一些环境变量, 该文件的作用是为了让不同环境使用不同的一组变量, 如数据库、接口地址、账号等等，<br>  这样做的目录可以尽量少的变更代码，保持核心代码的稳定性和适应能力， 通过<code>php -S</code> 启动了一个本地接口服务, 最后调用api测试, 对所有接口<br>  进行测试</p>
<p>  在下面的例子中, 还声明了<code>coverage</code>, 这个用来说明代码测试覆盖率的取得方法, 因为在测试中会将覆盖率输出(<code>--coverage --no-colors</code>),<br>  GitLab-CI 通过正则匹配输出内容, 读取到覆盖率, 从而显示在项目徽标处  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dependencies:</div><div class="line">    - installing-dependencies</div><div class="line">script:</div><div class="line">    - cp tests/.env .env</div><div class="line">    - ./yii migrate/up --interactive=0</div><div class="line">    - php -S localhost:80 --docroot api/tests &amp;&gt;/dev/null&amp;</div><div class="line">    - ./vendor/bin/codecept run api -c tests --coverage --no-colors</div><div class="line"></div><div class="line">    coverage: &apos;/^\s*Lines:\s*\d+.\d+\%/&apos;</div></pre></td></tr></table></figure>
<h2 id="测试失败如何处理"><a href="#测试失败如何处理" class="headerlink" title="测试失败如何处理"></a>测试失败如何处理</h2><p>  当测试失败后, 除了查看<code>Pipline</code>中的任务输出, 我们还应当详细查看测试中的相关日志, 下面这里, 将需要查看的文件生成工件, 在GitLab中下载,<br>  然后可以在本地详细查看, <code>when</code>说明了仅在测试失败时, 才生成工件</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">artifacts:</div><div class="line">    name: &quot;debug&quot;</div><div class="line">    when: on_failure</div><div class="line">    untracked: true</div><div class="line">    expire_in: 60 mins</div><div class="line">    paths:</div><div class="line">        - $CI_PROJECT_DIR/api/runtime</div><div class="line">        - $CI_PROJECT_DIR/tests/_output</div></pre></td></tr></table></figure>
<h2 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h2><p>下面是一个完整的API自动化测试的盒子</p>
<pre><code>api-test:
    stage: testing
    services:
        - mysql:5.6
        - redis:latest
    variables:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: web
        MYSQL_USER: web
        MYSQL_PASSWORD: web
    dependencies:
        - installing-dependencies
    script:
        - cp tests/.env .env
        - ./yii migrate/up --interactive=0
        - php -S localhost:80 --docroot api/tests &amp;&gt;/dev/null&amp;
        - ./vendor/bin/codecept run api -c tests
    artifacts:
        name: &quot;debug&quot;
        when: on_failure
        untracked: true
        expire_in: 60 mins
        paths:
            - $CI_PROJECT_DIR/api/runtime
            - $CI_PROJECT_DIR/tests/_output
    only:
        - develop
        - master
</code></pre><p>关于持续集成完整的项目, 请查看 <a href="https://github.com/zacksleo/yii2-app-advanced" target="_blank" rel="external">zacksleo/yii2-app-advanced</a> 项目</p>
<p>  <a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html" target="_blank" rel="external">使用Docker镜像</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GitLab-Ci实现自动化测试&quot;&gt;&lt;a href=&quot;#GitLab-Ci实现自动化测试&quot; class=&quot;headerlink&quot; title=&quot;GitLab-Ci实现自动化测试&quot;&gt;&lt;/a&gt;GitLab-Ci实现自动化测试&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;持
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从PHP到Python-两种编程语言的异同</title>
    <link href="https://zacksleo.github.io/2017/05/21/%E4%BB%8EPHP%E5%88%B0Python-%E4%B8%A4%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BC%82%E5%90%8C/"/>
    <id>https://zacksleo.github.io/2017/05/21/从PHP到Python-两种编程语言的异同/</id>
    <published>2017-05-21T14:08:21.000Z</published>
    <updated>2017-05-21T14:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><ol>
<li>两者都是胶水语言, 不需要编译, 逐行运行, 因此报错时可以追中到行</li>
<li>主流都是用C实现的, 因此底层仍然是C</li>
</ol>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ol>
<li>PHP与Python在代码格式上有非常大的不同, 首先最明显的一个区别就是, 没有大括号包裹函数和类库.</li>
<li>Python使用缩进来替代大括号的功能, 开始的时候可能会让你不太习惯, 不过时间长了, 也就慢慢接受了</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语言&quot;&gt;&lt;a href=&quot;#语言&quot; class=&quot;headerlink&quot; title=&quot;语言&quot;&gt;&lt;/a&gt;语言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;两者都是胶水语言, 不需要编译, 逐行运行, 因此报错时可以追中到行&lt;/li&gt;
&lt;li&gt;主流都是用C实现的, 因此底层仍然是C&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何编写GitLab-CI配置文件</title>
    <link href="https://zacksleo.github.io/2017/04/27/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99GitLab-CI%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://zacksleo.github.io/2017/04/27/如何编写GitLab-CI配置文件/</id>
    <published>2017-04-27T07:45:00.000Z</published>
    <updated>2017-05-30T02:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在根目录新建<code>.gitlab-ci.yml</code>文件.</p>
<p>该文件与项目其他文件一样, 同样受到版本控制, 所以可以在不同的分支下, 配置不同的持续集成脚本</p>
<h2 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h2><p>配置文件遵循YAML语法, 关于该语法的内容, 自行搜索</p>
<p>参考 <a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="external">YAML 语言教程</a></p>
<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><h3 id="根主要关键词一览"><a href="#根主要关键词一览" class="headerlink" title="根主要关键词一览"></a>根主要关键词一览</h3><table>
<thead>
<tr>
<th>关键词</th>
<th>含义</th>
<th>可选</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>image</td>
<td>声明使用的Docker镜像</td>
<td>为空时使用默认镜像</td>
<td>该镜像应当满足脚本执行的环境依赖</td>
</tr>
<tr>
<td>services</td>
<td>Docker镜像使用的服务, 通过链接的方式来调用所需服务</td>
<td>可空</td>
<td>常用于链接数据库</td>
</tr>
<tr>
<td>stages</td>
<td>定义构建阶段</td>
<td>为空时, 单纯定义jobs</td>
<td>项目的构建分为多个阶段, 例如: 安装依赖/准备, 编译, 测试, 发布等, 同时每个阶段包含若干任务</td>
</tr>
<tr>
<td>before_script</td>
<td>定义每个job之前执行的脚本</td>
<td>可空</td>
<td>每个job启动时会先执行该脚本</td>
</tr>
<tr>
<td>after_script</td>
<td>定义每个job之后执行的脚本</td>
<td>可空</td>
<td>同上</td>
</tr>
<tr>
<td>variables</td>
<td>定义变量</td>
<td>可空</td>
<td>同上</td>
</tr>
<tr>
<td>cache</td>
<td>定义与后续job之间应缓存的文件</td>
<td>可空</td>
<td>同上</td>
</tr>
</tbody>
</table>
<p>Demo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">image: aipline</div><div class="line">services:</div><div class="line">    - mysql</div><div class="line">    - redis</div><div class="line">stages:</div><div class="line">    - build</div><div class="line">    - test</div><div class="line">    - deploy</div><div class="line">before_script:</div><div class="line">    - bundle install  </div><div class="line">after_script:</div><div class="line">    - rm secrets</div><div class="line">cache:</div><div class="line">    paths:</div><div class="line">    - binaries/</div><div class="line">    - .config</div></pre></td></tr></table></figure>
<h3 id="Jobs中的关键词"><a href="#Jobs中的关键词" class="headerlink" title="Jobs中的关键词"></a>Jobs中的关键词</h3><p>jobs中存在一些与根中相同的关键词, 这些一旦定义, 则会向前覆盖, 即根中定义的则不会在该job执行</p>
<p>job 这里译为<strong>任务</strong></p>
<table>
<thead>
<tr>
<th>关键词</th>
<th>含义</th>
<th>可选</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>image</td>
<td>声明任务使用的Docker镜像</td>
<td>为空时使用根中的定义</td>
<td>该镜像应当满足脚本执行的环境依赖</td>
</tr>
<tr>
<td>services</td>
<td>任务中Docker镜像使用的服务, 通过链接的方式来调用所需服务</td>
<td>可空</td>
<td>常用于链接数据库</td>
</tr>
<tr>
<td>stage</td>
<td>所属构建阶段</td>
<td>为空时则不使用stages</td>
<td>一个任务属于一个构建阶段</td>
</tr>
<tr>
<td>before_script</td>
<td>定义每个job之前执行的脚本</td>
<td>可选</td>
<td>如果在job中定义则会覆盖根中的内容</td>
</tr>
<tr>
<td>script</td>
<td>定义每个job执行的脚本</td>
<td>必须</td>
<td></td>
</tr>
<tr>
<td>after_script</td>
<td>定义每个job之后执行的脚本</td>
<td>可选</td>
<td>同上</td>
</tr>
<tr>
<td>variables</td>
<td>定义任务中使用的变量</td>
<td>可选</td>
<td>同上</td>
</tr>
<tr>
<td>cache</td>
<td>定义与后续job之间应缓存的文件</td>
<td>可选</td>
<td>同上</td>
</tr>
<tr>
<td>only</td>
<td>指定应用的Git分支</td>
<td>可选</td>
<td>可以是分支名称, 可用正则匹配分支, 也可是tags来指定打过标签的分支</td>
</tr>
<tr>
<td>except</td>
<td>排除应用的Git分支</td>
<td>可选</td>
<td>同上</td>
</tr>
<tr>
<td>tags</td>
<td>指定执行的GitLab-Runners</td>
<td>可选</td>
<td>通过匹配Runners的标签选定</td>
</tr>
<tr>
<td>allow_failure</td>
<td>允许失败</td>
<td>默认为false</td>
<td>如果允许失败, 本次任务不会影响整个构建的结果</td>
</tr>
<tr>
<td>when</td>
<td>定义合适执行任务</td>
<td>默认为always</td>
<td>有<code>on_success</code>, <code>on_failure</code>, <code>always</code> or <code>manual</code>可选</td>
</tr>
<tr>
<td>dependencies</td>
<td>定义合任务所需要的工件</td>
<td>可空</td>
<td>需要首先定义工件</td>
</tr>
<tr>
<td>artifacts</td>
<td>定义工件</td>
<td>可空</td>
<td>工件中指定的目录会在任务执行成功后压缩传到GitLab, 后面需要该工件的任务执行时, 再自行下载解压</td>
</tr>
<tr>
<td>environment</td>
<td>定义环境</td>
<td>可空</td>
<td>在部署任务中, 定义该任务所属的环境</td>
</tr>
</tbody>
</table>
<p>Demo:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">installing-dependencies:</div><div class="line">    script:</div><div class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</div><div class="line">        - composer dump-autoload --optimize</div><div class="line">    artifacts:</div><div class="line">        name: &quot;vendor&quot;</div><div class="line">        untracked: true</div><div class="line">        expire_in: 60 mins</div><div class="line">        paths:</div><div class="line">            - vendor/    </div><div class="line">docker-build-image:    </div><div class="line">    stage: test</div><div class="line">    only:</div><div class="line">        - master</div><div class="line">    except:</div><div class="line">        - develop</div><div class="line">    tags:</div><div class="line">        - ruby</div><div class="line">        - postgres</div><div class="line">    allow_failure: true</div><div class="line">    dependencies:</div><div class="line">        - installing-dependencies</div><div class="line">    script:        </div><div class="line">        - docker build -t registry.com/mops/image:latest .</div><div class="line">        - docker push registry.com/mops/image:latest</div></pre></td></tr></table></figure>
<p>注意:</p>
<ol>
<li>jobs的名称不能重名</li>
<li>同一阶段中的任务, 是并行执行的</li>
<li>上一阶段所有任务执行完后, 才会进入下一阶段</li>
<li>定义工件时, 务必定义工件的过期时间, 否则工件会一直寸在GitLab上, 占用空间</li>
<li>如果需要在任务中传递文件, 优先选择使用 <code>dependencies</code> (结合<code>artifacts</code>)</li>
</ol>
<h2 id="验证配置文件合法性"><a href="#验证配置文件合法性" class="headerlink" title="验证配置文件合法性"></a>验证配置文件合法性</h2><p>在GitLab中, 打开 <code>/ci/lint</code>网址, 将配置文件粘贴在些, 进行验证</p>
<h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul>
<li><a href="https://docs.gitlab.com.cn/ce/ci/yaml/README.html" target="_blank" rel="external">配置构建任务</a></li>
<li><a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="external">Configuration of your jobs with .gitlab-ci.yml</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建文件&quot;&gt;&lt;a href=&quot;#创建文件&quot; class=&quot;headerlink&quot; title=&quot;创建文件&quot;&gt;&lt;/a&gt;创建文件&lt;/h2&gt;&lt;p&gt;在根目录新建&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;文件.&lt;/p&gt;
&lt;p&gt;该文件与项目其他文件一样, 同样受到
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI快速开始</title>
    <link href="https://zacksleo.github.io/2017/04/26/GitLab-CI%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>https://zacksleo.github.io/2017/04/26/GitLab-CI快速开始/</id>
    <published>2017-04-26T01:58:09.000Z</published>
    <updated>2017-05-30T02:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>假定已经安装好了<code>GitLab-Runners</code></p>
</blockquote>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World !"></a>Hello World !</h2><h3 id="在仓库根目录创建-gitlab-ci-yml-文件-内容如下"><a href="#在仓库根目录创建-gitlab-ci-yml-文件-内容如下" class="headerlink" title="在仓库根目录创建 .gitlab-ci.yml 文件, 内容如下"></a>在仓库根目录创建 <code>.gitlab-ci.yml</code> 文件, 内容如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">job-1:</div><div class="line">  script:</div><div class="line">    - echo &quot;Hello World&quot;</div></pre></td></tr></table></figure>
<h3 id="这样-在每次提交代码后-都会自动执行以上脚本-其中job-1是任务名称-可以定义多个任务"><a href="#这样-在每次提交代码后-都会自动执行以上脚本-其中job-1是任务名称-可以定义多个任务" class="headerlink" title="这样, 在每次提交代码后, 都会自动执行以上脚本. 其中job-1是任务名称, 可以定义多个任务,"></a>这样, 在每次提交代码后, 都会自动执行以上脚本. 其中<code>job-1</code>是任务名称, 可以定义多个任务,</h3><p><code>script</code>下面是 shell 命令, 只要命令执行成功, 就代表本次构建通过(出现passed标记)</p>
<p>如图</p>
<p><img src="http://ww1.sinaimg.cn/large/675eb504gy1fezux5o1v6j21200dejur.jpg" alt=""></p>
<h3 id="这样-一次简单的持续集成已经搞定了"><a href="#这样-一次简单的持续集成已经搞定了" class="headerlink" title="这样, 一次简单的持续集成已经搞定了."></a>这样, 一次简单的持续集成已经搞定了.</h3><h2 id="远程拉取代码"><a href="#远程拉取代码" class="headerlink" title="远程拉取代码"></a>远程拉取代码</h2><h3 id="使用ssh远程登录服务器-然后执行git-pull-拉取代码-实现代码热更新"><a href="#使用ssh远程登录服务器-然后执行git-pull-拉取代码-实现代码热更新" class="headerlink" title="使用ssh远程登录服务器, 然后执行git pull 拉取代码, 实现代码热更新"></a>使用ssh远程登录服务器, 然后执行<code>git pull</code> 拉取代码, 实现代码热更新</h3><p>由于ssh无密码登录需要用到密钥, 所以首先需要注入私钥</p>
<p>如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">release-doc:</div><div class="line">    stage: deploy</div><div class="line">    script:</div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /mnt/data/docker-gollum/wiki &amp;&amp; git pull origin master&quot;</div><div class="line"></div><div class="line">`</div></pre></td></tr></table></figure>
<p>一个更详细的例子 [[通过gitlab-ci实现文件的自动部署]]</p>
<h2 id="通过Docker镜像实现自动部署"><a href="#通过Docker镜像实现自动部署" class="headerlink" title="通过Docker镜像实现自动部署"></a>通过Docker镜像实现自动部署</h2><p>见文章 [[GitLab-CI使用Docker进行持续部署]]</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.gitlab.com.cn/ce/ci/quick_start/README.html" target="_blank" rel="external">GitLab-CI快速开始-中文</a></li>
<li><a href="https://docs.gitlab.com/ce/ci/quick_start/README.html" target="_blank" rel="external">GitLab-CI快速开始-官方</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;假定已经安装好了&lt;code&gt;GitLab-Runners&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI简介</title>
    <link href="https://zacksleo.github.io/2017/04/26/GitLab-CI%E7%AE%80%E4%BB%8B/"/>
    <id>https://zacksleo.github.io/2017/04/26/GitLab-CI简介/</id>
    <published>2017-04-26T01:27:52.000Z</published>
    <updated>2017-05-30T02:49:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。</p>
<p>持续集成实现了DevOps, 使开发人员和运维人员从繁琐的工作中解放出来。另外，这种形式极大地提高了开发者的开发效率和开发质量。<br>持续集成有多种工具，如Jenkins. GitLab内置了GitLab-CI，通过配置一段<code>YAML</code>脚本来实现持续集成.</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>持续集成可以实现的功能:</p>
<ul>
<li>代码审核: 自动化代码规范审查, 甚至代码质量检查</li>
<li>自动化测试: 单元测试, 功能测试和验收测试</li>
<li>编译发布: 将源代码编译成可执行程序, 并将程序上传到托管发布平台实现自动发布</li>
<li>构建部署: 通过构建Docker镜像, 或登录远程服务器执行相关部署命令和脚本, 实现自动化部署</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>GitLab-CI 检测每次代码变动, 通过<code>.gitlab-ci.yml</code>脚本执行构建命令, 将命令发布到<code>GitLab-Runners(运行机)</code>上, 进而执行命令.</p>
<p><code>GitLab-Runners</code> 基于Docker执行持续集成的每项任务, 这样就解决了环境依赖问题.</p>
<p><code>GitLab-Runners</code>把实时将执行结果输出到GitLab网页上, 任务执行完后, 通过徽章标记和邮箱告知执行结果.</p>
<p>下一章: [[GitLab 快速开始]]</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="external">持续集成是什么</a></li>
<li><a href="https://about.gitlab.com/2015/12/14/getting-started-with-gitlab-and-gitlab-ci/" target="_blank" rel="external">Getting started with GitLab and GitLab CI</a></li>
<li><a href="https://about.gitlab.com/2016/08/05/continuous-integration-delivery-and-deployment-with-gitlab/" target="_blank" rel="external">Continuous Integration, Delivery, and Deployment with GitLab</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI使用Docker进行持续部署</title>
    <link href="https://zacksleo.github.io/2017/04/22/GitLab-CI%E4%BD%BF%E7%94%A8Docker%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/04/22/GitLab-CI使用Docker进行持续部署/</id>
    <published>2017-04-22T14:33:31.000Z</published>
    <updated>2017-05-30T02:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker login -u username -p password registry.demo.com</div><div class="line">docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</div><div class="line">docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</div></pre></td></tr></table></figure>
<p>其中 <code>username</code>是用户名, <code>password</code>是密码, <code>registry.demo.com</code>是私有镜像库地址,</p>
<p><code>$CI_PROJECT_NAME</code> 是GitLab-CI内置变量, 会自动替换为项目的名称, 这里也可以直接写死, 如</p>
<p><code>docker build -t registry.demo.com/repos/image-name:latest .</code></p>
<p><code>image-name</code>, 就是要构建的镜像名称, <code>latest</code>是TAG标签, <code>repos</code>是仓库的空间名称</p>
<p>在下面的例子中, 首先通过composer安装依赖库, 然后通过artifacts传递给构建任务, 构建完镜像将镜像发布到私有库,<br>部署时通过拉取最新的镜像库, 进行部署</p>
<blockquote>
<p>项目的deploy目录中, 放置一些配置文件, 如<code>Dockerfile</code>, <code>docker-compose.yml</code>等, 通过<code>rsync</code>同步到部署服务器上, 用于部署所需</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">image: zacksleo/docker-composer:1.1</div><div class="line"></div><div class="line">before_script:</div><div class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</div><div class="line">    - apk add rsync</div><div class="line">    - eval $(ssh-agent -s)</div><div class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</div><div class="line">    - chmod 0600 ~/deploy.key</div><div class="line">    - ssh-add ~/deploy.key</div><div class="line">    - mkdir -p ~/.ssh</div><div class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</div><div class="line">    - export APP_ENV=testing</div><div class="line"></div><div class="line">stages:</div><div class="line">    - prepare    </div><div class="line">    - build</div><div class="line">    - deploy</div><div class="line"></div><div class="line">variables:</div><div class="line">    COMPOSER_CACHE_DIR: &quot;/cache/composer&quot;</div><div class="line">    DOCKER_DRIVER: overlay</div><div class="line"></div><div class="line">installing-dependencies:</div><div class="line">    stage: prepare</div><div class="line">    script:</div><div class="line">        - composer install --prefer-dist -n --no-interaction -v --no-suggest</div><div class="line">    artifacts:</div><div class="line">        name: &quot;vendor&quot;</div><div class="line">        untracked: true</div><div class="line">        expire_in: 60 mins</div><div class="line">        paths:</div><div class="line">            - $CI_PROJECT_DIR/vendor    </div><div class="line">test-image:</div><div class="line">    stage: build</div><div class="line">    image: docker:latest</div><div class="line">    services:</div><div class="line">        - docker:dind</div><div class="line">    dependencies:</div><div class="line">        - installing-dependencies</div><div class="line">    script:</div><div class="line">        - docker login -u username -p password registry.demo.com</div><div class="line">        - docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</div><div class="line">        - docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</div><div class="line">testing-server:</div><div class="line">    stage: deploy</div><div class="line">    image: alpine</div><div class="line">    variables:</div><div class="line">        DEPLOY_SERVER: &quot;server-host&quot;</div><div class="line">    script:</div><div class="line">        - cd deploy</div><div class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats        </div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;docker login -u username -p password registry.demo.com&quot;</div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /data/$CI_PROJECT_NAME &amp;&amp; docker-compose stop &amp;&amp; docker-compose rm -f &amp;&amp; docker-compose pull &amp;&amp; docker-compose up -d&quot;</div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME chown www-data:www-data web/assets&quot;</div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME ./yii migrate/up --interactive=0&quot;</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/675eb504ly1fezvjdberyj20w30axdh2.jpg" alt=""></p>
<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://docs.gitlab.com/ce/ci/docker/using_docker_build.html" target="_blank" rel="external">Using Docker Build</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div cla
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI中的artifacts使用研究</title>
    <link href="https://zacksleo.github.io/2017/04/18/GitLab-CI%E4%B8%AD%E7%9A%84artifacts%E4%BD%BF%E7%94%A8%E7%A0%94%E7%A9%B6/"/>
    <id>https://zacksleo.github.io/2017/04/18/GitLab-CI中的artifacts使用研究/</id>
    <published>2017-04-18T15:56:44.000Z</published>
    <updated>2017-08-03T02:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在GitLab-CI中, <code>cache</code>与<code>artifacts</code>比较容易混淆.</p>
<p>其中 <code>cache</code> 指的是缓存, 常用于依赖安装中, 如几个<code>jobs</code>都需要安装相同的依赖, 可以使用<code>依赖</code>, 此时可以加快依赖的安装进度;<br>对于<code>artifacts</code>则是将某个<code>工件</code>上传到GitLab提供下载或后续操作使用, 由于每个<code>job</code>启动时, 都会自动删除<code>.gitignore</code>中指定的文件, 因此对于依赖安装目录, 即可以使用<code>cache</code>, 也可以使用<code>artifacts</code>.</p>
<p>两个主要有以下几个区别:</p>
<ol>
<li>虽然定义了<code>cache</code>, 但是如果<code>cache</code>和<code>.gitignore</code>中重复的这部分, 仍然需要重新安装</li>
<li>重新安装时因为使用的是缓存, 所以很有可能不是最新的</li>
<li>特别是开发环境, 如果每次都希望使用最新的更新, 应当删除<code>cache</code>, 使用<code>artifacts</code>, 这样可以保证确定的更新<br>4.<code>artifacts</code>中定义的部分, 会自动生成, 并可以传到下面的<code>job</code>中解压使用, 避免了重复依赖安装等工作</li>
<li>如果使用Docker运行Gitlab-Runner, <code>cache</code>会生成一些临时容器, 不容易清理</li>
<li><code>artifacts</code>可以设置自动过期时间, 过期自动删除</li>
<li><code>artifacts</code>会先传到GitLab服务器, 然后需要时再重新下载, 所以这部分也可以在GitLab下载和浏览</li>
</ol>
<h2 id="artifacts-的依赖使用"><a href="#artifacts-的依赖使用" class="headerlink" title="artifacts 的依赖使用"></a><code>artifacts</code> 的依赖使用</h2><p>下面是一个使用<code>artifacts</code>的例子, 首先有一个安装依赖的工作, 然后工作完成后, 会将安装文件转移到后续的工作时</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">installing-dependencies:</div><div class="line">    stage: prepare</div><div class="line">    script:</div><div class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</div><div class="line">        - composer dump-autoload --optimize</div><div class="line">    artifacts:</div><div class="line">        name: &quot;vendor&quot;</div><div class="line">        untracked: true</div><div class="line">        expire_in: 60 mins</div><div class="line">        paths:</div><div class="line">            - $CI_PROJECT_DIR/vendor    </div><div class="line">code-review:</div><div class="line">    stage: testing</div><div class="line">    dependencies:</div><div class="line">        - installing-dependencies</div><div class="line">    script:</div><div class="line">        - php vendor/bin/phpcs --config-set ignore_warnings_on_exit 1</div><div class="line">        - php vendor/bin/phpcs --standard=PSR2 -w --colors ./</div><div class="line">test-image:</div><div class="line">    stage: build</div><div class="line">    image: docker:latest</div><div class="line">    services:</div><div class="line">        - docker:dind</div><div class="line">    dependencies:</div><div class="line">        - installing-dependencies</div><div class="line">    script:        </div><div class="line">        - docker build -t $CI_PROJECT_NAME:latest .</div><div class="line">        - docker push domain.com/repos/$CI_PROJECT_NAME:latest</div><div class="line">    only:</div><div class="line">        - develop</div></pre></td></tr></table></figure>
<p>如果上述过程使用<code>cache</code>, 则会变成下面这样子, 注意, 此时每次都要执行<code>composer install</code>这样的依赖安装工作, 即<code>before_script</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">cache:</div><div class="line">    paths:</div><div class="line">        - vendor</div><div class="line">before_scritp:    </div><div class="line">    - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</div><div class="line">    - composer dump-autoload --optimize    </div><div class="line">code-review:</div><div class="line">    stage: testing    </div><div class="line">    script:</div><div class="line">        - php vendor/bin/phpcs --config-set ignore_warnings_on_exit 1</div><div class="line">        - php vendor/bin/phpcs --standard=PSR2 -w --colors ./</div><div class="line">test-image:</div><div class="line">    stage: build</div><div class="line">    image: docker:latest</div><div class="line">    services:</div><div class="line">        - docker:dind    </div><div class="line">    script:        </div><div class="line">        - docker build -t $CI_PROJECT_NAME:latest .</div><div class="line">        - docker push domain.com/repos/$CI_PROJECT_NAME:latest</div><div class="line">    only:</div><div class="line">        - develop</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">cache:</div><div class="line">    paths:</div><div class="line">        - vendor</div><div class="line">code-review:</div><div class="line">    stage: testing    </div><div class="line">    script:    </div><div class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</div><div class="line">        - composer dump-autoload --optimize     </div><div class="line">        - php vendor/bin/phpcs --config-set ignore_warnings_on_exit 1</div><div class="line">        - php vendor/bin/phpcs --standard=PSR2 -w --colors ./</div><div class="line">test-image:</div><div class="line">    stage: build</div><div class="line">    image: docker:latest</div><div class="line">    services:</div><div class="line">        - docker:dind    </div><div class="line">    script:        </div><div class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</div><div class="line">        - composer dump-autoload --optimize      </div><div class="line">        - docker build -t $CI_PROJECT_NAME:latest .</div><div class="line">        - docker push domain.com/repos/$CI_PROJECT_NAME:latest</div><div class="line">    only:</div><div class="line">        - develop</div></pre></td></tr></table></figure>
<p>否则, 会出现类似 <code>vendor not found</code>的问题</p>
<h2 id="禁用artifacts"><a href="#禁用artifacts" class="headerlink" title="禁用artifacts"></a>禁用artifacts</h2><p>  默认artifacts会自动在不同的stage中传输, 如果该stage中的job不需要artifacts, 则可以禁用artifacts, 以加速构建速度</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dependencies: []</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote>
<blockquote>
<p>使用<code>cache</code>会出现一个问题, 就是缓存有可能使用上次执行该<code>job</code>时的缓存, 不能保证某些文件最新</p>
</blockquote>
</blockquote>
<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://docs.gitlab.com/ce/user/project/pipelines/job_artifacts.html" target="_blank" rel="external">Introduction to job artifacts</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在GitLab-CI中, &lt;code&gt;cache&lt;/code&gt;与&lt;code&gt;artifacts&lt;/code&gt;比较容易混淆.&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;cache&lt;/code&gt; 指的是缓存, 常用于依赖安装中, 如几个&lt;code&gt;jobs&lt;/code&gt;都需要安装相同的依
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLabCI通过ssh进行自动部署</title>
    <link href="https://zacksleo.github.io/2017/04/14/GitLabCI%E9%80%9A%E8%BF%87ssh%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/04/14/GitLabCI通过ssh进行自动部署/</id>
    <published>2017-04-14T06:39:50.000Z</published>
    <updated>2017-05-30T02:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>通过gitlab-ci实现文件的自动部署</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>文档托管在gitlab上, 每次代码更新, 会自动出发gitlab-ci构建<br>在构建脚本中, 通过ssh 登录远程服务器执行git拉取文档的命令</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="首先需要在服务器上生成ssh证书"><a href="#首先需要在服务器上生成ssh证书" class="headerlink" title="首先需要在服务器上生成ssh证书"></a>首先需要在服务器上生成ssh证书</h3><blockquote>
<p>注意该证书的用户必须与ssh远程登录的用户一样, 例如我们的用户名是root</p>
</blockquote>
<h3 id="将公钥添加到gitlab上-以便于该用于可以拉取代码"><a href="#将公钥添加到gitlab上-以便于该用于可以拉取代码" class="headerlink" title="将公钥添加到gitlab上, 以便于该用于可以拉取代码"></a>将公钥添加到gitlab上, 以便于该用于可以拉取代码</h3><h3 id="在-CI-CD-Piplines中设置-Secret-Variables-包括-DEPLOY-SERVER-和-SSH-PRIVATE-KEY"><a href="#在-CI-CD-Piplines中设置-Secret-Variables-包括-DEPLOY-SERVER-和-SSH-PRIVATE-KEY" class="headerlink" title="在 CI/CD Piplines中设置 Secret Variables, 包括 DEPLOY_SERVER 和 SSH_PRIVATE_KEY"></a>在 <code>CI/CD Piplines</code>中设置 <code>Secret Variables</code>, 包括 <code>DEPLOY_SERVER</code> 和 <code>SSH_PRIVATE_KEY</code></h3><p>其中 <code>SSH_PRIVATE_KEY</code> 的内容是服务器上的私钥, <code>DEPLOY_SERVER</code> 是服务器地址</p>
<h3 id="编写-gitlab-ci-yml-文件-注入密钥-通过ssh执行远程命令"><a href="#编写-gitlab-ci-yml-文件-注入密钥-通过ssh执行远程命令" class="headerlink" title="编写 .gitlab-ci.yml 文件, 注入密钥, 通过ssh执行远程命令"></a>编写 <code>.gitlab-ci.yml</code> 文件, 注入密钥, 通过<code>ssh</code>执行远程命令</h3><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># 使用alpine镜像, 该镜像很少,只有几兆</div><div class="line">image: alpine</div><div class="line">stages:</div><div class="line">    - deploy</div><div class="line">before_script:</div><div class="line">    # 预先装 ssh-agent</div><div class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</div><div class="line">    # 启动服务</div><div class="line">    - eval $(ssh-agent -s)</div><div class="line">    # 将私钥写入deploy.key 文件</div><div class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; deploy.key</div><div class="line">    # 配置较低权限</div><div class="line">    - chmod 0600 deploy.key</div><div class="line">    # 注入密钥</div><div class="line">    - ssh-add deploy.key</div><div class="line">    - mkdir -p ~/.ssh    </div><div class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</div><div class="line"> </div><div class="line">release-doc:</div><div class="line">    stage: deploy</div><div class="line">    script:</div><div class="line">        # 连接远程服务器并执行拉取代码的命令</div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /path/to/wiki &amp;&amp; git pull origin master&quot;</div><div class="line">    only:</div><div class="line">        - master</div><div class="line">    environment:</div><div class="line">        name: production</div><div class="line">        url: http://$DEPLOY_SERVER</div></pre></td></tr></table></figure>
<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://docs.gitlab.com/ce/ci/ssh_keys/README.html" target="_blank" rel="external">Using SSH keys</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;通过gitlab-ci实现文件的自动部署&lt;/p&gt;
&lt;h2 id=&quot;实现过程&quot;&gt;&lt;a href=&quot;#实现过程&quot; class=&quot;headerli
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Git和Gollum搭建Wiki系统</title>
    <link href="https://zacksleo.github.io/2017/03/13/%E4%BD%BF%E7%94%A8Git%E5%92%8CGollum%E6%90%AD%E5%BB%BAWiki%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zacksleo.github.io/2017/03/13/使用Git和Gollum搭建Wiki系统/</id>
    <published>2017-03-12T17:22:09.000Z</published>
    <updated>2017-03-12T17:30:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/gollum/gollum" target="_blank" rel="external">Gollum</a>是一个开源的Wiki系统, 该系统基于Git, 支持 Markdown, RDoc 等多种排版格式.</p>
<p>下面是在搭建的过程中经常会遇到一些问题</p>
<h2 id="UTF-8-问题"><a href="#UTF-8-问题" class="headerlink" title="UTF-8 问题"></a>UTF-8 问题</h2><ul>
<li>安装 <code>gollum-rugged_adapter</code></li>
<li>通过参数 <code>--adapter rugged</code> 启动gollum</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install cmake</div><div class="line">sudo gem install gollum-rugged_adapter</div><div class="line">gollum --adapter rugged</div></pre></td></tr></table></figure>
<h2 id="如何设置只读"><a href="#如何设置只读" class="headerlink" title="如何设置只读"></a>如何设置只读</h2><p>启动Gollum时, 设置 <code>--no-edit</code> 来禁止编辑</p>
<h2 id="使用-Docker"><a href="#使用-Docker" class="headerlink" title="使用 Docker"></a>使用 Docker</h2><p>使用Docker 安装gullum的内容见 <a href="http://zacksleo.github.io/2017/03/11/gollum/">gollum</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/gollum/gollum&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gollum&lt;/a&gt;是一个开源的Wiki系统, 该系统基于Git, 支持 Markdown, RDoc 等多种排版格式.&lt;/p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gollum</title>
    <link href="https://zacksleo.github.io/2017/03/11/gollum/"/>
    <id>https://zacksleo.github.io/2017/03/11/gollum/</id>
    <published>2017-03-11T07:12:15.000Z</published>
    <updated>2017-03-11T07:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>incompatible character encodings: UTF-8 and ASCII-8BIT</p>
</blockquote>
<p>When use gollum , you may be got this error, below can helps you solves the problem.</p>
<ul>
<li>install <code>gollum-rugged_adapter</code></li>
<li>start gullom with <code>--adapter rugged</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install cmake</div><div class="line">sudo gem install gollum-rugged_adapter</div><div class="line">gollum --adapter rugged</div></pre></td></tr></table></figure>
<p>Here is a detailed demo for Dockerfile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">FROM ruby</div><div class="line">RUN apt-get -y update &amp;&amp; apt-get -y install libicu-dev</div><div class="line">RUN gem install gollum</div><div class="line">RUN gem install github-markdown org-ruby </div><div class="line"># RUN gem install --pre gollum-rugged_adapter</div><div class="line">RUN apt-get -y install cmake</div><div class="line">RUN gem install gollum-rugged_adapter</div><div class="line">VOLUME /docs</div><div class="line">WORKDIR /docs</div><div class="line">CMD [&quot;gollum&quot;, &quot;--port&quot;, &quot;80&quot;, &quot;--adapter&quot;, &quot;rugged&quot;]</div><div class="line">#CMD [&quot;gollum&quot;, &quot;--port&quot;, &quot;80&quot;]</div><div class="line"></div><div class="line">EXPOSE 80</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;incompatible character encodings: UTF-8 and ASCII-8BIT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When use gollum , you may be got this error, bel
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OAuth2中的Token</title>
    <link href="https://zacksleo.github.io/2017/03/09/OAuth2%E4%B8%AD%E7%9A%84Token/"/>
    <id>https://zacksleo.github.io/2017/03/09/OAuth2中的Token/</id>
    <published>2017-03-09T07:32:21.000Z</published>
    <updated>2017-03-11T06:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两个不同的Token"><a href="#两个不同的Token" class="headerlink" title="两个不同的Token"></a>两个不同的Token</h2><p>OAuth2 中主要有两个不同的Token, 其中的区别为是否与用户相关联, 即与用户相关的用户Token, 和与客户端相关的客户端Token,<br>可以通过用户Token, 查询到用户的相关信息, 客户端Token与用户无关, 一般只用于客户端认证</p>
<h2 id="用户Token"><a href="#用户Token" class="headerlink" title="用户Token"></a>用户Token</h2><blockquote>
<p>获取用户Token一般有两个方式, 授权码模式和密码模式</p>
</blockquote>
<h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><blockquote>
<p>授权码模式通过跳转到授权中心来获取token</p>
</blockquote>
<ul>
<li>跳转到认证服务器</li>
<li>认证服务器需要用户登录</li>
<li>用户选择是否授权</li>
<li>授权同意后, 自动跳转回原来的页面, 客户端拿到授权码</li>
<li>客户端凭借授权码, 在服务器上通过接口向认证服务器申请令牌</li>
</ul>
<h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><blockquote>
<p>密码模式通过接口直接申请到Token</p>
</blockquote>
<p>该接口需要几个参数, client_id, client_secret, grant_type, username, password</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;client_id&quot;: &quot;客户端ID&quot;,</div><div class="line">    &quot;client_secret&quot;: &quot;客户端密码&quot;,</div><div class="line">    &quot;grant_type&quot;: &quot;授权模式, 此外为 password&quot;,</div><div class="line">    &quot;username&quot;: &quot;用户名&quot;,</div><div class="line">    &quot;password&quot;: &quot;用户密码&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户端Token"><a href="#客户端Token" class="headerlink" title="客户端Token"></a>客户端Token</h2><blockquote>
<p>通过客户端ID和客户端密码来获取Token</p>
</blockquote>
<p>该Token与客户端相关, 与用于无关, 只用于客户端认证, 避免了接口泄露和滥用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;两个不同的Token&quot;&gt;&lt;a href=&quot;#两个不同的Token&quot; class=&quot;headerlink&quot; title=&quot;两个不同的Token&quot;&gt;&lt;/a&gt;两个不同的Token&lt;/h2&gt;&lt;p&gt;OAuth2 中主要有两个不同的Token, 其中的区别为是否与用户相关联,
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>API文档编码规范</title>
    <link href="https://zacksleo.github.io/2017/03/07/API%E6%96%87%E6%A1%A3%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://zacksleo.github.io/2017/03/07/API文档编码规范/</id>
    <published>2017-03-07T15:17:29.000Z</published>
    <updated>2017-03-07T15:17:29.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git工作流程及使用规范</title>
    <link href="https://zacksleo.github.io/2017/03/07/Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <id>https://zacksleo.github.io/2017/03/07/Git工作流程及使用规范/</id>
    <published>2017-03-07T15:17:17.000Z</published>
    <updated>2017-03-08T02:25:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul>
<li>master: 用于生产环境部署, 只接受合并请求, 不直接提交</li>
<li>testing: 用于测试环境测试</li>
<li>develop: 用于日常开发主线, 其他分支只能合并到 develop 分支</li>
<li>feature-xxx: 用于增加一个新功能</li>
<li>hotfix-xxx: 用于修复一个紧急bug</li>
<li>每次开发新功能，都应该新建一个单独的分支</li>
</ul>
<h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><ul>
<li>如果要贡献代码, 首先应阅读<strong>贡献指南</strong>, 确认如果贡献代码</li>
<li>Fork对应的项目, 然后基于develop分支, 新建一个分支, 在这个分支上进行开发</li>
<li>开发时应遵守相应的编码规范和Git日志规范, 提交日志应当给出完整扼要的提交信息</li>
<li>开发完毕后, 先在本项目库上合并到develop分支, 合并完成之后再PR到原项目库</li>
</ul>
<h3 id="Commit-message-和-Change-log-编写指南"><a href="#Commit-message-和-Change-log-编写指南" class="headerlink" title="Commit message 和 Change log 编写指南"></a>Commit message 和 Change log 编写指南</h3><ul>
<li>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交<br>+Commit message 遵从 <a href="http://blog.cheenwe.cn/2016-04-18/git-commit-message/" target="_blank" rel="external">Angular 规范</a></li>
</ul>
<h4 id="安装-Commitizen-来格式化-commit-使其遵循以上规范"><a href="#安装-Commitizen-来格式化-commit-使其遵循以上规范" class="headerlink" title="安装 Commitizen 来格式化 commit , 使其遵循以上规范"></a>安装 Commitizen 来格式化 commit , 使其遵循以上规范</h4><ul>
<li>首先注意将<code>package.json</code>和<code>node_modules</code>加入<code>.gitignore</code>文件</li>
<li>全局安装commitizen:  <code>npm install -g commitizen</code></li>
<li>在项目根目录初始化package.json:  <code>npm init --yes</code></li>
<li>项目根目录运行 <code>commitizen init cz-conventional-changelog --save --save-exact</code></li>
<li>每次提交代码时, 用 <code>git cz</code> 代替 <code>git commit</code></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="external">Git 使用规范流程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="external">Commit message 和 Change log 编写指南</a></li>
<li><a href="http://blog.cheenwe.cn/2016-04-18/git-commit-message/" target="_blank" rel="external">Git commit message 规范</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git工作流程&quot;&gt;&lt;a href=&quot;#Git工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git工作流程&quot;&gt;&lt;/a&gt;Git工作流程&lt;/h2&gt;&lt;h3 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML-CSS编码规范</title>
    <link href="https://zacksleo.github.io/2017/03/07/HTML-CSS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://zacksleo.github.io/2017/03/07/HTML-CSS编码规范/</id>
    <published>2017-03-07T15:16:53.000Z</published>
    <updated>2017-03-08T01:28:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Google-HTML-CSS代码风格指南"><a href="#Google-HTML-CSS代码风格指南" class="headerlink" title="Google HTML/CSS代码风格指南"></a>Google HTML/CSS代码风格指南</h2><p>遵循 <em>Google HTML/CSS</em> 代码风格指南编码规范</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://iischajn.github.io/trans/htmlcss-guide/" target="_blank" rel="external">http://iischajn.github.io/trans/htmlcss-guide/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Google-HTML-CSS代码风格指南&quot;&gt;&lt;a href=&quot;#Google-HTML-CSS代码风格指南&quot; class=&quot;headerlink&quot; title=&quot;Google HTML/CSS代码风格指南&quot;&gt;&lt;/a&gt;Google HTML/CSS代码风格指南&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript编码规范</title>
    <link href="https://zacksleo.github.io/2017/03/07/JavaScript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://zacksleo.github.io/2017/03/07/JavaScript编码规范/</id>
    <published>2017-03-07T15:16:38.000Z</published>
    <updated>2017-03-08T01:28:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Google-JavaScript-编码规范指南"><a href="#Google-JavaScript-编码规范指南" class="headerlink" title="Google JavaScript 编码规范指南"></a>Google JavaScript 编码规范指南</h2><p>JavaScript编码遵循Google JavaScript编码规范指南</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/google-js-style.html" target="_blank" rel="external">http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/google-js-style.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Google-JavaScript-编码规范指南&quot;&gt;&lt;a href=&quot;#Google-JavaScript-编码规范指南&quot; class=&quot;headerlink&quot; title=&quot;Google JavaScript 编码规范指南&quot;&gt;&lt;/a&gt;Google JavaScr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP编码规范</title>
    <link href="https://zacksleo.github.io/2017/03/07/PHP%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://zacksleo.github.io/2017/03/07/PHP编码规范/</id>
    <published>2017-03-07T15:16:16.000Z</published>
    <updated>2017-03-08T01:27:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PSR"><a href="#PSR" class="headerlink" title="PSR"></a>PSR</h2><blockquote>
<p>PSR 是 PHP Standard Recommendations 的简写，由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。</p>
</blockquote>
<p><strong>PHP编码遵循PSR的建议</strong></p>
<p>主要包括以下几个方面:</p>
<h3 id="PSR-1-基础编码规范"><a href="#PSR-1-基础编码规范" class="headerlink" title="PSR-1 基础编码规范"></a>PSR-1 基础编码规范</h3><h3 id="PSR-2-编码风格规范"><a href="#PSR-2-编码风格规范" class="headerlink" title="PSR-2 编码风格规范"></a>PSR-2 编码风格规范</h3><h3 id="PSR-3-志接口规范"><a href="#PSR-3-志接口规范" class="headerlink" title="PSR-3 志接口规范"></a>PSR-3 志接口规范</h3><h3 id="PSR-4-自动加载规范"><a href="#PSR-4-自动加载规范" class="headerlink" title="PSR-4 自动加载规范"></a>PSR-4 自动加载规范</h3><h3 id="PSR-6-缓存接口规范"><a href="#PSR-6-缓存接口规范" class="headerlink" title="PSR-6 缓存接口规范"></a>PSR-6 缓存接口规范</h3><h3 id="PSR-7-HTTP-消息接口规范"><a href="#PSR-7-HTTP-消息接口规范" class="headerlink" title="PSR-7 HTTP 消息接口规范"></a>PSR-7 HTTP 消息接口规范</h3><p>详细内容见: <a href="https://psr.phphub.org/" target="_blank" rel="external">https://psr.phphub.org/</a> 和 <a href="https://github.com/PizzaLiu/PHP-FIG" target="_blank" rel="external">https://github.com/PizzaLiu/PHP-FIG</a></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>代码审核时将遵守以上规范</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PSR&quot;&gt;&lt;a href=&quot;#PSR&quot; class=&quot;headerlink&quot; title=&quot;PSR&quot;&gt;&lt;/a&gt;PSR&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;PSR 是 PHP Standard Recommendations 的简写，由 PHP FIG 组织制定
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RESTful接口规范</title>
    <link href="https://zacksleo.github.io/2017/03/07/RESTful%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83/"/>
    <id>https://zacksleo.github.io/2017/03/07/RESTful接口规范/</id>
    <published>2017-03-07T15:14:35.000Z</published>
    <updated>2017-03-07T15:14:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful接口规范-1-0"><a href="#RESTful接口规范-1-0" class="headerlink" title="RESTful接口规范 [1.0]"></a>RESTful接口规范 [1.0]</h1><p><a href="./history">更新日志</a></p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>   使用https协议</p>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>   将API的版本号放入URL，如<a href="https://mqtt.lianluo.com/v1/" target="_blank" rel="external">https://mqtt.lianluo.com/v1/</a></p>
<h2 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h2><ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
</ul>
<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><ul>
<li>每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词</li>
<li>URI中的名词表示资源集合，使用复数形式。</li>
<li>不用大写；</li>
<li>用中杠-不用下杠_；</li>
<li>参数列表要encode；</li>
</ul>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><ul>
<li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li>
<li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li>
<li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li>
<li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li>
<li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li>
<li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li>
<li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li>
<li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li>
<li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li>
<li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li>
<li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li>
<li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li>
</ul>
<p>&gt;<br>1xx范围的状态码是保留给底层HTTP功能使用的，并且估计在你的职业生涯里面也用不着手动发送这样一个状态码出来。<br>2xx范围的状态码是保留给成功消息使用的，你尽可能的确保服务器总发送这些状态码给用户。<br>3xx范围的状态码是保留给重定向用的。大多数的API不会太常使用这类状态码，但是在新的超媒体样式的API中会使用更多一些。<br>4xx范围的状态码是保留给客户端错误用的。例如，客户端提供了一些错误的数据或请求了不存在的内容。这些请求应该是幂等的，不会改变任何服务器的状态。<br>5xx范围的状态码是保留给服务器端错误用的。这些错误常常是从底层的函数抛出来的，并且开发人员也通常没法处理。发送这类状态码的目的是确保客户端能得到一些响应。收到5xx响应后，客户端没办法知道服务器端的状态，所以这类状态码是要尽可能的避免。</p>
<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><ol>
<li>在HTTP请求Header中, 携带Accept-Language字段, 表明当前要使用的语言, 如</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Accept-Language: zh-CN</div></pre></td></tr></table></figure>
<p>以下是常用语言:</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accept-Language</td>
<td>zh-CN</td>
<td>简体中文</td>
</tr>
<tr>
<td style="text-align:center">Accept-Language</td>
<td>zh-TW</td>
<td>繁体中文</td>
</tr>
<tr>
<td style="text-align:center">Accept-Language</td>
<td>en-US</td>
<td>英文</td>
</tr>
</tbody>
</table>
<h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><p>所有错误可以在HTTP请求处, 统一处理</p>
<ol>
<li>发生错误时, 状态码大于400; 只有当状态码位于200-300区间时, 请求才成功</li>
<li>状态码为400,  404, 403, 406, 500 返回的JSON信息中, message为错误信息,如</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   &quot;message&quot;:&quot;验证失败_内容不能为空&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.状态码为 422(验证失败)时返回的信息为一个对象数组, 每个对象中包含field和message信息, 如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;field&quot;: &quot;verify_code&quot;,</div><div class="line">        &quot;message&quot;: &quot;短信验证码不正确&quot;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        &quot;field&quot;: &quot;phone&quot;,</div><div class="line">        &quot;message&quot;: &quot;手机号已被注册&quot;</div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>所有API请求结果的Header中携带X-Debug-Tag参数,该参数为请求的id<br>调试时, 打开/debug网址, 然后使用debug-tag过滤找到相应的请求</p>
<h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><ul>
<li>GET /collection：返回资源对象的列表（数组）</li>
<li>GET /collection/resource：返回单个资源对象</li>
<li>POST /collection：返回新生成的资源对象</li>
<li>PUT /collection/resource：返回完整的资源对象</li>
<li>PATCH /collection/resource：返回完整的资源对象</li>
<li>DELETE /collection/resource：返回一个空文档</li>
</ul>
<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>只用以下常见的3种body format：</p>
<ul>
<li>Content-Type: application/json (API使用的格式)</li>
<li>Content-Type: application/x-www-form-urlencoded (浏览器POST表单用的格式)</li>
</ul>
<h2 id="API携带超链接"><a href="#API携带超链接" class="headerlink" title="API携带超链接"></a>API携带超链接</h2><p>返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;link&quot;: &#123;</div><div class="line">  &quot;rel&quot;:   &quot;collection https://www.example.com/zoos&quot;,</div><div class="line">  &quot;href&quot;:  &quot;https://api.example.com/zoos&quot;,</div><div class="line">  &quot;title&quot;: &quot;List of zoos&quot;,</div><div class="line">  &quot;type&quot;:  &quot;application/vnd.yourformat+json&quot;</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API设计指南-阮一峰</a></li>
<li><a href="http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html" target="_blank" rel="external">Restful API的设计规范</a></li>
<li><a href="http://www.cnblogs.com/moonz-wu/p/4211626.html" target="_blank" rel="external">好RESTful API的设计原则</a></li>
<li><a href="https://github.com/cocoajin/http-api-design-ZH_CN" target="_blank" rel="external">HTTP API 设计指南</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP 接口设计指北</a></li>
<li><a href="https://github.com/aisuhua/restful-api-design-references" target="_blank" rel="external">RESTful API 设计参考文献列表</a></li>
<li><a href="http://blog.jobbole.com/41233/" target="_blank" rel="external">RESTful API 设计最佳实践</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RESTful接口规范-1-0&quot;&gt;&lt;a href=&quot;#RESTful接口规范-1-0&quot; class=&quot;headerlink&quot; title=&quot;RESTful接口规范 [1.0]&quot;&gt;&lt;/a&gt;RESTful接口规范 [1.0]&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;./his
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CentOS上安装docker-compose</title>
    <link href="https://zacksleo.github.io/2017/02/15/CentOS%E4%B8%8A%E5%AE%89%E8%A3%85docker-compose/"/>
    <id>https://zacksleo.github.io/2017/02/15/CentOS上安装docker-compose/</id>
    <published>2017-02-15T05:42:06.000Z</published>
    <updated>2017-02-15T05:52:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在安装完 docker 后, 我们常常安装 docker-compose 来简化 docker 的日常维护,<br>但是由于 GitHub 在国内较慢, 经常安装不了,所以使用 DaoCloud 提供的镜像来快速安装</p>
<h2 id="官方的安装方法"><a href="#官方的安装方法" class="headerlink" title="官方的安装方法"></a>官方的安装方法</h2><ol>
<li>安装 docker <code>yum install docker</code></li>
<li>安装 docker-compose</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ curl -L &quot;https://github.com/docker/compose/releases/download/1.10.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</div><div class="line"></div><div class="line">$ chmod +x /usr/local/bin/docker-compose</div></pre></td></tr></table></figure>
<h2 id="使用DaoCloud镜像安装-docker-compose"><a href="#使用DaoCloud镜像安装-docker-compose" class="headerlink" title="使用DaoCloud镜像安装 docker-compose"></a>使用DaoCloud镜像安装 docker-compose</h2><ol>
<li>安装 docker <code>yum install docker</code></li>
<li>安装 docker-compose<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl -L https://get.daocloud.io/docker/compose/releases/download/1.11.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</div><div class="line">chmod +x /usr/local/bin/docker-compose</div><div class="line"></div><div class="line">$ chmod +x /usr/local/bin/docker-compose</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Docker-镜像加速"><a href="#Docker-镜像加速" class="headerlink" title="Docker 镜像加速"></a>Docker 镜像加速</h2><p>由于下载镜像较慢, 可以使用 DaoCloud 提供的镜像对 Docker 进行加速  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://0835afe2.m.daocloud.io</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在安装完 docker 后, 我们常常安装 docker-compose 来简化 docker 的日常维护,&lt;br&gt;但是由于 GitHub 
    
    </summary>
    
    
  </entry>
  
</feed>
