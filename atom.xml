<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zacks&#39;s blog</title>
  
  <subtitle>the blog of zacks</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zacksleo.github.io/"/>
  <updated>2017-11-18T08:11:32.482Z</updated>
  <id>https://zacksleo.github.io/</id>
  
  <author>
    <name>zacksleo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitLab-CI使用CodeClimate评估代码质量</title>
    <link href="https://zacksleo.github.io/2017/10/25/GitLab-CI%E4%BD%BF%E7%94%A8CodeClimate%E8%AF%84%E4%BC%B0%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    <id>https://zacksleo.github.io/2017/10/25/GitLab-CI使用CodeClimate评估代码质量/</id>
    <published>2017-10-25T01:33:41.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Code Climate 是一个代码测试工具, 它可以帮助你进行代码冗余检测、质量评估，同时支持多种语言，如PHP, Ruby, JavaScript, CSS, Golang, Python 等。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="配置GitLab-Runner"><a href="#配置GitLab-Runner" class="headerlink" title="配置GitLab Runner"></a>配置GitLab Runner</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[[runners]]</span><br><span class="line">  ....</span><br><span class="line">  executor = &quot;docker&quot;</span><br><span class="line">  [runners.docker]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = &quot;docker:latest&quot;</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_cache = false</span><br><span class="line">    cache_dir = &quot;cache&quot;</span><br><span class="line">    volumes = [&quot;/cache&quot;, &quot;/var/run/docker.sock:/var/run/docker.sock&quot;, &quot;/tmp/builds:/builds&quot;]</span><br><span class="line">    shm_size = 0</span><br></pre></td></tr></table></figure><p>注意, 需要增加一个 <code>/tmp/builds:/builds</code> , 这里用于映射放代码。否则根据官方文档中的描述，无法正常实现</p><p>为了能使用宿主机的docker 缓存, 加快构建速度, 这里使用 sock 绑定的方式使用docker, 不使用 docker in docker </p><h3 id="配置-gitlab-ci-yml-文件"><a href="#配置-gitlab-ci-yml-文件" class="headerlink" title="配置 .gitlab-ci.yml 文件"></a>配置 .gitlab-ci.yml 文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeclimate:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="attr">docker:latest</span></span><br><span class="line"><span class="attr">  script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">docker</span> <span class="string">pull</span> <span class="string">codeclimate/codeclimate</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">VOLUME_PATH=/tmp/builds"$(echo</span> <span class="string">$PWD</span> <span class="string">| sed 's|^/[^/]*||')"</span></span><br><span class="line"><span class="string">    - docker run -v /tmp/cc:/tmp/cc -v $VOLUME_PATH:/code -v /var/run/docker.sock:/var/run/docker.sock codeclimate/codeclimate validate-config</span></span><br><span class="line"><span class="string">    - docker run --env CODECLIMATE_CODE="$VOLUME_PATH" -v /tmp/cc:/tmp/cc -v $VOLUME_PATH:/code -v /var/run/docker.sock:/var/run/docker.sock codeclimate/codeclimate analyze -f text</span></span><br></pre></td></tr></table></figure><h3 id="配置-codeclimate-yml"><a href="#配置-codeclimate-yml" class="headerlink" title="配置 .codeclimate.yml"></a>配置 .codeclimate.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">engines:</span></span><br><span class="line"><span class="attr">  duplication:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      languages:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">javascript</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">php</span></span><br><span class="line"><span class="attr">  csslint:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  eslint:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  fixme:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  phpmd:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ratings:</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"**.js"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"**.css"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"**.php"</span></span><br><span class="line"><span class="attr">exclude_paths:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tests/</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">vendor/</span></span><br></pre></td></tr></table></figure><p>相关配置请参考<a href="https://docs.codeclimate.com/docs" target="_blank" rel="noopener">官方文档</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.codeclimate.com/docs/list-of-engines" target="_blank" rel="noopener">CodeClimate支持的语言和引擎</a></li><li><a href="https://docs.codeclimate.com/docs/list-of-engines" target="_blank" rel="noopener">GitLab-CI配置CodeClimate</a></li><li><a href="https://blog.buzzell.io/codeclimate-in-gitlab-ci/" target="_blank" rel="noopener">CodeClimate in Gitlab CI</a></li><li><a href="https://docs.codeclimate.com/docs" target="_blank" rel="noopener">CodeClimate官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Code Climate 是一个代码测试工具, 它可以帮助你进行代码冗余检测、质量评估，同时支持多种语言，如PHP, Ruby, JavaS
      
    
    </summary>
    
    
      <category term="GitLab-CI" scheme="https://zacksleo.github.io/tags/GitLab-CI/"/>
    
      <category term="CodeClimate" scheme="https://zacksleo.github.io/tags/CodeClimate/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI使用Rsync进行持续部署</title>
    <link href="https://zacksleo.github.io/2017/09/08/GitLab-CI%E4%BD%BF%E7%94%A8Rsync%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/09/08/GitLab-CI使用Rsync进行持续部署/</id>
    <published>2017-09-08T04:52:37.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>rsync命令是一个远程数据同步工具</p><h2 id="主要参数"><a href="#主要参数" class="headerlink" title="主要参数"></a>主要参数</h2><ul><li><p>-r 递归目录</p></li><li><p>-t 保留修改时间</p></li><li><p>-v 详细日志</p></li><li><p>-h 输出数字以人类可读的格式</p></li><li><p>-z 在传输过程中压缩文件数据</p></li><li><p>-e 指定要使用的远程shell, 注意该过程需要注入SSH</p></li></ul><h2 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</span><br><span class="line">    - apk add rsync</span><br><span class="line">    - eval $(ssh-agent -s)</span><br><span class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</span><br><span class="line">    - chmod 0600 ~/deploy.key</span><br><span class="line">    - ssh-add ~/deploy.key</span><br><span class="line">    - mkdir -p ~/.ssh</span><br><span class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line">    - export APP_ENV=testing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testing-server:</span><br><span class="line">    stage: deploy</span><br><span class="line">    image: alpine</span><br><span class="line">    variables:</span><br><span class="line">        DEPLOY_SERVER: &quot;server-host&quot;</span><br><span class="line">    script:</span><br><span class="line">        - cd deploy</span><br><span class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>远程服务器需要安装rsync, 否则会出现 <code>bash: rsync: command not found</code> 错误</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://download.samba.org/pub/rsync/rsync.html" target="_blank" rel="noopener">官方文档</a></li><li>[[GitLabCI通过ssh进行自动部署]]</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;rsync命令是一个远程数据同步工具&lt;/p&gt;
&lt;h2 id=&quot;主要参数&quot;&gt;&lt;a href=&quot;#主要参数&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI使用LFTP进行持续部署</title>
    <link href="https://zacksleo.github.io/2017/09/08/GitLab-CI%E4%BD%BF%E7%94%A8LFTP%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/09/08/GitLab-CI使用LFTP进行持续部署/</id>
    <published>2017-09-08T04:52:22.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>LFTP是一款FTP客户端软件, 支持 FTP 、 FTPS 、 HTTP 、 HTTPS 、 SFTP 、 FXP 等多种文件传输协议。</p><p>本文介绍如何使用 LFTP 将文件同步到远程FTP服务器上, 从而实现自动部署</p><h2 id="mirror-命令及主要参数"><a href="#mirror-命令及主要参数" class="headerlink" title="mirror 命令及主要参数"></a>mirror 命令及主要参数</h2><ul><li><p>-R  反向传输, 因为是上传(put)到远程服务器, 所以使用该参数 (默认是从远程服务器下载)</p></li><li><p>-L  下载符号链接作为文件, 主要处理文件软链接的问题</p></li><li><p>-v  详细输出日志</p></li><li><p>-n  只传输新文件 (相同的旧文件不会传输, 大大提升了传输效率)</p></li><li><p>–transfer-all  传输所有文件, 不论新旧</p></li><li><p>–parallel  同时传输的文件数</p></li><li><p>–file  本地文件</p></li><li><p>–target-directory 目标目录</p></li></ul><h2 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    stage: deploy</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:</span><br><span class="line">        - apk add lftp</span><br><span class="line">        # 只上传新文件</span><br><span class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST; cd /wwwroot; mirror -RLnv ./ /wwwroot --ignore-time --parallel=50 --exclude-glob .git* --exclude .git/&quot;</span><br><span class="line">        # 指定目录覆盖上传 (强制更新)</span><br><span class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;mirror -RLv ./vendor/composer /wwwroot/vendor/composer --ignore-time --transfer-all --parallel=50 --exclude-glob .git* --exclude .git/&quot;</span><br><span class="line">        # 单独上传autoload文件(强制更新)</span><br><span class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;mirror -Rv --file=vendor/autoload.php --target-directory=/wwwroot/vendor/ --transfer-all&quot;</span><br><span class="line">    only:</span><br><span class="line">        - master</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://lftp.yar.ru/" target="_blank" rel="noopener">LFTP官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;LFTP是一款FTP客户端软件, 支持 FTP 、 FTPS 、 HTTP 、 HTTPS 、 SFTP 、 FXP 等多种文件传输协议。&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用phpmd对PHP项目进行静态代码分析</title>
    <link href="https://zacksleo.github.io/2017/08/23/%E4%BD%BF%E7%94%A8phpmd%E5%AF%B9PHP%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://zacksleo.github.io/2017/08/23/使用phpmd对PHP项目进行静态代码分析/</id>
    <published>2017-08-23T01:48:23.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PHPMD是与PMD类似的静态代码分析工具, 通过分析可以找出潜在的Bug或设计问题, 从而进一步提高代码质量</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>首先通过composer安装phpmd库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require phpmd/phpmd --dev --prefer-dist</span><br></pre></td></tr></table></figure><ul><li>运行phpmd命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vendor/bin/phpmd ./ text phpmd.xml --suffixes php</span><br></pre></td></tr></table></figure><p>phpmd.xml配置如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;ruleset name=&quot;PHPMD rule set for Yii 2&quot; xmlns=&quot;http://pmd.sf.net/ruleset/1.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd&quot;</span><br><span class="line">         xsi:noNamespaceSchemaLocation=&quot;http://pmd.sf.net/ruleset_xml_schema.xsd&quot;&gt;</span><br><span class="line">    &lt;description&gt;Custom PHPMD settings for naming, cleancode and controversial rulesets&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;rule ref=&quot;rulesets/naming.xml/ConstructorWithNameAsEnclosingClass&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/naming.xml/ConstantNamingConventions&quot; /&gt;</span><br><span class="line">    &lt;!-- Long variable names can help with better understanding so we increase the limit a bit --&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/naming.xml/LongVariable&quot;&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;property name=&quot;maximum&quot; value=&quot;25&quot; /&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line">    &lt;!-- method names like up(), gc(), ... are okay. --&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/naming.xml/ShortMethodName&quot;&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;property name=&quot;minimum&quot; value=&quot;2&quot; /&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line"></span><br><span class="line">    &lt;rule ref=&quot;rulesets/cleancode.xml&quot;&gt;</span><br><span class="line">        &lt;!-- else is not always bad. Disabling this as there is no way to differentiate between early return and normal else cases. --&gt;</span><br><span class="line">        &lt;exclude name=&quot;ElseExpression&quot; /&gt;</span><br><span class="line">        &lt;!-- Static access on Yii::$app is normal in Yii --&gt;</span><br><span class="line">        &lt;exclude name=&quot;StaticAccess&quot; /&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line"></span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/Superglobals&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCaseClassName&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCaseMethodName&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCaseParameterName&quot; /&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCaseVariableName&quot; /&gt;</span><br><span class="line">    &lt;!-- allow private properties to start with $_ --&gt;</span><br><span class="line">    &lt;rule ref=&quot;rulesets/controversial.xml/CamelCasePropertyName&quot;&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;property name=&quot;allow-underscore&quot; value=&quot;true&quot; /&gt;</span><br><span class="line">        &lt;/properties&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line">&lt;/ruleset&gt;</span><br></pre></td></tr></table></figure><h2 id="GitLab-CI-集成"><a href="#GitLab-CI-集成" class="headerlink" title="GitLab-CI 集成"></a>GitLab-CI 集成</h2><p>在.gitlab-ci.yml中添加一个任务, 用于执行静态分析, 一个典型的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">phpmd:</span><br><span class="line">    stage: testing</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:</span><br><span class="line">        - vendor/bin/phpmd api,backend,common,frontend,console text phpmd.xml --exclude console/migrations/ --suffixes php</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/phpmd/phpmd" target="_blank" rel="noopener">Github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;PHPMD是与PMD类似的静态代码分析工具, 通过分析可以找出潜在的Bug或设计问题, 从而进一步提高代码质量&lt;/p&gt;
&lt;h2 id=&quot;使用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeception中如何使用Fixtures优化测试</title>
    <link href="https://zacksleo.github.io/2017/08/22/Codeception%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Fixtures%E4%BC%98%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://zacksleo.github.io/2017/08/22/Codeception中如何使用Fixtures优化测试/</id>
    <published>2017-08-22T01:25:26.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Fixtures 是测试中非常重要的一部分。主要目的是建立一个固定/已知的环境状态以确保 测试可重复并且按照预期方式运行。</p><p>简答说就是Fixtures提供一种预填充数据的方式，即在测试前需要准备好哪些数据，以便测试可以正常展开，不受其他测试的影响。</p><p>一个 Fixture 可能依赖于其他的 Fixtures ，所定义的依赖会自动加载。</p><p>该方法相比于<code>dump.sql</code>的填充方法更加灵活, 且不会出去填充的冲突问题.</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="定义一个Fixtures"><a href="#定义一个Fixtures" class="headerlink" title="定义一个Fixtures"></a>定义一个Fixtures</h3><p>通过继成<code>yii\test\ActiveFixture</code>, 并声明 <code>modelClass</code> 来定义一个Fixtures , <code>depends</code>为要依赖的Fixtures, 可选。</p><p>Fixtures通常放置于<code>tests</code>目录中的<code>fixtures</code>目录下.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace tests\fixtures;</span><br><span class="line"></span><br><span class="line">use yii\test\ActiveFixture;</span><br><span class="line"></span><br><span class="line">class UserFixture extends ActiveFixture</span><br><span class="line">&#123;</span><br><span class="line">    public $modelClass = &apos;app\models\User&apos;;</span><br><span class="line">    public $depends = [&apos;app\tests\fixtures\UserFixture&apos;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置填充数据"><a href="#设置填充数据" class="headerlink" title="设置填充数据"></a>设置填充数据</h3><p>在 <code>@tests/fixtures/data</code>目录中,每个Fixtures添加一个数据文档</p><p>在位置 <code>@tests/fixtures/data/user.php</code> 中, 设置以下数据, 为要被插入用户表中的数据文件, <code>user1</code>和<code>user2</code>为别名, 方便调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">return [</span><br><span class="line">    &apos;user1&apos; =&gt; [</span><br><span class="line">        &apos;username&apos; =&gt; &apos;lmayert&apos;,</span><br><span class="line">        &apos;email&apos; =&gt; &apos;strosin.vernice@jerde.com&apos;,</span><br><span class="line">        &apos;auth_key&apos; =&gt; &apos;K3nF70it7tzNsHddEiq0BZ0i-OU8S3xV&apos;,</span><br><span class="line">        &apos;password&apos; =&gt; &apos;$2y$13$WSyE5hHsG1rWN2jV8LRHzubilrCLI5Ev/iK0r3jRuwQEs2ldRu.a2&apos;,</span><br><span class="line">    ],</span><br><span class="line">    &apos;user2&apos; =&gt; [</span><br><span class="line">        &apos;username&apos; =&gt; &apos;napoleon69&apos;,</span><br><span class="line">        &apos;email&apos; =&gt; &apos;aileen.barton@heaneyschumm.com&apos;,</span><br><span class="line">        &apos;auth_key&apos; =&gt; &apos;dZlXsVnIDgIzFgX4EduAqkEPuphhOh9q&apos;,</span><br><span class="line">        &apos;password&apos; =&gt; &apos;$2y$13$kkgpvJ8lnjKo8RuoR30ay.RjDf15bMcHIF7Vz1zz/6viYG5xJExU6&apos;,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在测试用例中, 通过定义<code>_fixtures方法</code>, 声明需要使用的Fixtures及填充数据文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @var \UnitTester</span><br><span class="line"> */</span><br><span class="line">protected $tester;</span><br><span class="line"></span><br><span class="line">public function _fixtures()</span><br><span class="line">&#123;</span><br><span class="line">    return [</span><br><span class="line">        &apos;users&apos; =&gt; [</span><br><span class="line">            &apos;class&apos; =&gt; UserFixture::className(),</span><br><span class="line">            &apos;dataFile&apos; =&gt; &apos;@tests/fixtures/data/user.php&apos;</span><br><span class="line">        ],</span><br><span class="line">        &apos;profiles&apos; =&gt; [</span><br><span class="line">            &apos;class&apos; =&gt; UserProfileFixture::className(),</span><br><span class="line">            &apos;dataFile&apos; =&gt; &apos;@tests/fixtures/data/user_profile.php&apos;</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过如下方法, 可以获取插入的记录, 返回值为该Fixture类中对应的<code>modelClass</code>的一个实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$user = $this-&gt;tester-&gt;grabFixture(&apos;users&apos;, &apos;default&apos;);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.yiichina.com/doc/guide/2.0/test-fixtures" target="_blank" rel="noopener">Fixtures</a><br><a href="http://www.yiiframework.com/doc-2.0/guide-test-fixtures.html" target="_blank" rel="noopener">Fixtures</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Fixtures 是测试中非常重要的一部分。主要目的是建立一个固定/已知的环境状态以确保 测试可重复并且按照预期方式运行。&lt;/p&gt;
&lt;p&gt;简
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>欢迎访问我的博客</title>
    <link href="https://zacksleo.github.io/2017/07/20/README/"/>
    <id>https://zacksleo.github.io/2017/07/20/README/</id>
    <published>2017-07-20T01:33:12.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zacks’-Blog"><a href="#zacks’-Blog" class="headerlink" title="zacks’ Blog"></a>zacks’ Blog</h1><p>首页: <a href="https://zacksleo.github.io/">https://zacksleo.github.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zacks’-Blog&quot;&gt;&lt;a href=&quot;#zacks’-Blog&quot; class=&quot;headerlink&quot; title=&quot;zacks’ Blog&quot;&gt;&lt;/a&gt;zacks’ Blog&lt;/h1&gt;&lt;p&gt;首页: &lt;a href=&quot;https://zacksleo.gith
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Composer创建公共类库</title>
    <link href="https://zacksleo.github.io/2017/07/20/%E4%BD%BF%E7%94%A8Composer%E5%88%9B%E5%BB%BA%E5%85%AC%E5%85%B1%E7%B1%BB%E5%BA%93/"/>
    <id>https://zacksleo.github.io/2017/07/20/使用Composer创建公共类库/</id>
    <published>2017-07-20T01:33:12.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>如果多个项目中存在使用相同类库、模块的情况，此时可以考虑将类库或者模块单独抽取出来，形成独立类库，通过composer<br>来进行依赖管理，这样可以更方便维护，大大提升开发效率。</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>可以对特定模块进行统一维护和升级</li><li>特定的类库可由专人进行维护，保证稳定性和可靠性</li><li>避免了重复开发的情况</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="本地开发"><a href="#本地开发" class="headerlink" title="本地开发"></a>本地开发</h3><p>为了方便调试，可先在本地现有项目中开发类库，等到开发完成后，再将相关代码单独抽取出来。</p><ul><li>首先在项目中创建一个存放类库的目录，如<code>packages/zacksleo/my-libs</code>,</li></ul><p>其中<code>packages</code>是类库总目录， <code>zacksleo</code>是用户名，相当于命名空间的第一级，<code>my-libs</code>是类库存放目录。</p><ul><li>在目录中创建<code>composer.json</code> 文件，并添加形如以下的内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;zacksleo/my-libs&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;my libs&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;library&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;authors&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;zacksleo&quot;,</span><br><span class="line">      &quot;email&quot;: &quot;zacksleo@gmail.com&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;minimum-stability&quot;: &quot;stable&quot;,</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;zacksleo\\my\\libs\\&quot;: &quot;src&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>name</code>是类库名称，<code>descrption</code>是详细说明，<code>type</code>是类别，<code>license</code>是使用的协议，<code>authers</code>是作者信息，</p><p><code>minimum-stability</code> 用来声明最小依赖，通常有<code>dev</code>和 <code>stable</code>可选，<code>autoload</code>中的<code>psr-4</code>声明了</p><p>命名空间和对应的目录，注意命名空间就当使用双反斜杠，目录使用相对路径，此外声明了目录为`src``目录</p><ul><li><p>在<code>src</code>目录中添加相关代码，其中的类使用命名空间<code>zacksleo\\my\\libs</code></p></li><li><p>在项目的<code>composer.json</code>中，通过<code>path</code>方式引入本地类库，如可在<code>repositories</code>中添加如下信息：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;repositories&quot;: &#123;</span><br><span class="line">  &quot;my-libs&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;path&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;packages/zacksleo/my-libs&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>my-libs</code>是别名，可任意填写，<code>type</code>设置成<code>path</code>, <code>url</code>为类库所在的相对路径（与composer.json文件相对）</p><ul><li>通过<code>composer require</code>命令或者在<code>composer.json</code>中的<code>require</code>部分添加声音，来实现依赖加载，如</li></ul><p><code>composer require zacksleo/my-libs</code></p><h3 id="在Github上创建库并上传代码"><a href="#在Github上创建库并上传代码" class="headerlink" title="在Github上创建库并上传代码"></a>在Github上创建库并上传代码</h3><p>当在本地开发完成后，可将类库独立抽取出来（此处的<code>my-libs</code>目录下的内容），并提交到Github上新建的仓库中</p><h3 id="配置packagist并发布"><a href="#配置packagist并发布" class="headerlink" title="配置packagist并发布"></a>配置packagist并发布</h3><ol><li>先在packagist.org中注册好账号，以便发布包。</li><li>在Github的仓库中，点击<code>settings</code>，找到 <code>Intergrations &amp; services</code>, 点击<code>Add servies</code>, 选择<code>Packagist</code>,</li></ol><p>填写在packagist.org注册的用户名和Token(在<a href="https://packagist.org/profile/" target="_blank" rel="noopener">Profile</a>中找到Your API Token)</p><p>点击确定添加，这样，每次Github的变动，都会自动更新到packagist上，免去了手动更新的麻烦</p><h3 id="本地依赖改成线上版本-并清除开发代码"><a href="#本地依赖改成线上版本-并清除开发代码" class="headerlink" title="本地依赖改成线上版本, 并清除开发代码"></a>本地依赖改成线上版本, 并清除开发代码</h3><p>类库一经发布到packagist上后，就可将本地项目<code>composer.json</code>添加的<code>repositories</code>移除，重新运行<code>composer install</code>，</p><p>来安装packagist上的版本，同时<code>packages</code> 目录亦可删除。</p><h2 id="版本问题说明"><a href="#版本问题说明" class="headerlink" title="版本问题说明"></a>版本问题说明</h2><p>composer使用语义化的版本进行依赖管理，因此类库在更新和发布时，所标记的版本号，也就当遵循<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化的版本规范</a>。</p><p>基主要有以下几个内容：</p><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ol><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li><li>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://docs.phpcomposer.com/" target="_blank" rel="noopener">Composer中文文档</a></li><li><a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化的版本规范</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;如果多个项目中存在使用相同类库、模块的情况，此时可以考虑将类库或者模块单独抽取出来，形成独立类库，通过composer&lt;br&gt;来进行依赖管理
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI实现自动化测试</title>
    <link href="https://zacksleo.github.io/2017/05/30/GitLab-CI%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>https://zacksleo.github.io/2017/05/30/GitLab-CI实现自动化测试/</id>
    <published>2017-05-30T02:37:33.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitLab-Ci实现自动化测试"><a href="#GitLab-Ci实现自动化测试" class="headerlink" title="GitLab-Ci实现自动化测试"></a>GitLab-Ci实现自动化测试</h1><blockquote><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p></blockquote><p>使用自动化测试, 可以提高软件的质量和可靠性, 今早发现其中的缺陷和问题, 以便即时改正.</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>首先需要一个满足运行自动化测试的Docker镜像, 以便后面运行测试代码, 例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image: zacksleo/docker-composer:develop</span><br></pre></td></tr></table></figure><h2 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h2><p>某些测试需要使用额外的服务, 如数据库、缓存服务器等等, 并通过<code>variables</code>配置服务中的一些变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">services:</span><br><span class="line">    - mysql:5.6</span><br><span class="line">    - redis:latest</span><br><span class="line">variables:</span><br><span class="line">    MYSQL_ROOT_PASSWORD: root</span><br><span class="line">    MYSQL_DATABASE: web</span><br><span class="line">    MYSQL_USER: web</span><br><span class="line">    MYSQL_PASSWORD: web</span><br></pre></td></tr></table></figure><h2 id="声明依赖工件"><a href="#声明依赖工件" class="headerlink" title="声明依赖工件"></a>声明依赖工件</h2><p>一般在测试前要进行准备过程, 如安装依赖库或者编译等, 可将上述过程生成的的文件, 通过依赖声明, 传递过来, 这样可以比避免重复执行相关过程.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">installing-dependencies:</span><br><span class="line">    stage: prepare</span><br><span class="line">    script:</span><br><span class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</span><br><span class="line">        - composer dump-autoload --optimize</span><br><span class="line">    artifacts:</span><br><span class="line">        name: &quot;vendor&quot;</span><br><span class="line">        untracked: true</span><br><span class="line">        expire_in: 60 mins</span><br><span class="line">        paths:</span><br><span class="line">            - $CI_PROJECT_DIR/vendor</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">    - installing-dependencies</span><br></pre></td></tr></table></figure><h2 id="配置测试脚本"><a href="#配置测试脚本" class="headerlink" title="配置测试脚本"></a>配置测试脚本</h2><p>  假定你已经在本地编写好了测试代码, 并且可以本地运行, 那么就可以通过调整和适配, 让测试可以在GitLab-CI中自动化执行, 在下面的例子中,</p><p>  测试代码位于<code>tests</code>目录,并且<code>.env</code>中配置了一些环境变量, 该文件的作用是为了让不同环境使用不同的一组变量, 如数据库、接口地址、账号等等，<br>  这样做的目录可以尽量少的变更代码，保持核心代码的稳定性和适应能力， 通过<code>php -S</code> 启动了一个本地接口服务, 最后调用api测试, 对所有接口<br>  进行测试</p><p>  在下面的例子中, 还声明了<code>coverage</code>, 这个用来说明代码测试覆盖率的取得方法, 因为在测试中会将覆盖率输出(<code>--coverage --no-colors</code>),<br>  GitLab-CI 通过正则匹配输出内容, 读取到覆盖率, 从而显示在项目徽标处  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">    - installing-dependencies</span><br><span class="line">script:</span><br><span class="line">    - cp tests/.env .env</span><br><span class="line">    - ./yii migrate/up --interactive=0</span><br><span class="line">    - php -S localhost:80 --docroot api/tests &amp;&gt;/dev/null&amp;</span><br><span class="line">    - ./vendor/bin/codecept run api -c tests --coverage --no-colors</span><br><span class="line"></span><br><span class="line">    coverage: &apos;/^\s*Lines:\s*\d+.\d+\%/&apos;</span><br></pre></td></tr></table></figure><h2 id="测试失败如何处理"><a href="#测试失败如何处理" class="headerlink" title="测试失败如何处理"></a>测试失败如何处理</h2><p>  当测试失败后, 除了查看<code>Pipline</code>中的任务输出, 我们还应当详细查看测试中的相关日志, 下面这里, 将需要查看的文件生成工件, 在GitLab中下载,<br>  然后可以在本地详细查看, <code>when</code>说明了仅在测试失败时, 才生成工件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">artifacts:</span><br><span class="line">    name: &quot;debug&quot;</span><br><span class="line">    when: on_failure</span><br><span class="line">    untracked: true</span><br><span class="line">    expire_in: 60 mins</span><br><span class="line">    paths:</span><br><span class="line">        - $CI_PROJECT_DIR/api/runtime</span><br><span class="line">        - $CI_PROJECT_DIR/tests/_output</span><br></pre></td></tr></table></figure><h2 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h2><p>下面是一个完整的API自动化测试的盒子</p><pre><code>api-test:    stage: testing    services:        - mysql:5.6        - redis:latest    variables:        MYSQL_ROOT_PASSWORD: root        MYSQL_DATABASE: web        MYSQL_USER: web        MYSQL_PASSWORD: web    dependencies:        - installing-dependencies    script:        - cp tests/.env .env        - ./yii migrate/up --interactive=0        - php -S localhost:80 --docroot api/tests &amp;&gt;/dev/null&amp;        - ./vendor/bin/codecept run api -c tests    artifacts:        name: &quot;debug&quot;        when: on_failure        untracked: true        expire_in: 60 mins        paths:            - $CI_PROJECT_DIR/api/runtime            - $CI_PROJECT_DIR/tests/_output    only:        - develop        - master</code></pre><p>关于持续集成完整的项目, 请查看 <a href="https://github.com/zacksleo/yii2-app-advanced" target="_blank" rel="noopener">zacksleo/yii2-app-advanced</a> 项目</p><p>  <a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html" target="_blank" rel="noopener">使用Docker镜像</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitLab-Ci实现自动化测试&quot;&gt;&lt;a href=&quot;#GitLab-Ci实现自动化测试&quot; class=&quot;headerlink&quot; title=&quot;GitLab-Ci实现自动化测试&quot;&gt;&lt;/a&gt;GitLab-Ci实现自动化测试&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;持
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从PHP到Python-两种编程语言的异同</title>
    <link href="https://zacksleo.github.io/2017/05/21/%E4%BB%8EPHP%E5%88%B0Python-%E4%B8%A4%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E5%BC%82%E5%90%8C/"/>
    <id>https://zacksleo.github.io/2017/05/21/从PHP到Python-两种编程语言的异同/</id>
    <published>2017-05-21T14:08:21.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><ol><li>两者都是胶水语言, 不需要编译, 逐行运行, 因此报错时可以追中到行</li><li>主流都是用C实现的, 因此底层仍然是C</li></ol><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ol><li>PHP与Python在代码格式上有非常大的不同, 首先最明显的一个区别就是, 没有大括号包裹函数和类库.</li><li>Python使用缩进来替代大括号的功能, 开始的时候可能会让你不太习惯, 不过时间长了, 也就慢慢接受了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;语言&quot;&gt;&lt;a href=&quot;#语言&quot; class=&quot;headerlink&quot; title=&quot;语言&quot;&gt;&lt;/a&gt;语言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;两者都是胶水语言, 不需要编译, 逐行运行, 因此报错时可以追中到行&lt;/li&gt;
&lt;li&gt;主流都是用C实现的, 因此底层仍然是C&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何编写GitLab-CI配置文件</title>
    <link href="https://zacksleo.github.io/2017/04/27/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99GitLab-CI%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>https://zacksleo.github.io/2017/04/27/如何编写GitLab-CI配置文件/</id>
    <published>2017-04-27T07:45:00.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在根目录新建<code>.gitlab-ci.yml</code>文件.</p><p>该文件与项目其他文件一样, 同样受到版本控制, 所以可以在不同的分支下, 配置不同的持续集成脚本</p><h2 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h2><p>配置文件遵循YAML语法, 关于该语法的内容, 自行搜索</p><p>参考 <a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言教程</a></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><h3 id="根主要关键词一览"><a href="#根主要关键词一览" class="headerlink" title="根主要关键词一览"></a>根主要关键词一览</h3><table><thead><tr><th>关键词</th><th>含义</th><th>可选</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>声明使用的Docker镜像</td><td>为空时使用默认镜像</td><td>该镜像应当满足脚本执行的环境依赖</td></tr><tr><td>services</td><td>Docker镜像使用的服务, 通过链接的方式来调用所需服务</td><td>可空</td><td>常用于链接数据库</td></tr><tr><td>stages</td><td>定义构建阶段</td><td>为空时, 单纯定义jobs</td><td>项目的构建分为多个阶段, 例如: 安装依赖/准备, 编译, 测试, 发布等, 同时每个阶段包含若干任务</td></tr><tr><td>before_script</td><td>定义每个job之前执行的脚本</td><td>可空</td><td>每个job启动时会先执行该脚本</td></tr><tr><td>after_script</td><td>定义每个job之后执行的脚本</td><td>可空</td><td>同上</td></tr><tr><td>variables</td><td>定义变量</td><td>可空</td><td>同上</td></tr><tr><td>cache</td><td>定义与后续job之间应缓存的文件</td><td>可空</td><td>同上</td></tr></tbody></table><p>Demo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">image: aipline</span><br><span class="line">services:</span><br><span class="line">    - mysql</span><br><span class="line">    - redis</span><br><span class="line">stages:</span><br><span class="line">    - build</span><br><span class="line">    - test</span><br><span class="line">    - deploy</span><br><span class="line">before_script:</span><br><span class="line">    - bundle install  </span><br><span class="line">after_script:</span><br><span class="line">    - rm secrets</span><br><span class="line">cache:</span><br><span class="line">    paths:</span><br><span class="line">    - binaries/</span><br><span class="line">    - .config</span><br></pre></td></tr></table></figure><h3 id="Jobs中的关键词"><a href="#Jobs中的关键词" class="headerlink" title="Jobs中的关键词"></a>Jobs中的关键词</h3><p>jobs中存在一些与根中相同的关键词, 这些一旦定义, 则会向前覆盖, 即根中定义的则不会在该job执行</p><p>job 这里译为<strong>任务</strong></p><table><thead><tr><th>关键词</th><th>含义</th><th>可选</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>声明任务使用的Docker镜像</td><td>为空时使用根中的定义</td><td>该镜像应当满足脚本执行的环境依赖</td></tr><tr><td>services</td><td>任务中Docker镜像使用的服务, 通过链接的方式来调用所需服务</td><td>可空</td><td>常用于链接数据库</td></tr><tr><td>stage</td><td>所属构建阶段</td><td>为空时则不使用stages</td><td>一个任务属于一个构建阶段</td></tr><tr><td>before_script</td><td>定义每个job之前执行的脚本</td><td>可选</td><td>如果在job中定义则会覆盖根中的内容</td></tr><tr><td>script</td><td>定义每个job执行的脚本</td><td>必须</td><td></td></tr><tr><td>after_script</td><td>定义每个job之后执行的脚本</td><td>可选</td><td>同上</td></tr><tr><td>variables</td><td>定义任务中使用的变量</td><td>可选</td><td>同上</td></tr><tr><td>cache</td><td>定义与后续job之间应缓存的文件</td><td>可选</td><td>同上</td></tr><tr><td>only</td><td>指定应用的Git分支</td><td>可选</td><td>可以是分支名称, 可用正则匹配分支, 也可是tags来指定打过标签的分支</td></tr><tr><td>except</td><td>排除应用的Git分支</td><td>可选</td><td>同上</td></tr><tr><td>tags</td><td>指定执行的GitLab-Runners</td><td>可选</td><td>通过匹配Runners的标签选定</td></tr><tr><td>allow_failure</td><td>允许失败</td><td>默认为false</td><td>如果允许失败, 本次任务不会影响整个构建的结果</td></tr><tr><td>when</td><td>定义合适执行任务</td><td>默认为always</td><td>有<code>on_success</code>, <code>on_failure</code>, <code>always</code> or <code>manual</code>可选</td></tr><tr><td>dependencies</td><td>定义合任务所需要的工件</td><td>可空</td><td>需要首先定义工件</td></tr><tr><td>artifacts</td><td>定义工件</td><td>可空</td><td>工件中指定的目录会在任务执行成功后压缩传到GitLab, 后面需要该工件的任务执行时, 再自行下载解压</td></tr><tr><td>environment</td><td>定义环境</td><td>可空</td><td>在部署任务中, 定义该任务所属的环境</td></tr></tbody></table><p>Demo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">installing-dependencies:</span><br><span class="line">    script:</span><br><span class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</span><br><span class="line">        - composer dump-autoload --optimize</span><br><span class="line">    artifacts:</span><br><span class="line">        name: &quot;vendor&quot;</span><br><span class="line">        untracked: true</span><br><span class="line">        expire_in: 60 mins</span><br><span class="line">        paths:</span><br><span class="line">            - vendor/    </span><br><span class="line">docker-build-image:    </span><br><span class="line">    stage: test</span><br><span class="line">    only:</span><br><span class="line">        - master</span><br><span class="line">    except:</span><br><span class="line">        - develop</span><br><span class="line">    tags:</span><br><span class="line">        - ruby</span><br><span class="line">        - postgres</span><br><span class="line">    allow_failure: true</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:        </span><br><span class="line">        - docker build -t registry.com/mops/image:latest .</span><br><span class="line">        - docker push registry.com/mops/image:latest</span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>jobs的名称不能重名</li><li>同一阶段中的任务, 是并行执行的</li><li>上一阶段所有任务执行完后, 才会进入下一阶段</li><li>定义工件时, 务必定义工件的过期时间, 否则工件会一直寸在GitLab上, 占用空间</li><li>如果需要在任务中传递文件, 优先选择使用 <code>dependencies</code> (结合<code>artifacts</code>)</li></ol><h2 id="验证配置文件合法性"><a href="#验证配置文件合法性" class="headerlink" title="验证配置文件合法性"></a>验证配置文件合法性</h2><p>在GitLab中, 打开 <code>/ci/lint</code>网址, 将配置文件粘贴在些, 进行验证</p><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul><li><a href="https://docs.gitlab.com.cn/ce/ci/yaml/README.html" target="_blank" rel="noopener">配置构建任务</a></li><li><a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">Configuration of your jobs with .gitlab-ci.yml</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建文件&quot;&gt;&lt;a href=&quot;#创建文件&quot; class=&quot;headerlink&quot; title=&quot;创建文件&quot;&gt;&lt;/a&gt;创建文件&lt;/h2&gt;&lt;p&gt;在根目录新建&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;文件.&lt;/p&gt;
&lt;p&gt;该文件与项目其他文件一样, 同样受到
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI快速开始</title>
    <link href="https://zacksleo.github.io/2017/04/26/GitLab-CI%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>https://zacksleo.github.io/2017/04/26/GitLab-CI快速开始/</id>
    <published>2017-04-26T01:58:09.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>假定已经安装好了<code>GitLab-Runners</code></p></blockquote><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World !"></a>Hello World !</h2><h3 id="在仓库根目录创建-gitlab-ci-yml-文件-内容如下"><a href="#在仓库根目录创建-gitlab-ci-yml-文件-内容如下" class="headerlink" title="在仓库根目录创建 .gitlab-ci.yml 文件, 内容如下"></a>在仓库根目录创建 <code>.gitlab-ci.yml</code> 文件, 内容如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">job-1:</span><br><span class="line">  script:</span><br><span class="line">    - echo &quot;Hello World&quot;</span><br></pre></td></tr></table></figure><h3 id="这样-在每次提交代码后-都会自动执行以上脚本-其中job-1是任务名称-可以定义多个任务"><a href="#这样-在每次提交代码后-都会自动执行以上脚本-其中job-1是任务名称-可以定义多个任务" class="headerlink" title="这样, 在每次提交代码后, 都会自动执行以上脚本. 其中job-1是任务名称, 可以定义多个任务,"></a>这样, 在每次提交代码后, 都会自动执行以上脚本. 其中<code>job-1</code>是任务名称, 可以定义多个任务,</h3><p><code>script</code>下面是 shell 命令, 只要命令执行成功, 就代表本次构建通过(出现passed标记)</p><p>如图</p><p><img src="http://ww1.sinaimg.cn/large/675eb504gy1fezux5o1v6j21200dejur.jpg" alt=""></p><h3 id="这样-一次简单的持续集成已经搞定了"><a href="#这样-一次简单的持续集成已经搞定了" class="headerlink" title="这样, 一次简单的持续集成已经搞定了."></a>这样, 一次简单的持续集成已经搞定了.</h3><h2 id="远程拉取代码"><a href="#远程拉取代码" class="headerlink" title="远程拉取代码"></a>远程拉取代码</h2><h3 id="使用ssh远程登录服务器-然后执行git-pull-拉取代码-实现代码热更新"><a href="#使用ssh远程登录服务器-然后执行git-pull-拉取代码-实现代码热更新" class="headerlink" title="使用ssh远程登录服务器, 然后执行git pull 拉取代码, 实现代码热更新"></a>使用ssh远程登录服务器, 然后执行<code>git pull</code> 拉取代码, 实现代码热更新</h3><p>由于ssh无密码登录需要用到密钥, 所以首先需要注入私钥</p><p>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">release-doc:</span><br><span class="line">    stage: deploy</span><br><span class="line">    script:</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /mnt/data/docker-gollum/wiki &amp;&amp; git pull origin master&quot;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>一个更详细的例子 [[通过gitlab-ci实现文件的自动部署]]</p><h2 id="通过Docker镜像实现自动部署"><a href="#通过Docker镜像实现自动部署" class="headerlink" title="通过Docker镜像实现自动部署"></a>通过Docker镜像实现自动部署</h2><p>见文章 [[GitLab-CI使用Docker进行持续部署]]</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.gitlab.com.cn/ce/ci/quick_start/README.html" target="_blank" rel="noopener">GitLab-CI快速开始-中文</a></li><li><a href="https://docs.gitlab.com/ce/ci/quick_start/README.html" target="_blank" rel="noopener">GitLab-CI快速开始-官方</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;假定已经安装好了&lt;code&gt;GitLab-Runners&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI简介</title>
    <link href="https://zacksleo.github.io/2017/04/26/GitLab-CI%E7%AE%80%E4%BB%8B/"/>
    <id>https://zacksleo.github.io/2017/04/26/GitLab-CI简介/</id>
    <published>2017-04-26T01:27:52.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。</p><p>持续集成实现了DevOps, 使开发人员和运维人员从繁琐的工作中解放出来。另外，这种形式极大地提高了开发者的开发效率和开发质量。<br>持续集成有多种工具，如Jenkins. GitLab内置了GitLab-CI，通过配置一段<code>YAML</code>脚本来实现持续集成.</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>持续集成可以实现的功能:</p><ul><li>代码审核: 自动化代码规范审查, 甚至代码质量检查</li><li>自动化测试: 单元测试, 功能测试和验收测试</li><li>编译发布: 将源代码编译成可执行程序, 并将程序上传到托管发布平台实现自动发布</li><li>构建部署: 通过构建Docker镜像, 或登录远程服务器执行相关部署命令和脚本, 实现自动化部署</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>GitLab-CI 检测每次代码变动, 通过<code>.gitlab-ci.yml</code>脚本执行构建命令, 将命令发布到<code>GitLab-Runners(运行机)</code>上, 进而执行命令.</p><p><code>GitLab-Runners</code> 基于Docker执行持续集成的每项任务, 这样就解决了环境依赖问题.</p><p><code>GitLab-Runners</code>把实时将执行结果输出到GitLab网页上, 任务执行完后, 通过徽章标记和邮箱告知执行结果.</p><p>下一章: [[GitLab 快速开始]]</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html" target="_blank" rel="noopener">持续集成是什么</a></li><li><a href="https://about.gitlab.com/2015/12/14/getting-started-with-gitlab-and-gitlab-ci/" target="_blank" rel="noopener">Getting started with GitLab and GitLab CI</a></li><li><a href="https://about.gitlab.com/2016/08/05/continuous-integration-delivery-and-deployment-with-gitlab/" target="_blank" rel="noopener">Continuous Integration, Delivery, and Deployment with GitLab</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI使用Docker进行持续部署</title>
    <link href="https://zacksleo.github.io/2017/04/22/GitLab-CI%E4%BD%BF%E7%94%A8Docker%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/04/22/GitLab-CI使用Docker进行持续部署/</id>
    <published>2017-04-22T14:33:31.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<p>Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login -u username -p password registry.demo.com</span><br><span class="line">docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</span><br><span class="line">docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</span><br></pre></td></tr></table></figure><p>其中 <code>username</code>是用户名, <code>password</code>是密码, <code>registry.demo.com</code>是私有镜像库地址,</p><p><code>$CI_PROJECT_NAME</code> 是GitLab-CI内置变量, 会自动替换为项目的名称, 这里也可以直接写死, 如</p><p><code>docker build -t registry.demo.com/repos/image-name:latest .</code></p><p><code>image-name</code>, 就是要构建的镜像名称, <code>latest</code>是TAG标签, <code>repos</code>是仓库的空间名称</p><p>在下面的例子中, 首先通过composer安装依赖库, 然后通过artifacts传递给构建任务, 构建完镜像将镜像发布到私有库,<br>部署时通过拉取最新的镜像库, 进行部署</p><blockquote><p>项目的deploy目录中, 放置一些配置文件, 如<code>Dockerfile</code>, <code>docker-compose.yml</code>等, 通过<code>rsync</code>同步到部署服务器上, 用于部署所需</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">image: zacksleo/docker-composer:1.1</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</span><br><span class="line">    - apk add rsync</span><br><span class="line">    - eval $(ssh-agent -s)</span><br><span class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</span><br><span class="line">    - chmod 0600 ~/deploy.key</span><br><span class="line">    - ssh-add ~/deploy.key</span><br><span class="line">    - mkdir -p ~/.ssh</span><br><span class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line">    - export APP_ENV=testing</span><br><span class="line"></span><br><span class="line">stages:</span><br><span class="line">    - prepare    </span><br><span class="line">    - build</span><br><span class="line">    - deploy</span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">    COMPOSER_CACHE_DIR: &quot;/cache/composer&quot;</span><br><span class="line">    DOCKER_DRIVER: overlay</span><br><span class="line"></span><br><span class="line">installing-dependencies:</span><br><span class="line">    stage: prepare</span><br><span class="line">    script:</span><br><span class="line">        - composer install --prefer-dist -n --no-interaction -v --no-suggest</span><br><span class="line">    artifacts:</span><br><span class="line">        name: &quot;vendor&quot;</span><br><span class="line">        untracked: true</span><br><span class="line">        expire_in: 60 mins</span><br><span class="line">        paths:</span><br><span class="line">            - $CI_PROJECT_DIR/vendor    </span><br><span class="line">test-image:</span><br><span class="line">    stage: build</span><br><span class="line">    image: docker:latest</span><br><span class="line">    services:</span><br><span class="line">        - docker:dind</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:</span><br><span class="line">        - docker login -u username -p password registry.demo.com</span><br><span class="line">        - docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</span><br><span class="line">        - docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</span><br><span class="line">testing-server:</span><br><span class="line">    stage: deploy</span><br><span class="line">    image: alpine</span><br><span class="line">    variables:</span><br><span class="line">        DEPLOY_SERVER: &quot;server-host&quot;</span><br><span class="line">    script:</span><br><span class="line">        - cd deploy</span><br><span class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats        </span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker login -u username -p password registry.demo.com&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /data/$CI_PROJECT_NAME &amp;&amp; docker-compose stop &amp;&amp; docker-compose rm -f &amp;&amp; docker-compose pull &amp;&amp; docker-compose up -d&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME chown www-data:www-data web/assets&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME ./yii migrate/up --interactive=0&quot;</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/675eb504ly1fezvjdberyj20w30axdh2.jpg" alt=""></p><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://docs.gitlab.com/ce/ci/docker/using_docker_build.html" target="_blank" rel="noopener">Using Docker Build</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLab-CI中的artifacts使用研究</title>
    <link href="https://zacksleo.github.io/2017/04/18/GitLab-CI%E4%B8%AD%E7%9A%84artifacts%E4%BD%BF%E7%94%A8%E7%A0%94%E7%A9%B6/"/>
    <id>https://zacksleo.github.io/2017/04/18/GitLab-CI中的artifacts使用研究/</id>
    <published>2017-04-18T15:56:44.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<p>在GitLab-CI中, <code>cache</code>与<code>artifacts</code>比较容易混淆.</p><p>其中 <code>cache</code> 指的是缓存, 常用于依赖安装中, 如几个<code>jobs</code>都需要安装相同的依赖, 可以使用<code>依赖</code>, 此时可以加快依赖的安装进度;<br>对于<code>artifacts</code>则是将某个<code>工件</code>上传到GitLab提供下载或后续操作使用, 由于每个<code>job</code>启动时, 都会自动删除<code>.gitignore</code>中指定的文件, 因此对于依赖安装目录, 即可以使用<code>cache</code>, 也可以使用<code>artifacts</code>.</p><p>两个主要有以下几个区别:</p><ol><li>虽然定义了<code>cache</code>, 但是如果<code>cache</code>和<code>.gitignore</code>中重复的这部分, 仍然需要重新安装</li><li>重新安装时因为使用的是缓存, 所以很有可能不是最新的</li><li>特别是开发环境, 如果每次都希望使用最新的更新, 应当删除<code>cache</code>, 使用<code>artifacts</code>, 这样可以保证确定的更新<br>4.<code>artifacts</code>中定义的部分, 会自动生成, 并可以传到下面的<code>job</code>中解压使用, 避免了重复依赖安装等工作</li><li>如果使用Docker运行Gitlab-Runner, <code>cache</code>会生成一些临时容器, 不容易清理</li><li><code>artifacts</code>可以设置自动过期时间, 过期自动删除</li><li><code>artifacts</code>会先传到GitLab服务器, 然后需要时再重新下载, 所以这部分也可以在GitLab下载和浏览</li></ol><h2 id="artifacts-的依赖使用"><a href="#artifacts-的依赖使用" class="headerlink" title="artifacts 的依赖使用"></a><code>artifacts</code> 的依赖使用</h2><p>下面是一个使用<code>artifacts</code>的例子, 首先有一个安装依赖的工作, 然后工作完成后, 会将安装文件转移到后续的工作时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">installing-dependencies:</span><br><span class="line">    stage: prepare</span><br><span class="line">    script:</span><br><span class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</span><br><span class="line">        - composer dump-autoload --optimize</span><br><span class="line">    artifacts:</span><br><span class="line">        name: &quot;vendor&quot;</span><br><span class="line">        untracked: true</span><br><span class="line">        expire_in: 60 mins</span><br><span class="line">        paths:</span><br><span class="line">            - $CI_PROJECT_DIR/vendor    </span><br><span class="line">code-review:</span><br><span class="line">    stage: testing</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:</span><br><span class="line">        - php vendor/bin/phpcs --config-set ignore_warnings_on_exit 1</span><br><span class="line">        - php vendor/bin/phpcs --standard=PSR2 -w --colors ./</span><br><span class="line">test-image:</span><br><span class="line">    stage: build</span><br><span class="line">    image: docker:latest</span><br><span class="line">    services:</span><br><span class="line">        - docker:dind</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:        </span><br><span class="line">        - docker build -t $CI_PROJECT_NAME:latest .</span><br><span class="line">        - docker push domain.com/repos/$CI_PROJECT_NAME:latest</span><br><span class="line">    only:</span><br><span class="line">        - develop</span><br></pre></td></tr></table></figure><p>如果上述过程使用<code>cache</code>, 则会变成下面这样子, 注意, 此时每次都要执行<code>composer install</code>这样的依赖安装工作, 即<code>before_script</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cache:</span><br><span class="line">    paths:</span><br><span class="line">        - vendor</span><br><span class="line">before_scritp:    </span><br><span class="line">    - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</span><br><span class="line">    - composer dump-autoload --optimize    </span><br><span class="line">code-review:</span><br><span class="line">    stage: testing    </span><br><span class="line">    script:</span><br><span class="line">        - php vendor/bin/phpcs --config-set ignore_warnings_on_exit 1</span><br><span class="line">        - php vendor/bin/phpcs --standard=PSR2 -w --colors ./</span><br><span class="line">test-image:</span><br><span class="line">    stage: build</span><br><span class="line">    image: docker:latest</span><br><span class="line">    services:</span><br><span class="line">        - docker:dind    </span><br><span class="line">    script:        </span><br><span class="line">        - docker build -t $CI_PROJECT_NAME:latest .</span><br><span class="line">        - docker push domain.com/repos/$CI_PROJECT_NAME:latest</span><br><span class="line">    only:</span><br><span class="line">        - develop</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cache:</span><br><span class="line">    paths:</span><br><span class="line">        - vendor</span><br><span class="line">code-review:</span><br><span class="line">    stage: testing    </span><br><span class="line">    script:    </span><br><span class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</span><br><span class="line">        - composer dump-autoload --optimize     </span><br><span class="line">        - php vendor/bin/phpcs --config-set ignore_warnings_on_exit 1</span><br><span class="line">        - php vendor/bin/phpcs --standard=PSR2 -w --colors ./</span><br><span class="line">test-image:</span><br><span class="line">    stage: build</span><br><span class="line">    image: docker:latest</span><br><span class="line">    services:</span><br><span class="line">        - docker:dind    </span><br><span class="line">    script:        </span><br><span class="line">        - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</span><br><span class="line">        - composer dump-autoload --optimize      </span><br><span class="line">        - docker build -t $CI_PROJECT_NAME:latest .</span><br><span class="line">        - docker push domain.com/repos/$CI_PROJECT_NAME:latest</span><br><span class="line">    only:</span><br><span class="line">        - develop</span><br></pre></td></tr></table></figure><p>否则, 会出现类似 <code>vendor not found</code>的问题</p><h2 id="禁用artifacts"><a href="#禁用artifacts" class="headerlink" title="禁用artifacts"></a>禁用artifacts</h2><p>  默认artifacts会自动在不同的stage中传输, 如果该stage中的job不需要artifacts, 则可以禁用artifacts, 以加速构建速度</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dependencies: []</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><blockquote><p>使用<code>cache</code>会出现一个问题, 就是缓存有可能使用上次执行该<code>job</code>时的缓存, 不能保证某些文件最新</p></blockquote></blockquote><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://docs.gitlab.com/ce/user/project/pipelines/job_artifacts.html" target="_blank" rel="noopener">Introduction to job artifacts</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在GitLab-CI中, &lt;code&gt;cache&lt;/code&gt;与&lt;code&gt;artifacts&lt;/code&gt;比较容易混淆.&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;cache&lt;/code&gt; 指的是缓存, 常用于依赖安装中, 如几个&lt;code&gt;jobs&lt;/code&gt;都需要安装相同的依
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitLabCI通过ssh进行自动部署</title>
    <link href="https://zacksleo.github.io/2017/04/14/GitLabCI%E9%80%9A%E8%BF%87ssh%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>https://zacksleo.github.io/2017/04/14/GitLabCI通过ssh进行自动部署/</id>
    <published>2017-04-14T06:39:50.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>通过gitlab-ci实现文件的自动部署</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>文档托管在gitlab上, 每次代码更新, 会自动出发gitlab-ci构建<br>在构建脚本中, 通过ssh 登录远程服务器执行git拉取文档的命令</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="首先需要在服务器上生成ssh证书"><a href="#首先需要在服务器上生成ssh证书" class="headerlink" title="首先需要在服务器上生成ssh证书"></a>首先需要在服务器上生成ssh证书</h3><blockquote><p>注意该证书的用户必须与ssh远程登录的用户一样, 例如我们的用户名是root</p></blockquote><h3 id="将公钥添加到gitlab上-以便于该用于可以拉取代码"><a href="#将公钥添加到gitlab上-以便于该用于可以拉取代码" class="headerlink" title="将公钥添加到gitlab上, 以便于该用于可以拉取代码"></a>将公钥添加到gitlab上, 以便于该用于可以拉取代码</h3><h3 id="在-CI-CD-Piplines中设置-Secret-Variables-包括-DEPLOY-SERVER-和-SSH-PRIVATE-KEY"><a href="#在-CI-CD-Piplines中设置-Secret-Variables-包括-DEPLOY-SERVER-和-SSH-PRIVATE-KEY" class="headerlink" title="在 CI/CD Piplines中设置 Secret Variables, 包括 DEPLOY_SERVER 和 SSH_PRIVATE_KEY"></a>在 <code>CI/CD Piplines</code>中设置 <code>Secret Variables</code>, 包括 <code>DEPLOY_SERVER</code> 和 <code>SSH_PRIVATE_KEY</code></h3><p>其中 <code>SSH_PRIVATE_KEY</code> 的内容是服务器上的私钥, <code>DEPLOY_SERVER</code> 是服务器地址</p><h3 id="编写-gitlab-ci-yml-文件-注入密钥-通过ssh执行远程命令"><a href="#编写-gitlab-ci-yml-文件-注入密钥-通过ssh执行远程命令" class="headerlink" title="编写 .gitlab-ci.yml 文件, 注入密钥, 通过ssh执行远程命令"></a>编写 <code>.gitlab-ci.yml</code> 文件, 注入密钥, 通过<code>ssh</code>执行远程命令</h3><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 使用alpine镜像, 该镜像很少,只有几兆</span><br><span class="line">image: alpine</span><br><span class="line">stages:</span><br><span class="line">    - deploy</span><br><span class="line">before_script:</span><br><span class="line">    # 预先装 ssh-agent</span><br><span class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</span><br><span class="line">    # 启动服务</span><br><span class="line">    - eval $(ssh-agent -s)</span><br><span class="line">    # 将私钥写入deploy.key 文件</span><br><span class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; deploy.key</span><br><span class="line">    # 配置较低权限</span><br><span class="line">    - chmod 0600 deploy.key</span><br><span class="line">    # 注入密钥</span><br><span class="line">    - ssh-add deploy.key</span><br><span class="line">    - mkdir -p ~/.ssh    </span><br><span class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line"> </span><br><span class="line">release-doc:</span><br><span class="line">    stage: deploy</span><br><span class="line">    script:</span><br><span class="line">        # 连接远程服务器并执行拉取代码的命令</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /path/to/wiki &amp;&amp; git pull origin master&quot;</span><br><span class="line">    only:</span><br><span class="line">        - master</span><br><span class="line">    environment:</span><br><span class="line">        name: production</span><br><span class="line">        url: http://$DEPLOY_SERVER</span><br></pre></td></tr></table></figure><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p><a href="https://docs.gitlab.com/ce/ci/ssh_keys/README.html" target="_blank" rel="noopener">Using SSH keys</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;通过gitlab-ci实现文件的自动部署&lt;/p&gt;
&lt;h2 id=&quot;实现过程&quot;&gt;&lt;a href=&quot;#实现过程&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Git和Gollum搭建Wiki系统</title>
    <link href="https://zacksleo.github.io/2017/03/12/%E4%BD%BF%E7%94%A8Git%E5%92%8CGollum%E6%90%AD%E5%BB%BAWiki%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zacksleo.github.io/2017/03/12/使用Git和Gollum搭建Wiki系统/</id>
    <published>2017-03-12T17:22:09.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/gollum/gollum" target="_blank" rel="noopener">Gollum</a>是一个开源的Wiki系统, 该系统基于Git, 支持 Markdown, RDoc 等多种排版格式.</p><p>下面是在搭建的过程中经常会遇到一些问题</p><h2 id="UTF-8-问题"><a href="#UTF-8-问题" class="headerlink" title="UTF-8 问题"></a>UTF-8 问题</h2><ul><li>安装 <code>gollum-rugged_adapter</code></li><li>通过参数 <code>--adapter rugged</code> 启动gollum</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br><span class="line">sudo gem install gollum-rugged_adapter</span><br><span class="line">gollum --adapter rugged</span><br></pre></td></tr></table></figure><h2 id="如何设置只读"><a href="#如何设置只读" class="headerlink" title="如何设置只读"></a>如何设置只读</h2><p>启动Gollum时, 设置 <code>--no-edit</code> 来禁止编辑</p><h2 id="使用-Docker"><a href="#使用-Docker" class="headerlink" title="使用 Docker"></a>使用 Docker</h2><p>使用Docker 安装gullum的内容见 <a href="http://zacksleo.github.io/2017/03/11/gollum/">gollum</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/gollum/gollum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gollum&lt;/a&gt;是一个开源的Wiki系统, 该系统基于Git, 支持 Markdown, RDoc 等多种排版格式.&lt;/p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gollum</title>
    <link href="https://zacksleo.github.io/2017/03/11/gollum/"/>
    <id>https://zacksleo.github.io/2017/03/11/gollum/</id>
    <published>2017-03-11T07:12:15.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>incompatible character encodings: UTF-8 and ASCII-8BIT</p></blockquote><p>When use gollum , you may be got this error, below can helps you solves the problem.</p><ul><li>install <code>gollum-rugged_adapter</code></li><li>start gullom with <code>--adapter rugged</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br><span class="line">sudo gem install gollum-rugged_adapter</span><br><span class="line">gollum --adapter rugged</span><br></pre></td></tr></table></figure><p>Here is a detailed demo for Dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FROM ruby</span><br><span class="line">RUN apt-get -y update &amp;&amp; apt-get -y install libicu-dev</span><br><span class="line">RUN gem install gollum</span><br><span class="line">RUN gem install github-markdown org-ruby </span><br><span class="line"># RUN gem install --pre gollum-rugged_adapter</span><br><span class="line">RUN apt-get -y install cmake</span><br><span class="line">RUN gem install gollum-rugged_adapter</span><br><span class="line">VOLUME /docs</span><br><span class="line">WORKDIR /docs</span><br><span class="line">CMD [&quot;gollum&quot;, &quot;--port&quot;, &quot;80&quot;, &quot;--adapter&quot;, &quot;rugged&quot;]</span><br><span class="line">#CMD [&quot;gollum&quot;, &quot;--port&quot;, &quot;80&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;incompatible character encodings: UTF-8 and ASCII-8BIT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When use gollum , you may be got this error, bel
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OAuth2中的Token</title>
    <link href="https://zacksleo.github.io/2017/03/09/OAuth2%E4%B8%AD%E7%9A%84Token/"/>
    <id>https://zacksleo.github.io/2017/03/09/OAuth2中的Token/</id>
    <published>2017-03-09T07:32:21.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两个不同的Token"><a href="#两个不同的Token" class="headerlink" title="两个不同的Token"></a>两个不同的Token</h2><p>OAuth2 中主要有两个不同的Token, 其中的区别为是否与用户相关联, 即与用户相关的用户Token, 和与客户端相关的客户端Token,<br>可以通过用户Token, 查询到用户的相关信息, 客户端Token与用户无关, 一般只用于客户端认证</p><h2 id="用户Token"><a href="#用户Token" class="headerlink" title="用户Token"></a>用户Token</h2><blockquote><p>获取用户Token一般有两个方式, 授权码模式和密码模式</p></blockquote><h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><blockquote><p>授权码模式通过跳转到授权中心来获取token</p></blockquote><ul><li>跳转到认证服务器</li><li>认证服务器需要用户登录</li><li>用户选择是否授权</li><li>授权同意后, 自动跳转回原来的页面, 客户端拿到授权码</li><li>客户端凭借授权码, 在服务器上通过接口向认证服务器申请令牌</li></ul><h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><blockquote><p>密码模式通过接口直接申请到Token</p></blockquote><p>该接口需要几个参数, client_id, client_secret, grant_type, username, password</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;client_id&quot;: &quot;客户端ID&quot;,</span><br><span class="line">    &quot;client_secret&quot;: &quot;客户端密码&quot;,</span><br><span class="line">    &quot;grant_type&quot;: &quot;授权模式, 此外为 password&quot;,</span><br><span class="line">    &quot;username&quot;: &quot;用户名&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;用户密码&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端Token"><a href="#客户端Token" class="headerlink" title="客户端Token"></a>客户端Token</h2><blockquote><p>通过客户端ID和客户端密码来获取Token</p></blockquote><p>该Token与客户端相关, 与用于无关, 只用于客户端认证, 避免了接口泄露和滥用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;两个不同的Token&quot;&gt;&lt;a href=&quot;#两个不同的Token&quot; class=&quot;headerlink&quot; title=&quot;两个不同的Token&quot;&gt;&lt;/a&gt;两个不同的Token&lt;/h2&gt;&lt;p&gt;OAuth2 中主要有两个不同的Token, 其中的区别为是否与用户相关联,
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git工作流程及使用规范</title>
    <link href="https://zacksleo.github.io/2017/03/07/Git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <id>https://zacksleo.github.io/2017/03/07/Git工作流程及使用规范/</id>
    <published>2017-03-07T15:17:17.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul><li>master: 用于生产环境部署, 只接受合并请求, 不直接提交</li><li>testing: 用于测试环境测试</li><li>develop: 用于日常开发主线, 其他分支只能合并到 develop 分支</li><li>feature-xxx: 用于增加一个新功能</li><li>hotfix-xxx: 用于修复一个紧急bug</li><li>每次开发新功能，都应该新建一个单独的分支</li></ul><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><ul><li>如果要贡献代码, 首先应阅读<strong>贡献指南</strong>, 确认如果贡献代码</li><li>Fork对应的项目, 然后基于develop分支, 新建一个分支, 在这个分支上进行开发</li><li>开发时应遵守相应的编码规范和Git日志规范, 提交日志应当给出完整扼要的提交信息</li><li>开发完毕后, 先在本项目库上合并到develop分支, 合并完成之后再PR到原项目库</li></ul><h3 id="Commit-message-和-Change-log-编写指南"><a href="#Commit-message-和-Change-log-编写指南" class="headerlink" title="Commit message 和 Change log 编写指南"></a>Commit message 和 Change log 编写指南</h3><ul><li>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交<br>+Commit message 遵从 <a href="http://blog.cheenwe.cn/2016-04-18/git-commit-message/" target="_blank" rel="noopener">Angular 规范</a></li></ul><h4 id="安装-Commitizen-来格式化-commit-使其遵循以上规范"><a href="#安装-Commitizen-来格式化-commit-使其遵循以上规范" class="headerlink" title="安装 Commitizen 来格式化 commit , 使其遵循以上规范"></a>安装 Commitizen 来格式化 commit , 使其遵循以上规范</h4><ul><li>首先注意将<code>package.json</code>和<code>node_modules</code>加入<code>.gitignore</code>文件</li><li>全局安装commitizen:  <code>npm install -g commitizen</code></li><li>在项目根目录初始化package.json:  <code>npm init --yes</code></li><li>项目根目录运行 <code>commitizen init cz-conventional-changelog --save --save-exact</code></li><li>每次提交代码时, 用 <code>git cz</code> 代替 <code>git commit</code></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noopener">Git 使用规范流程</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南</a></li><li><a href="http://blog.cheenwe.cn/2016-04-18/git-commit-message/" target="_blank" rel="noopener">Git commit message 规范</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git工作流程&quot;&gt;&lt;a href=&quot;#Git工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git工作流程&quot;&gt;&lt;/a&gt;Git工作流程&lt;/h2&gt;&lt;h3 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML-CSS编码规范</title>
    <link href="https://zacksleo.github.io/2017/03/07/HTML-CSS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://zacksleo.github.io/2017/03/07/HTML-CSS编码规范/</id>
    <published>2017-03-07T15:16:53.000Z</published>
    <updated>2017-11-18T08:11:32.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Google-HTML-CSS代码风格指南"><a href="#Google-HTML-CSS代码风格指南" class="headerlink" title="Google HTML/CSS代码风格指南"></a>Google HTML/CSS代码风格指南</h2><p>遵循 <em>Google HTML/CSS</em> 代码风格指南编码规范</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://iischajn.github.io/trans/htmlcss-guide/" target="_blank" rel="noopener">http://iischajn.github.io/trans/htmlcss-guide/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Google-HTML-CSS代码风格指南&quot;&gt;&lt;a href=&quot;#Google-HTML-CSS代码风格指南&quot; class=&quot;headerlink&quot; title=&quot;Google HTML/CSS代码风格指南&quot;&gt;&lt;/a&gt;Google HTML/CSS代码风格指南&lt;/
      
    
    </summary>
    
    
  </entry>
  
</feed>
